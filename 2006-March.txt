From smackay at berlios.de  Wed Mar  1 00:51:48 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Wed, 1 Mar 2006 00:51:48 +0100
Subject: [Transform-svn] r90 - trunk/src/com/flagstone/transform/util
Message-ID: <200602282351.k1SNpmBA001588@sheep.berlios.de>

Author: smackay
Date: 2006-03-01 00:51:42 +0100 (Wed, 01 Mar 2006)
New Revision: 90

Modified:
   trunk/src/com/flagstone/transform/util/FSSoundConstructor.java
Log:
Updated documentation to remove doxygen directives. 
Removed redundant FileNotFoundException specification - already 
covered by IOException.

Modified: trunk/src/com/flagstone/transform/util/FSSoundConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSSoundConstructor.java	2006-02-28 13:20:03 UTC (rev 89)
+++ trunk/src/com/flagstone/transform/util/FSSoundConstructor.java	2006-02-28 23:51:42 UTC (rev 90)
@@ -62,12 +62,12 @@
  * interleaved for each sample. For example a stereo sound the order of the samples and 
  * channels levels are:
  *
- *\verbatim
+ *<pre>
  * Sample       0          1          2
  *          +---+---+  +---+---+  +---+---+
  *          | 1 | 2 |  | 1 | 2 |  | 1 | 2 | ....
  *          +---+---+  +---+---+  +---+---+
- *\endverbatim
+ *</pre>
  *
  * NOTE: The byte order for the PCM data in WAVE sound files may vary according to the 
  * platform on which the sound file was created. The FSSoundConstructor currently only
@@ -80,7 +80,7 @@
  *
  * 1. Playing an uncompressed WAVE file.\n
  *
- *\verbatim
+ *<pre>
  * int soundId = movie.newIdentifier();
  *
  * // Generate an FSDefineSound object using the attributes defined in the wave file.
@@ -90,7 +90,7 @@
  *
  * movie.add(soundGenerator.defineSound(soundId));
  * movie.add(new FSSound(soundId, FSSound.Start));
- *\endverbatim
+ *</pre>
  *
  * 2. Streaming Sounds.\n
  *
@@ -98,7 +98,7 @@
  * sequence of blocks which is synchronised with the frames as they are displayed. Typically 
  * block of sound data is generated for each frame displayed.
  *
- *\verbatim
+ *<pre>
  * int framesPerSecond = 12;
  *
  * FSSoundConstructor soundGenerator = new FSSoundGenerator("soundTrack.wav");
@@ -119,7 +119,7 @@
  *     movie.add(soundGenerator.streamBlock(i, samplesPerBlock));
  *     movie.add(new FSShowFrame());
  * }
- * \endverbatim
+ * </pre>
  *
  */
 public final class FSSoundConstructor
@@ -162,30 +162,32 @@
     private int[][] frameTable = null;
     private int samplesPerFrame = 0;
 
+    /**
+     * Creates a new uninitialized FSSoundConstructor object.  Use setSound to 
+     * provide the content.
+     */
+    public FSSoundConstructor() 
+    {
+    }
     /** 
-     * Creates a new FSSoundConstructor object initialised with the contents of the specified 
-     * sound file.
+     * Creates a new FSSoundConstructor object initialised with the contents of 
+     * the specified sound file.
      *
      * @param fileName the name of the file containing the sound.
      * 
-     * @throws FileNotFoundException - if the file does not exist, is a directory rather than 
-     * a regular file, or for some other reason cannot be opened for reading.
+     * @throws FileNotFoundException - if the file does not exist, is a 
+     * directory rather than a regular file, or for some other reason cannot be 
+     * opened for reading.
      * 
      * @throws IOException - if an I/O error occurs while reading the file.
      * 
-     * @throws DataFormatException if the Flash file does not start with a valid signature.
+     * @throws DataFormatException if the file contains a sound format not 
+     * supported by the FSSoundConstructor.
      */
-    public FSSoundConstructor(String fileName) throws FileNotFoundException, IOException, DataFormatException
+    public FSSoundConstructor(String fileName) throws IOException, DataFormatException
     {
         setSound(fileName);
     }
-
-    /**
-     * Creates a new uninitialized FSSoundConstructor object.  Use setSound to provide the content.
-     */
-    public FSSoundConstructor() {
-    }
-    
     /** 
      * Accessor method returning the format for the encoded sound data.
      *
@@ -262,34 +264,42 @@
     /** 
      * Initialises the FSSoundConstructor with the contents of the specified file.
      * 
-     * @param filename a file containing encoded sound data.
+     * @param filename the name of a file containing encoded sound data.
      * 
      * @throws FileNotFoundException - if the file does not exist, is a directory 
-     * rather than a regular file, or for some other reason cannot be opened for reading.
+     * rather than a regular file, or for some other reason cannot be opened for 
+     * reading.
      * 
      * @throws IOException - if an I/O error occurs while reading the file.
      * 
-     * @throws DataFormatException if the file contains a sound format not supported 
-     * by the FSSoundConstructor.
+     * @throws DataFormatException if the file contains a sound format not 
+     * supported by the FSSoundConstructor.
      */
-    public void setSound(String filename) throws FileNotFoundException, IOException, DataFormatException
+    public void setSound(String filename) throws IOException, DataFormatException
     {
-        if (filename.toLowerCase().endsWith("mp3"))
+        if (filename.toLowerCase().endsWith(".mp3"))
             decodeMP3(dataFromFile(filename));
-        else if (filename.toLowerCase().endsWith("wav"))
+        else if (filename.toLowerCase().endsWith(".wav"))
             decodeWAV(filename);
     }
-    
     /** 
-     * Initialises the FSSoundConstructor with the sound data and set of parameters. This method
-     * can be used to update the sound following processing for example to convert a stereo sound
-     * to mono to reduce the size of the encoded data.
+     * Initialises the FSSoundConstructor with the sound data and set of 
+     * parameters. This method can be used to update the sound following 
+     * processing for example to convert a stereo sound to mono to reduce the 
+     * size of the encoded data.
      * 
-     * @param format the format of the encoded sound either FSSound.PCM, FSSound.ADPCM or FSSound.MP3.
+     * @param format the format of the encoded sound either FSSound.PCM, 
+     * FSSound.ADPCM or FSSound.MP3.
+     * 
      * @param channelCount the number of sound channels, 1 = mono, 2 = stereo.
      * @param sampleCount the number of samples in each channel.
-     * @param sampleRate the rate at which the sound is played in kiloHertz. Flash supports 5512, 11025, 22050 or 44100.
-     * @param sampleSize the number of bytes for each uncompressed sound sample, either 1 or 2.
+     * 
+     * @param sampleRate the rate at which the sound is played in kiloHertz. 
+     * Flash supports 5512, 11025, 22050 or 44100.
+     * 
+     * @param sampleSize the number of bytes for each uncompressed sound sample, 
+     * either 1 or 2.
+     * 
      * @param bytes an array of sound samples encoding in the specified format.
      */
     public void setSound(int format, int channelCount, int sampleCount, int sampleRate, int sampleSize, byte[] bytes)
@@ -585,7 +595,7 @@
         }
     }
     
-    private byte[] dataFromFile(String filename) throws FileNotFoundException, IOException
+    private byte[] dataFromFile(String filename) throws IOException
     {
         File aFile = new File(filename);
         FileInputStream imageContents = null;



From smackay at berlios.de  Wed Mar  1 00:55:58 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Wed, 1 Mar 2006 00:55:58 +0100
Subject: [Transform-svn] r91 - trunk/src/com/flagstone/transform/util
Message-ID: <200602282355.k1SNtwfj004305@sheep.berlios.de>

Author: smackay
Date: 2006-03-01 00:55:37 +0100 (Wed, 01 Mar 2006)
New Revision: 91

Modified:
   trunk/src/com/flagstone/transform/util/FSShapeConstructor.java
Log:
Removed old doxygen directives

Modified: trunk/src/com/flagstone/transform/util/FSShapeConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSShapeConstructor.java	2006-02-28 23:51:42 UTC (rev 90)
+++ trunk/src/com/flagstone/transform/util/FSShapeConstructor.java	2006-02-28 23:55:37 UTC (rev 91)
@@ -76,7 +76,7 @@
  *
  * 1. Defining a rectangle using move and line drawing operations.\n
  * 
- *\verbatim
+ *<pre>
  *    FSShapeConstructor path = new FSShapeConstructor();
  * 
  *    path.COORDINATES_ARE_PIXELS = true;
@@ -105,11 +105,11 @@
  * 
  *    FSDefineShape3 rect = path.defineShape(movie.newIdentifier());
  * 
- * \endverbatim
+ *</pre>
  *
  * 2. Defining a rectangle using the path creation method.\n
  * 
- *\verbatim
+ *<pre>
  *    FSShapeConstructor path = new FSShapeConstructor();
  * 
  *    path.COORDINATES_ARE_PIXELS = true;
@@ -136,7 +136,7 @@
  * 
  *    FSDefineShape3 rect = path.defineShape(movie.newIdentifier());
  *
- *\endverbatim
+ *</pre>
  *
  */
 public final class FSShapeConstructor



From smackay at berlios.de  Wed Mar  1 00:56:24 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Wed, 1 Mar 2006 00:56:24 +0100
Subject: [Transform-svn] r92 - trunk/src/com/flagstone/transform/util
Message-ID: <200602282356.k1SNuO0r004629@sheep.berlios.de>

Author: smackay
Date: 2006-03-01 00:56:19 +0100 (Wed, 01 Mar 2006)
New Revision: 92

Modified:
   trunk/src/com/flagstone/transform/util/FSImageConstructor.java
Log:
Removed redundant FileNotFoundException specification - already 
covered by IOException.

Modified: trunk/src/com/flagstone/transform/util/FSImageConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSImageConstructor.java	2006-02-28 23:55:37 UTC (rev 91)
+++ trunk/src/com/flagstone/transform/util/FSImageConstructor.java	2006-02-28 23:56:19 UTC (rev 92)
@@ -330,11 +330,10 @@
      * @throws DataFormatException if the file contains an unsupported image format or if an error occurs 
      * while decoding the image in the file.
      */
-    public FSImageConstructor(String filename) throws FileNotFoundException, IOException, DataFormatException
+    public FSImageConstructor(String filename) throws IOException, DataFormatException
     {
         setImage(dataFromFile(filename));
-    }
-    
+    }   
     /**
      * Constructs and FSImageConstructor object and loads the encoded image data. The FSImageConstructor
      * class support Windows bitmap (BMP), Portable Network Graphics (PNG) or JPEG encoded images.
@@ -362,7 +361,7 @@
      * @throws DataFormatException if the file contains an unsupported image format or if an error occurs 
      * while decoding the image in the file.
      */
-    public void setImageFromFile(String filename) throws FileNotFoundException, IOException, DataFormatException
+    public void setImageFromFile(String filename) throws IOException, DataFormatException
     {
         setImage(dataFromFile(filename));
     }
@@ -379,20 +378,6 @@
     {
         int signature = ((bytes[0] & 0xFF) << 8) | (bytes[1] & 0xFF);
 
-        init();
-        
-        switch (signature)
-        {
-            case 0xffd8: decodeJPEG(bytes); break;
-            case 0x424d: decodeBMP(bytes); break;
-            case 0x8950: decodePNG(bytes); break;
-            default: 
-                throw new DataFormatException("Unsupported image format");  
-        }
-    }
-    
-    private void init()
-    {
         format = 0;
         width = 0;
         height = 0;
@@ -418,6 +403,15 @@
         indexedImage = null;
         colorImage = null;
         jpegImage = null;
+        
+        switch (signature)
+        {
+            case 0xffd8: decodeJPEG(bytes); break;
+            case 0x424d: decodeBMP(bytes); break;
+            case 0x8950: decodePNG(bytes); break;
+            default: 
+                throw new DataFormatException("Unsupported image format");  
+        }
     }
     
     /**
@@ -439,7 +433,6 @@
     {
         return width;
     }
-
     /**
      * Returns the height of the image in pixels.
      * 
@@ -448,8 +441,7 @@
     public int getHeight()
     {
         return height;
-    }
-    
+    }   
     /**
      * Returns a copy of the colour table used in an indexed image. Each entry in the 
      * colour table contains 4 bytes with one byte for the alpha channel and each
@@ -479,7 +471,6 @@
         }
         return table;
     }
-    
     /**
      * Returns a copy of the image data decoded from an indexed image. A two
      * dimensional array is returned, byte[height][width] with each entry containing an 
@@ -507,7 +498,6 @@
         }
         return image;
     }
-
     /**
      * Returns a copy of the image data decoded from a true colour file. A three
      * dimensional array is returned with four bytes for each pixel in the image,
@@ -541,7 +531,6 @@
         }
         return image;
     }
-
     /**
      * Returns a copy of the encoded data decoded from a JPEG image file.
      * 
@@ -562,7 +551,6 @@
         }
         return image;
     }
-    
     /**
      * Sets the image data for an indexed image.
      * 



From smackay at berlios.de  Wed Mar  1 00:59:35 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Wed, 1 Mar 2006 00:59:35 +0100
Subject: [Transform-svn] r93 - trunk/src/com/flagstone/transform/util
Message-ID: <200602282359.k1SNxZXB005124@sheep.berlios.de>

Author: smackay
Date: 2006-03-01 00:59:22 +0100 (Wed, 01 Mar 2006)
New Revision: 93

Modified:
   trunk/src/com/flagstone/transform/util/FSTextConstructor.java
Log:
FSTextConstructor: Added method public FSTextConstructor(int, Font) 
to clearly separate setting a font from a file.
      
Added a reset(int) method to allow FSTextConstructor objects to be 
reused when generating objects for more than one Flash file.

Modified: trunk/src/com/flagstone/transform/util/FSTextConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSTextConstructor.java	2006-02-28 23:56:19 UTC (rev 92)
+++ trunk/src/com/flagstone/transform/util/FSTextConstructor.java	2006-02-28 23:59:22 UTC (rev 93)
@@ -54,10 +54,8 @@
  * specifying the name of the file:</p>
  * 
  * <pre>
- *     FSTextConstructor font = new FSTextConstructor(identifier, "Arial.otf");
- *     FSTextConstructor font = new FSTextConstructor(identifier, "Arial.ttf");
- *
- *     FSTextConstructor font = new FSTextConstructor(identifier, "TimesNewRoman.swf");
+ * FSTextConstructor font = new FSTextConstructor(id, trueTypeFile.getPath());
+ * FSTextConstructor font = new FSTextConstructor(id, swfFile.getPath());
  * </pre>
  * 
  * <P>The OpenType or TrueType file is parsed to construct the font definition. 
@@ -68,15 +66,14 @@
  * character. An example Flash file can be found in the resources directory 
  * included in this release.</p>
  * 
- * <P>Font definitions from AWT templates are created by specifying the name of 
- * the font:</p>
+ * <P>Font definitions from AWT templates are created by passing a font object:</p>
  * 
  * <pre>
- *     FSTextConstructor font = new FSTextConstructor(identifier, "Times New Roman Bold");
+ * FSTextConstructor font = new FSTextConstructor(id, new Font("Arial", Font.PLAIN, 1));
  * </pre>
  * 
  * <p>Only the font or file name needs to specified. Unlike Java fonts, font 
- * definitions in Flash are size  independent, the size and colour in which a 
+ * definitions in Flash are size independent, the size and colour in which a 
  * given string in rendered is specified in the object  that defines the text to 
  * be displayed avoiding the need to create multiple font definitions for  the 
  * same font name.</p>
@@ -282,8 +279,8 @@
     private float descent = 0;
     private float leading = 0;
     
+    private short[] orderTable = new short[65536];
     private short[] characterTable = new short[65536];
-    private short[] orderTable = new short[65536];
     private FSGlyph[] glyphTable = null;
     
     private int numberOfGlyphs = 0;
@@ -295,31 +292,27 @@
     /**
      * Creates a new FSTextConstructor object using the specified font.
      * 
-     * <P>The fontName can be used to identify a particular font in two ways, either 
-     * specifying:
+     * <P>The fontName can be used to identify a particular font in two ways, 
+     * either specifying:
      * 
      * <ol>
      * <li>the name of a file containing a TrueType or OpenType font definition.</li>
      * <li>the name of a Flash file containing font definition.</li>
-     * <li>the name of an Java AWT font.</li>
-      * </ol>
+     * </ol>
      *
-     * For AWT fonts the name is comprised of a <i>font family name</i> e.g. "Times New Roman"
-     * followed by an optional suffix that identify the font style such as "Bold",
-     * "Italic" to give a complete font name e.g. "Times New Roman Bold" or "Times New
-     * Roman Bold Italic".</p>
-     *
-     * @param anIdentifier a unique identifier that will be assigned to the font definition
-     * object generated.
+     * IMPORTANT: This method previously allowed the name of a AWT Font to be 
+     * specified as an argument. This will no longer be supported in future 
+     * releases, use the FSTextCOnstructor(int, Font) method instead.
      * 
-     * @param fontName either the name of a Flash, TrueType or OpenType file containing an 
-     * existing font definition or the name of an AWT font.
+     * @param anIdentifier a unique identifier that will be assigned to the 
+     * font definition object generated and referenced by all the text object
+     * generated.
      * 
-     * @throws IllegalArgumentException if the fontName specifies a font that is not 
-     * available in the Java AWT environment.
+     * @param fontName either the name of a Flash, TrueType or OpenType file 
+     * containing an existing font definition.
      * 
-     * @throws FileNotFoundException if the fontName specifies a file and the file cannot
-     * be found or opened.
+     * @throws FileNotFoundException if the fontName specifies a file and the 
+     * file cannot be found or opened.
      * 
      * @throws IOException if the fontName specifies a file and an error occurs while
      * reading the file from disk.
@@ -327,23 +320,64 @@
      * @throws DataFormatException if the fontName specifies a file and an error occurs while 
      * parsing the font definition.
      */
-    public FSTextConstructor(int anIdentifier, String fontName) throws FileNotFoundException, IOException, DataFormatException
+    public FSTextConstructor(int anIdentifier, String filename) throws IOException, DataFormatException
     {
         identifier = anIdentifier; 
         
         for (int i=0; i<65536; i++)
             orderTable[i] = -1;
             
-        if (fontName.toLowerCase().endsWith(".swf"))
-            decodeSWFFont(fontName);
-        else if (fontName.toLowerCase().endsWith(".otf"))
-            decodeOpenTypeFont(fontName);
-        else if (fontName.toLowerCase().endsWith(".ttf"))
-            decodeOpenTypeFont(fontName);
+        if (filename.toLowerCase().endsWith(".swf"))
+            decodeSWFFont(filename);
+        else if (filename.toLowerCase().endsWith(".otf"))
+            decodeOpenTypeFont(filename);
+        else if (filename.toLowerCase().endsWith(".ttf"))
+            decodeOpenTypeFont(filename);
         else
-             decodeAWTFont(fontName);
-     }
+             decodeAWTFont(filename);
+    }
     /**
+     * Creates a new FSTextConstructor object using the specified font.
+     * 
+     * @param anIdentifier a unique identifier that will be assigned to the 
+     * font definition object generated and referenced by all the text object
+     * generated.
+     * 
+     * @param an AWT Font object.
+     */
+    public FSTextConstructor(int anIdentifier, Font font)
+    {
+        identifier = anIdentifier; 
+        
+        for (int i=0; i<65536; i++)
+            orderTable[i] = -1;
+            
+        decodeAWTFont(font);
+    }    
+    /**
+     * Resets the FSTextConstructor to generate a new set of font and text 
+     * objects. 
+     * 
+     * The character sets defined for the font are cleared so the characters
+     * that will be used to generate the next font definition should be set with
+     * the willDisplay() method.
+     * 
+     * This method is useful when generating objects for more than one Flash
+     * file as it avoids the penalty of reloading the font definition which 
+     * can be very expensive.
+     * 
+     * @param anIdentifier a unique identifier that will be assigned to the 
+     * font definition object generated and referenced by all the text object
+     * generated.
+     */
+    public void reset(int anIdentifier)
+    {
+        identifier = anIdentifier; 
+        
+        for (int i=0; i<65536; i++)
+            orderTable[i] = -1;      
+    }
+    /**
      * Indicates whether or not this FSTextConstructor can display all the 
      * characters specified in the array. This method returns the index of the 
      * first character that cannot be displayed using this font. If the Font can 
@@ -667,8 +701,7 @@
         return path.defineTransparentShape(anIdentifier);
     }
 
-    private void decodeSWFFont(String filename)
-        throws FileNotFoundException, IOException, DataFormatException
+    private void decodeSWFFont(String filename) throws IOException, DataFormatException
     {
         FSMovie fontMovie = new FSMovie(filename);
 
@@ -729,7 +762,11 @@
             glyphTable[character.getGlyphIndex()].advance = (int) (character.getAdvance() * (1024.0 / size));
         }
         orderTable[0] = 0;
-    }
+    }  
+    /*
+     * This method will be superceded by decodeAWTFont(Font font) in a future 
+     * release.
+     */
     private void decodeAWTFont(String fontName)
     {
         FontRenderContext fontContext = new FontRenderContext(new AffineTransform(), true, true);
@@ -747,7 +784,6 @@
         name = fontName;
         encoding = FSText.Unicode;
 
-//        AffineTransform transform = transformToEMSquare(font, fontContext);
         Rectangle2D transform = transformToEMSquare(font, fontContext);
 
         double scaleY = 1024.0; // Math.abs(1024.0 / bounds.getY());
@@ -757,24 +793,15 @@
 
         size = (float) scaleY;
 
-//        size = (float) transform.getScaleX();
-        
         /*
          The new font scaled to the EM Square must be derived using the size as well 
          as the transform used for the glyphs otherwise the advance values are not 
          scaled accordingly.
          */
-        Hashtable map = new Hashtable();
-
         AffineTransform at = AffineTransform.getTranslateInstance(translateX, translateY);
         font = font.deriveFont(at);
         font = font.deriveFont((float)scaleX);
 
-//        map.put(TextAttribute.SIZE, new Float(size));
-//        map.put(TextAttribute.TRANSFORM, transform);
-
-//        font = font.deriveFont(map);
-        
         missingGlyph = font.getMissingGlyphCode();
 
         isBold = font.isBold();
@@ -817,11 +844,99 @@
            }
            else
            {
-               //characterTable[currentChar] = (short)missingGlyph;                  
-               //glyphTable[glyphIndex] = new FSGlyph(new FSShape(), new FSBounds(0, 0, 0, 0));
-               //glyphTable[glyphIndex].advance = glyphTable[missingGlyph].advance;               
+                GlyphVector glyphVector = font.createGlyphVector(fontContext, new char[] { (char)missingGlyph });
+            
+                Shape outline = glyphVector.getGlyphOutline(0);
+                int advance = (int) (glyphVector.getGlyphMetrics(0).getAdvance());
+    
+                characterTable[currentChar] = (short)glyphIndex;
+                glyphTable[glyphIndex] = new FSGlyph(convertShape(outline), new FSBounds(0, 0, 0, 0));
+                glyphTable[glyphIndex].advance = advance;
+    
+                if (font.hasUniformLineMetrics() == false)
+                {
+                    LineMetrics lineMetrics = font.getLineMetrics(new char[]
+                             {(char)currentChar }, 0, 1, fontContext);
+    
+                    ascent = 0; // Math.max(lineMetrics.getAscent() * 20, ascent);
+                    descent = 0; // Math.max(lineMetrics.getDescent() * 20, descent);
+                    leading = 0; // Math.max(lineMetrics.getLeading() * 20, leading);
+                }
+           }
+           glyphIndex++;
+           characterCode++;
+       }
+       orderTable[0] = (short)missingGlyph;
+    }
+    private void decodeAWTFont(Font font)
+    {
+        FontRenderContext fontContext = new FontRenderContext(new AffineTransform(), true, true);
+        font = font.deriveFont(1.0f);
 
-               GlyphVector glyphVector = font.createGlyphVector(fontContext, new char[] { (char)missingGlyph });
+        name = font.getName();
+        encoding = FSText.Unicode;
+
+        Rectangle2D transform = transformToEMSquare(font, fontContext);
+
+        double scaleY = 1024.0; // Math.abs(1024.0 / bounds.getY());
+        double scaleX = scaleY;
+        double translateX = 1024.0 - (transform.getX() * 1024.0);
+        double translateY = 1024.0 - (transform.getY() * 1024.0);
+
+        size = (float) scaleY;
+
+        /*
+         The new font scaled to the EM Square must be derived using the size as well 
+         as the transform used for the glyphs otherwise the advance values are not 
+         scaled accordingly.
+         */
+        AffineTransform at = AffineTransform.getTranslateInstance(translateX, translateY);
+        font = font.deriveFont(at);
+        font = font.deriveFont((float)scaleX);
+
+        missingGlyph = font.getMissingGlyphCode();
+
+        isBold = font.isBold();
+        isItalic = font.isItalic();
+
+        int numGlyphs = font.getNumGlyphs();
+        int glyphIndex = 0;
+        int characterCode = 0;
+    
+        glyphTable = new FSGlyph[numGlyphs];
+    
+        /*
+         * Run through all the unicode character codes looking for a corresponding glyph.
+         */
+        while ((glyphIndex < numGlyphs) && (characterCode < 65535))
+        {
+            char currentChar = (char) characterCode;
+    
+            if (font.canDisplay(currentChar))
+            {
+                GlyphVector glyphVector = font.createGlyphVector(fontContext,
+                       new char[] { currentChar });
+    
+                Shape outline = glyphVector.getGlyphOutline(0);
+                int advance = (int) (glyphVector.getGlyphMetrics(0).getAdvance());
+    
+                characterTable[currentChar] = (short)glyphIndex;
+                glyphTable[glyphIndex] = new FSGlyph(convertShape(outline), new FSBounds(0, 0, 0, 0));
+                glyphTable[glyphIndex].advance = advance;
+    
+                if (font.hasUniformLineMetrics() == false)
+                {
+                    LineMetrics lineMetrics = font.getLineMetrics(new char[]
+                             { (char) currentChar }, 0, 1, fontContext);
+    
+                       ascent = 0; // Math.max(lineMetrics.getAscent() * 20, ascent);
+                       descent = 0; // Math.max(lineMetrics.getDescent() * 20, descent);
+                       leading = 0; // Math.max(lineMetrics.getLeading() * 20, leading);
+                }
+           }
+           else
+           {
+                GlyphVector glyphVector = font.createGlyphVector(fontContext, new char[] { (char)missingGlyph });
             
                 Shape outline = glyphVector.getGlyphOutline(0);
                 int advance = (int) (glyphVector.getGlyphMetrics(0).getAdvance());
@@ -857,53 +972,29 @@
         double h = 0.0;
 
         /*
-         * Scan through all the glyphs looking for glyphs that will fall outside the left or 
-         * bottom side of the EM Square once the glyph has been scaled.
+         * Scan through all the glyphs looking for glyphs that will fall outside 
+         * the left or bottom side of the EM Square once the glyph has been scaled.
          */
-/*
-        for (int i = 0; i < numGlyphs; i++)
+        while ((glyphIndex < numGlyphs) && (characterCode < 65535)) 
         {
-            char currentChar = (char) (i);
+            char currentChar = (char) characterCode;
 
-            GlyphVector glyphVector = font.createGlyphVector(fontContext,
+            if (font.canDisplay(currentChar)) 
+            {
+                GlyphVector glyphVector = font.createGlyphVector(fontContext,
                     new char[] { currentChar });
-            Rectangle2D bounds = glyphVector.getGlyphOutline(0).getBounds2D();
-
-            x = Math.min(bounds.getX(), x);
-            y = Math.min(bounds.getY(), y);
+                Rectangle2D bounds = glyphVector.getGlyphOutline(0).getBounds2D();
+    
+                x = Math.min(bounds.getX(), x);
+                y = Math.min(bounds.getY(), y);
+    
+                w = Math.max(bounds.getWidth(), w);
+                h = Math.max(bounds.getHeight(), h);
+    
+                glyphIndex++;
+            }
+            characterCode++;
         }
-*/
-        while ( (glyphIndex < numGlyphs) && (characterCode < 65535)) 
-        {
-          char currentChar = (char) characterCode;
-
-          if (font.canDisplay(currentChar)) {
-            GlyphVector glyphVector = font.createGlyphVector(fontContext,
-                new char[] { currentChar });
-            Rectangle2D bounds = glyphVector.getGlyphOutline(0).getBounds2D();
-
-            x = Math.min(bounds.getX(), x);
-            y = Math.min(bounds.getY(), y);
-
-            w = Math.max(bounds.getWidth(), w);
-            h = Math.max(bounds.getHeight(), h);
-
-            glyphIndex++;
-          }
-          characterCode++;
-        }
-        /*
-         * Assume glyphs are normally taller than they are wider. The font size gives the
-         * most accurate measure for scaling the font to the 1024 x 1024 twip EM Square.
-         */
-/*
-        double scaleXY = 1024.0 / (font.getSize() * 20.0);
-
-        transform.scale(scaleXY, scaleXY);
-        transform.translate(-x, -y);
-
-        return transform;
-*/        
         return new Rectangle2D.Double(x, y, w, h);
     }
     /*
@@ -1093,7 +1184,6 @@
         }
         return glyphCodes;
     }
-
     /*
      Return an array of advances for the glyphs that represent each of the characters in the string
      */
@@ -1110,7 +1200,6 @@
 
         return glyphAdvances;
     }
-
     /*
      Return a new baseline scaled according to the new font size.
      */
@@ -1121,7 +1210,6 @@
 
         return newBaseline;
     }
-    
     private byte[] dataFromFile(String filename) throws FileNotFoundException, IOException
     {
         File aFile = new File(filename);
@@ -1135,8 +1223,7 @@
 
         return bytes;
     }
-
-    private void decodeOpenTypeFont(String fontName) throws FileNotFoundException, IOException, DataFormatException
+    private void decodeOpenTypeFont(String fontName) throws IOException, DataFormatException
     {
         FSCoder coder = new FSCoder(FSCoder.BIG_ENDIAN, dataFromFile(fontName));
         



From smackay at berlios.de  Wed Mar  1 01:00:56 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Wed, 1 Mar 2006 01:00:56 +0100
Subject: [Transform-svn] r94 - trunk/src/com/flagstone/transform
Message-ID: <200603010000.k2100urh005377@sheep.berlios.de>

Author: smackay
Date: 2006-03-01 01:00:32 +0100 (Wed, 01 Mar 2006)
New Revision: 94

Modified:
   trunk/src/com/flagstone/transform/FSMovie.java
Log:
Removed redundant FileNotFoundException specification - already 
covered by IOException.

Modified: trunk/src/com/flagstone/transform/FSMovie.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovie.java	2006-02-28 23:59:22 UTC (rev 93)
+++ trunk/src/com/flagstone/transform/FSMovie.java	2006-03-01 00:00:32 UTC (rev 94)
@@ -699,7 +699,7 @@
      * @throws FSCoderException - if an error occurs while decoding the file.
      * @throws IOException - if an I/O error occurs while reading the file.
      */
-    public FSMovie(String fileName) throws FileNotFoundException, DataFormatException, IOException
+    public FSMovie(String fileName) throws IOException, DataFormatException
     {
         decodeFromFile(fileName);
     }
@@ -935,9 +935,9 @@
      * Gets an array of objects from the Movie with the specified type. For example 
      * to retrieve all the FSDefineShape objects specified in a movie:
 
-        \verbatim
+        <pre>
          ArrayList allShapes= aMovie.getObjectsOfType(FSMovieObject.DefineShape);
-        \endverbatim
+        </pre>
 
         Note that only objects at the "top-level" in the movie are checked, namely 
         movie or definition objects. Objects "owned" by another object such as 



From smackay at berlios.de  Wed Mar  1 01:02:34 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Wed, 1 Mar 2006 01:02:34 +0100
Subject: [Transform-svn] r95 - trunk/doc
Message-ID: <200603010002.k2102YWX005591@sheep.berlios.de>

Author: smackay
Date: 2006-03-01 01:01:22 +0100 (Wed, 01 Mar 2006)
New Revision: 95

Modified:
   trunk/doc/CHANGES.txt
Log:
Updated with latest changes.

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-01 00:00:32 UTC (rev 94)
+++ trunk/doc/CHANGES.txt	2006-03-01 00:01:22 UTC (rev 95)
@@ -1,3 +1,18 @@
+2006-02-28 - smackay at flagstonesoftware.com
+
+    * Removed old doxygen directives from FSMovie, FSSoundConstructor and
+      FSShapeConstructor.
+    
+    * Removed redundant exceptions declarations from method signatures:
+      FileNotFoundException is covered by IOException. Applies to FSMovie
+      FSSoundConstructor, FSImageConstructor.
+      
+    * FSTextConstructor: Added method public FSTextConstructor(int, Font) to 
+      clearly separate setting a font from a file.
+      
+      Added a reset(int) method to allow FSTextConstructor objects to be reused
+      when generating objects for more than one Flash file.
+
 2006-02-27 - smackay at flagstonesoftware.com
 
     * Added FSTextConstructor.willDisplay(char[]) to allow sets of characters



From smackay at berlios.de  Wed Mar  1 01:04:27 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Wed, 1 Mar 2006 01:04:27 +0100
Subject: [Transform-svn] r96 - in trunk: doc src/com/flagstone/transform
Message-ID: <200603010004.k2104R2M005805@sheep.berlios.de>

Author: smackay
Date: 2006-03-01 01:03:37 +0100 (Wed, 01 Mar 2006)
New Revision: 96

Modified:
   trunk/doc/CHANGES.txt
   trunk/src/com/flagstone/transform/FSColorTransform.java
Log:
Removed old doxygen directives

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-01 00:01:22 UTC (rev 95)
+++ trunk/doc/CHANGES.txt	2006-03-01 00:03:37 UTC (rev 96)
@@ -1,7 +1,7 @@
 2006-02-28 - smackay at flagstonesoftware.com
 
     * Removed old doxygen directives from FSMovie, FSSoundConstructor and
-      FSShapeConstructor.
+      FSShapeConstructor, FSColorTransform.
     
     * Removed redundant exceptions declarations from method signatures:
       FileNotFoundException is covered by IOException. Applies to FSMovie

Modified: trunk/src/com/flagstone/transform/FSColorTransform.java
===================================================================
--- trunk/src/com/flagstone/transform/FSColorTransform.java	2006-03-01 00:01:22 UTC (rev 95)
+++ trunk/src/com/flagstone/transform/FSColorTransform.java	2006-03-01 00:03:37 UTC (rev 96)
@@ -190,11 +190,11 @@
 
         Each colour channel is transformed by the following calculation:
 
-        \verbatim
+        <pre>
         newRed = red + addRedTerm
         newGreen = green + addGreenTerm
         newBlue = blue + addBlueTerm
-        \endverbatim
+        </pre>
 
         The add term value for the alpha channel defaults to 0 so if the transform is added to an object that uses alpha channel information then the alpha channel will remain unchanged.
 
@@ -215,12 +215,12 @@
 
         Each colour channel is transformed by the following calculation:
 
-        \verbatim
+        <pre>
         newRed = red + addRedTerm
         newGreen = green + addGreenTerm
         newBlue = blue + addBlueTerm
         newAlpha = alpha + addAlphaTerm
-        \endverbatim
+        </pre>
 
         In the Flash Player the value assigned to the respective colour channel is clamped to the range 0..255.
 
@@ -241,11 +241,11 @@
 
         Each colour channel is transformed by the following calculation:
 
-        \verbatim
+        <pre>
         newRed = red * multiplyRedTerm
         newGreen = green * multiplyGreenTerm
         newBlue = blue * multiplyBlueTerm
-        \endverbatim
+        </pre>
 
         The multiply term value for the alpha channel defaults to 1.0 so if the transform is added to an object that uses alpha channel information then the alpha channel will remain unchanged.
 
@@ -266,12 +266,12 @@
 
         Each colour channel is transformed by the following calculation:
 
-        \verbatim
+        <pre>
         newRed = red * multiplyRedTerm
         newGreen = green * multiplyGreenTerm
         newBlue = blue * multiplyBlueTerm
         newAlpha = alpha * multiplyAlphaTerm
-        \endverbatim
+        </pre>
 
         In the Flash Player the value assigned to the respective colour channel is clamped to the range 0..255.
 
@@ -292,11 +292,11 @@
 
         Each colour channel is transformed by the following calculation:
 
-        \verbatim
+        <pre>
         newRed = (red * multiplyRedTerm) + addRedTerm
         newGreen = (green * multiplyGreenTerm) + addGreenTerm
         newBlue = (blue * multiplyBlueTerm) + addBlueTerm
-        \endverbatim
+        </pre>
 
         The multiply and add terms for the alpha channel default to 1.0 and 0 respectively so for objects that use the alpha channel information then the alpha channel will remain unchanged.
 
@@ -323,12 +323,12 @@
 
         Each colour channel is transformed by the following calculation:
 
-        \verbatim
+        <pre>
         newRed = (red * multiplyRedTerm) + addRedTerm
         newGreen = (green * multiplyGreenTerm) + addGreenTerm
         newBlue = (blue * multiplyBlueTerm) + addBlueTerm
         newAlpha = (alpha * multiplyAlphaTerm) + addAlphaTerm
-        \endverbatim
+        </pre>
 
         In the Flash Player the value assigned to the respective colour channel is clamped to the range 0..255.
 



From smackay at berlios.de  Wed Mar  1 09:31:09 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Wed, 1 Mar 2006 09:31:09 +0100
Subject: [Transform-svn] r97 - trunk/src/com/flagstone/transform/util
Message-ID: <200603010831.k218V9g4005419@sheep.berlios.de>

Author: smackay
Date: 2006-03-01 09:31:05 +0100 (Wed, 01 Mar 2006)
New Revision: 97

Modified:
   trunk/src/com/flagstone/transform/util/FSCharacterTable.java
Log:
Added remaining characters for Finnish and French. Added character
sets for Norwegian, Swedish, Dutch and Italian.

Modified: trunk/src/com/flagstone/transform/util/FSCharacterTable.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSCharacterTable.java	2006-03-01 00:03:37 UTC (rev 96)
+++ trunk/src/com/flagstone/transform/util/FSCharacterTable.java	2006-03-01 08:31:05 UTC (rev 97)
@@ -333,19 +333,21 @@
         '\u20AC', // Euro currency symbol
     };
 
-    /**
-     * TODO Add ?? ?? ?? ??
-     */
     private final static char[] fi_FI = { 
         '\u00A2', // cent sign
+        '\u00C4', // upper case letter A with diaresis
         '\u00C5', // upper case letter A with ring above
+        '\u00D6', // upper case letter O with diaresis
+        '\u00E4', // lower case letter A with diaresis
         '\u00E5', // lower case letter A with ring above
+        '\u00F6', // lower case letter O with diaresis
+        '\u0160', // upper case letter S with caron
+        '\u0161', // lower case letter S with caron
+        '\u017D', // upper case letter Z with caron
+        '\u017E', // lower case letter z with caron
         '\u20AC', // Euro currency symbol
     };
     
-    /**
-     * TODO Add ? ?
-     */
     private final static char[] fr_FR = {
         '\u00A2', // cent sign
         '\u00C0', // upper case letter A with grave
@@ -372,9 +374,31 @@
         '\u00F4', // lower case letter O with circumflex
         '\u00FA', // lower case letter U with acute
         '\u00FC', // lower case letter U with diaresis
+        '\u0152', // upper case oE ligature
+        '\u0153', // lower case oE ligature
         '\u20AC', // Euro currency symbol
     };
 
+    private final static char[] it_IT = {
+        '\u00A2', // cent sign
+        '\u20AC', // Euro currency symbol
+    };
+
+    private final static char[] nl_NL = {
+        '\u0132', // upper case IJ ligature
+        '\u0133', // lower case IJ ligature
+        '\u20AC', // Euro currency symbol
+    };
+
+    private final static char[] no_NO = {
+        '\u00C5', // upper case letter A with ring above
+        '\u00C6', // upper case letter AE
+        '\u00D8', // upper case letter O with stroke
+        '\u00E5', // lower case letter A with ring above
+        '\u00E6', // lower case letter AE
+        '\u00F8', // lower case letter O with stroke
+    };
+
     private final static char[] pt_PT = {
         '\u00A2', // cent sign
         '\u00C0', // upper case letter A with grave
@@ -406,7 +430,19 @@
         '\u20AC', // Euro currency symbol
     };
 
-/**
+    private final static char[] se_SE = {
+        '\u00A2', // cent sign
+        '\u00C4', // upper case letter A with diaresis
+        '\u00C5', // upper case letter A with ring above
+        '\u00D6', // upper case letter O with diaresis
+        '\u00DF', // lower case letter Sharp S (German)
+        '\u00E4', // lower case letter A with diaresis
+        '\u00E5', // lower case letter A with ring above
+        '\u00F6', // lower case letter O with diaresis
+        '\u20AC', // Euro currency symbol
+    };
+
+    /**
      * Return a predefined set of characters. An integer code is used to select 
      * the set to avoid possible formatting issues with names of character sets
      * specified as strings.
@@ -557,6 +593,45 @@
                     set[index] = fr_FR[i];            
             }
         }
+        else if (language.equals("it"))
+        {
+            if (country.equals("IT"))
+            {
+                set = new char[iso_646_chars.length+it_IT.length];
+                
+                for (int i=0; i<iso_646_chars.length; i++, index++)
+                    set[index] = iso_646_chars[i];
+                
+                for (int i=0; i<it_IT.length; i++, index++)
+                    set[index] = it_IT[i];            
+            }
+        }
+        else if (language.equals("nl"))
+        {
+            if (country.equals("NL"))
+            {
+                set = new char[iso_646_chars.length+nl_NL.length];
+                
+                for (int i=0; i<iso_646_chars.length; i++, index++)
+                    set[index] = iso_646_chars[i];
+                
+                for (int i=0; i<nl_NL.length; i++, index++)
+                    set[index] = nl_NL[i];            
+            }
+        }
+        else if (language.equals("no"))
+        {
+            if (country.equals("N0"))
+            {
+                set = new char[iso_646_chars.length+no_NO.length];
+                
+                for (int i=0; i<iso_646_chars.length; i++, index++)
+                    set[index] = iso_646_chars[i];
+                
+                for (int i=0; i<no_NO.length; i++, index++)
+                    set[index] = no_NO[i];            
+            }
+        }
         else if (language.equals("pt"))
         {
             if (country.equals("PT"))
@@ -570,6 +645,19 @@
                     set[index] = pt_PT[i];            
             }
         }
+        else if (language.equals("se"))
+        {
+            if (country.equals("SE"))
+            {
+                set = new char[iso_646_chars.length+se_SE.length];
+                
+                for (int i=0; i<iso_646_chars.length; i++, index++)
+                    set[index] = iso_646_chars[i];
+                
+                for (int i=0; i<se_SE.length; i++, index++)
+                    set[index] = se_SE[i];            
+            }
+        }
         return set;
     }
 



From smackay at berlios.de  Wed Mar  1 16:43:37 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Wed, 1 Mar 2006 16:43:37 +0100
Subject: [Transform-svn] r98 - in trunk: doc src/com/flagstone/transform src/com/flagstone/transform/test test/suites
Message-ID: <200603011543.k21FhbqF002791@sheep.berlios.de>

Author: smackay
Date: 2006-03-01 16:43:15 +0100 (Wed, 01 Mar 2006)
New Revision: 98

Modified:
   trunk/doc/CHANGES.txt
   trunk/src/com/flagstone/transform/FSButtonEvent.java
   trunk/src/com/flagstone/transform/FSClipEvent.java
   trunk/src/com/flagstone/transform/FSCoder.java
   trunk/src/com/flagstone/transform/FSDefineButton.java
   trunk/src/com/flagstone/transform/FSDefineButton2.java
   trunk/src/com/flagstone/transform/FSDefineFont.java
   trunk/src/com/flagstone/transform/FSDefineFont2.java
   trunk/src/com/flagstone/transform/FSDefineMorphShape.java
   trunk/src/com/flagstone/transform/FSDefineShape.java
   trunk/src/com/flagstone/transform/FSDefineShape2.java
   trunk/src/com/flagstone/transform/FSDefineShape3.java
   trunk/src/com/flagstone/transform/FSDoAction.java
   trunk/src/com/flagstone/transform/FSInitialize.java
   trunk/src/com/flagstone/transform/FSMovie.java
   trunk/src/com/flagstone/transform/FSPlaceObject2.java
   trunk/src/com/flagstone/transform/FSShape.java
   trunk/src/com/flagstone/transform/test/FSMovieTest.java
   trunk/test/suites/FSMovie.xml
Log:
Added methods to FSMovie and variables to FSCoder's context to 
support lazy decoding of actions, shapes and glyphs (shapes in 
fonts).
	  
Added lazy decoding of actions to FSButtonEvent, FSClipEvent, 
FSDoAction,FSDefineButton, FSInitialize.
	  
Added lazy decoding of shapes to FSDefineShape, FSDefineShape2,
FSDefineShape3, FSDefineMorphShape, FSDefineFont and FSDefineFont2.

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/doc/CHANGES.txt	2006-03-01 15:43:15 UTC (rev 98)
@@ -1,3 +1,17 @@
+2006-03-01 - smackay at flagstonesoftware.com
+
+	* FSCharacterTable: Added remaining characters for Finnish and French. Added 
+	  character sets for Norwegian, Swedish, Dutch and Italian.
+	  
+	* Added methods to FSMovie and variables to FSCoder's context to support 
+	  lazy decoding of actions, shapes and glyphs (shapes in fonts).
+	  
+	* Added lazy decoding of actions to FSButtonEvent, FSClipEvent, FSDoAction,
+	  FSDefineButton, FSInitialize.
+	  
+	* Added lazy decoding of shapes to FSDefineShape, FSDefineShape2,
+	  FSDefineShape3, FSDefineMorphShape, FSDefineFont and FSDefineFont2.
+	  
 2006-02-28 - smackay at flagstonesoftware.com
 
     * Removed old doxygen directives from FSMovie, FSSoundConstructor and

Modified: trunk/src/com/flagstone/transform/FSButtonEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonEvent.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSButtonEvent.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -183,6 +183,14 @@
     private ArrayList actions = null;
     private byte[] encodedActions = null;
     
+    FSButtonEvent(FSCoder coder, int length)
+    {
+        if (coder.context[FSCoder.DecodeActions] == 0)
+            encodedActions = new byte[length-2];
+        
+        decode(coder);
+    }
+
     FSButtonEvent(FSCoder coder)
     {
         decode(coder);
@@ -218,13 +226,12 @@
         */
     public void add(FSActionObject anAction)
     {
-       if (actions == null)
-           actions = new ArrayList();
-            
-       if (encodedActions != null)
-           encodedActions = null;
-            
-       actions.add(anAction);
+        if (encodedActions != null)
+        {
+            actions = FSMovie.decodeActions(encodedActions);
+            encodedActions = null;
+        }            
+        actions.add(anAction);
     }
 
     /** Gets the event code that this FSButtonEvent defines actions for.
@@ -242,6 +249,11 @@
         */   
     public ArrayList getActions()
     {
+        if (encodedActions != null)
+        {
+            actions = FSMovie.decodeActions(encodedActions);
+            encodedActions = null;
+        }
         return actions;
     }
 
@@ -406,12 +418,13 @@
     {
         event = coder.readWord(2, false);
         
-        actions = new ArrayList();
-        FSActionObject action = null;
-        
-        while ((action = FSMovie.decodeAction(coder)) != null)
+        if (coder.context[FSCoder.DecodeActions] == 1)
         {
-            actions.add(action);
+            actions = FSMovie.decodeActions(coder);
         }
+        else
+        {
+            coder.readBytes(encodedActions);
+        }
     }
 }

Modified: trunk/src/com/flagstone/transform/FSClipEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSClipEvent.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSClipEvent.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -287,12 +287,11 @@
         */
     public void add(FSActionObject anAction)
     {
-        if (actions == null)
-            actions = new ArrayList();
-            
         if (encodedActions != null)
+        {
+            actions = FSMovie.decodeActions(encodedActions);
             encodedActions = null;
-            
+        }            
         actions.add(anAction);
     }
 
@@ -354,6 +353,11 @@
         */   
     public ArrayList getActions()
     {
+        if (encodedActions != null)
+        {
+            actions = FSMovie.decodeActions(encodedActions);
+            encodedActions = null;
+        }
         return actions;
     }
 
@@ -535,20 +539,23 @@
         int eventSize = (coder.context[FSCoder.Version] > 5) ? 4 : 2;
 
         event = coder.readWord(eventSize, false);
-        coder.readWord(4, false);
+        int length = coder.readWord(4, false);
 
 // Flash 6
-        if ((event & KeyPress) != 0)
+        if ((event & KeyPress) != 0) {
             keyCode = coder.readWord(1, false);
+            length -= 1;
+        }
 // End Flash 6
-
-        actions = new ArrayList();
-        
-        FSActionObject anAction = null;
-
-        while ((anAction = FSMovie.decodeAction(coder)) != null)
+    
+        if (coder.context[FSCoder.DecodeActions] == 1)
         {
-            actions.add(anAction);
+            actions = FSMovie.decodeActions(coder);
         }
+        else
+        {
+            encodedActions = new byte[length];
+            coder.readBytes(encodedActions);
+        }
     }
 }

Modified: trunk/src/com/flagstone/transform/FSCoder.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCoder.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSCoder.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -1061,8 +1061,11 @@
     static final int TypeInError = 15;
     static final int StartOfError = 16;
     static final int ExpectedLength = 17;
+    static final int DecodeActions = 18;
+    static final int DecodeShapes = 19;
+    static final int DecodeGlyphs = 20;
 
-    int[] context = new int[18];
+    int[] context = new int[21];
     
     private void clearContext()
     {

Modified: trunk/src/com/flagstone/transform/FSDefineButton.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSDefineButton.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -197,13 +197,12 @@
         */
     public void add(FSActionObject anAction)
     {
-        if (actions == null)
-           actions = new ArrayList();
-            
-       if (encodedActions != null)
-           encodedActions = null;
-            
-       actions.add(anAction);
+        if (encodedActions != null)
+        {
+            actions = FSMovie.decodeActions(encodedActions);
+            encodedActions = null;
+        }            
+        actions.add(anAction);
     }
 
     /** Gets the array of button records defined for this button.
@@ -216,7 +215,15 @@
 
         @return the array of action objects defined for this button.
         */
-    public ArrayList getActions() { return actions; }
+    public ArrayList getActions() 
+    { 
+        if (encodedActions != null)
+        {
+            actions = FSMovie.decodeActions(encodedActions);
+            encodedActions = null;
+        }
+        return actions;
+    }
 
     /** Sets the array of button records defined for this button.
 
@@ -392,20 +399,24 @@
     {
         super.decode(coder);
         
+        int start = coder.getPointer();
+        
         buttonRecords = new ArrayList();
         
         while (coder.scanWord(1, false) != 0)
             buttonRecords.add(new FSButton(coder));
             
-        coder.readWord(1, false);
-
-        actions = new ArrayList();
-        FSActionObject action = null;
+        coder.readWord(1, false); // character end
         
-        while ((action = FSMovie.decodeAction(coder)) != null) 
+        if (coder.context[FSCoder.DecodeActions] == 1)
         {
-            actions.add(action);
+            actions = FSMovie.decodeActions(coder);
         }
+        else
+        {
+            encodedActions = new byte[(coder.getPointer()-start) >>> 3];
+            coder.readBytes(encodedActions);
+        }
         coder.endObject(name());
     }
 }

Modified: trunk/src/com/flagstone/transform/FSDefineButton2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton2.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSDefineButton2.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -410,6 +410,8 @@
         buttonEvents = new ArrayList();
 
         super.decode(coder);
+        
+        int start = coder.getPointer()-16;
 
         coder.context[FSCoder.TransparentColors] = 1;
 
@@ -429,7 +431,15 @@
                 
             do {
                 actionsOffset = coder.readWord(2, false);
-                buttonEvents.add(new FSButtonEvent(coder));
+                
+                if (actionsOffset != 0)
+                {
+                    buttonEvents.add(new FSButtonEvent(coder, actionsOffset-2));
+                }
+                else
+                {
+                    buttonEvents.add(new FSButtonEvent(coder, length - ((coder.getPointer()-start) >>> 3)));
+                }
             } while (actionsOffset != 0);
 
         }

Modified: trunk/src/com/flagstone/transform/FSDefineFont.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineFont.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSDefineFont.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -156,7 +156,7 @@
         coder.context[FSCoder.NumberOfLineBits] = 0;
 
         length += shapes.size()*2;
-
+        
         for (Iterator shapeIterator = shapes.iterator(); shapeIterator.hasNext();) 
             length += ((FSTransformObject)shapeIterator.next()).length(coder);
 
@@ -206,14 +206,22 @@
         
         super.decode(coder);
         
+        int start = coder.getPointer()-16;
+        
         int shapeCount = coder.scanWord(2, false) / 2;
+        
+        int[] offset = new int[shapeCount];
 
         for (int i=0; i<shapeCount; i++)
-            coder.readWord(2, false);
+            offset[i] = coder.readWord(2, false);
             
-        for (int i=0; i<shapeCount; i++)
-            shapes.add(new FSShape(coder));
+        for (int i=0; i<shapeCount-1; i++)
+            shapes.add(new FSShape(coder, offset[i+1]-offset[i]));
+        
+        int bytesDecoded = (coder.getPointer()-start) >>> 3;
 
+        shapes.add(new FSShape(coder, length-bytesDecoded));
+
         coder.endObject(name());
     }
 }

Modified: trunk/src/com/flagstone/transform/FSDefineFont2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineFont2.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSDefineFont2.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -796,13 +796,15 @@
         name = coder.readString(nameLength);
         glyphCount = coder.readWord(2, false);
 
+        int[] offset = new int[glyphCount+1];
+        
         for (int i=0; i<glyphCount; i++)
-            coder.readWord((containsWideOffsets) ? 4 : 2, false);
+            offset[i] = coder.readWord((containsWideOffsets) ? 4 : 2, false);
 
-        /* codeOffset */ coder.readWord((containsWideOffsets) ? 4 : 2, false);
+        offset[glyphCount] = coder.readWord((containsWideOffsets) ? 4 : 2, false);
 
         for (int i=0; i<glyphCount; i++)
-            shapes.add(new FSShape(coder));
+            shapes.add(new FSShape(coder, offset[i+1]-offset[i]));
 
         for (int i=0; i<glyphCount; i++)
             codes.add(new Integer(coder.readWord((containsWideCodes) ? 2 : 1, false)));

Modified: trunk/src/com/flagstone/transform/FSDefineMorphShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineMorphShape.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSDefineMorphShape.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -497,11 +497,14 @@
 
         coder.context[FSCoder.TransparentColors] = 1;
         coder.context[FSCoder.ArrayCountExtended] = 1;
-
+        
+        int start = coder.getPointer()-16;
+        
         startBounds = new FSBounds(coder);
         endBounds = new FSBounds(coder);
         
-        /* offset */ coder.readWord(4, false);
+        int offset = coder.readWord(4, false);
+        int first = coder.getPointer();
 
         fillStyleCount = coder.readWord(1, false);
 
@@ -549,10 +552,15 @@
 
         for (int i=0; i<lineStyleCount; i++)
             lineStyles.add(new FSMorphSolidLine(coder));
+        
+        int bytesDecoded = (coder.getPointer()-first) >> 3;
 
-        startShape = new FSShape(coder);
-        endShape = new FSShape(coder);
+        startShape = new FSShape(coder, offset-bytesDecoded);
 
+        bytesDecoded = (coder.getPointer()-start) >> 3;
+
+        endShape = new FSShape(coder, length-bytesDecoded);
+
         coder.context[FSCoder.TransparentColors] = 0;
         coder.context[FSCoder.ArrayCountExtended] = 0;
         

Modified: trunk/src/com/flagstone/transform/FSDefineShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSDefineShape.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -356,6 +356,8 @@
         int lineStyleCount = 0;
         
         super.decode(coder);
+        
+        int start = coder.getPointer()-16; // account for identifier
 
         bounds = new FSBounds(coder);
         fillStyleCount = coder.readWord(1, false);
@@ -400,8 +402,10 @@
         
         for (int i=0; i<lineStyleCount; i++)
             lineStyles.add(new FSSolidLine(coder));
+        
+        int bytesDecoded = (coder.getPointer()-start) >> 3;
 
-        shape = new FSShape(coder);
+        shape = new FSShape(coder, length-bytesDecoded);
 
         coder.endObject(name());
     }

Modified: trunk/src/com/flagstone/transform/FSDefineShape2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape2.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSDefineShape2.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -380,6 +380,8 @@
         
         super.decode(coder);
 
+        int start = coder.getPointer()-16; // account for identifier
+
         bounds = new FSBounds(coder);
         fillStyleCount = coder.readWord(1, false);
 
@@ -432,8 +434,10 @@
 
         coder.context[FSCoder.ArrayCountExtended] = 1;
 
-        shape = new FSShape(coder);
+        int bytesDecoded = (coder.getPointer()-start) >> 3;
 
+        shape = new FSShape(coder, length-bytesDecoded);
+
         coder.context[FSCoder.ArrayCountExtended] = 0;
 
         coder.endObject(name());

Modified: trunk/src/com/flagstone/transform/FSDefineShape3.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape3.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSDefineShape3.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -380,6 +380,8 @@
         
         super.decode(coder);
 
+        int start = coder.getPointer()-16; // account for identifier
+
         coder.context[FSCoder.TransparentColors] = 1;
 
         bounds = new FSBounds(coder);
@@ -434,8 +436,10 @@
 
         coder.context[FSCoder.ArrayCountExtended] = 1;
 
-        shape = new FSShape(coder);
+        int bytesDecoded = (coder.getPointer()-start) >> 3;
 
+        shape = new FSShape(coder, length-bytesDecoded);
+
         coder.context[FSCoder.TransparentColors] = 0;
         coder.context[FSCoder.ArrayCountExtended] = 0;
 

Modified: trunk/src/com/flagstone/transform/FSDoAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDoAction.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSDoAction.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -119,12 +119,11 @@
      */
     public void add(FSActionObject anAction)
     {
-        if (actions == null)
-            actions = new ArrayList();
-            
         if (encodedActions != null)
+        {
+            actions = FSMovie.decodeActions(encodedActions);
             encodedActions = null;
-            
+        }            
         actions.add(anAction);
     }
 
@@ -132,8 +131,15 @@
 
         @return the array of action objects.
         */
-    public ArrayList getActions() { return actions; }
-
+    public ArrayList getActions() 
+    { 
+        if (encodedActions != null)
+        {
+            actions = FSMovie.decodeActions(encodedActions);
+            encodedActions = null;
+        }
+        return actions;
+    }
     /** 
      * Set the array of actions that will be executed when the next ShowFrame 
      * tag is executed by the Flash Player.  If the object already contains 
@@ -147,7 +153,7 @@
 
         if (encodedActions != null)
             encodedActions = null;
-       }
+    }
 
     /** 
      * Set the array of encoded actions generated by the classes in the Translate
@@ -283,14 +289,16 @@
     void decode(FSCoder coder)
     {
         super.decode(coder);
-
-        actions = new ArrayList();
-        FSActionObject action = null;
         
-        while ((action = FSMovie.decodeAction(coder)) != null) 
+        if (coder.context[FSCoder.DecodeActions] == 1)
         {
-            actions.add(action);
+            actions = FSMovie.decodeActions(coder);
         }
+        else
+        {
+            encodedActions = new byte[length];
+            coder.readBytes(encodedActions);
+        }
         coder.endObject(name());
     }
 }
\ No newline at end of file

Modified: trunk/src/com/flagstone/transform/FSInitialize.java
===================================================================
--- trunk/src/com/flagstone/transform/FSInitialize.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSInitialize.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -89,6 +89,7 @@
 {
     private int identifier = 0;
     private ArrayList actions = null;
+    private byte[] encodedActions = null;
     
     FSInitialize(FSCoder coder)
     {
@@ -109,6 +110,19 @@
         setIdentifier(anIdentifier);
         setActions(anArray);
     }
+    /**  
+     * Constructs an FSInitialize object that will initialize the movie clip 
+     * with the specified identifier with the encoded actions.
+     *
+     * @param anIdentifier the identifier of the movie clip to initialize
+     * @param bytes an array of encoded action objects.
+     */
+    public FSInitialize(int anIdentifier, byte[] bytes)
+    {
+        super(_Initialize);
+        setIdentifier(anIdentifier);
+        setEncodedActions(bytes);
+    }
 
     /** Returns the identifier of the movie clip that will be initialized. 
 
@@ -135,6 +149,11 @@
         */
     public void add(FSActionObject anAction)
     {
+        if (encodedActions != null)
+        {
+            actions = FSMovie.decodeActions(encodedActions);
+            encodedActions = null;
+        }            
         actions.add(anAction);
     }
 
@@ -142,7 +161,15 @@
 
         @return the array of action objects.
         */
-    public ArrayList getActions() { return actions; }
+    public ArrayList getActions() 
+    { 
+        if (encodedActions != null)
+        {
+            actions = FSMovie.decodeActions(encodedActions);
+            encodedActions = null;
+        }
+        return actions;
+    }
 
     /** Set the array of actions of the movie clip that will be initialized
 
@@ -151,17 +178,41 @@
     public void setActions(ArrayList anArray)
     {
         actions = anArray;
+
+        if (encodedActions != null)
+            encodedActions = null;
     }
 
+    /** 
+     * Set the array of encoded actions generated by the classes in the Translate
+     * framework. If the object already contains an array of actions then they 
+     * will be deleted.
+     * 
+     * @param bytes the array of encoded actions.
+     */
+    public void setEncodedActions(byte[] bytes)
+    {
+        encodedActions = bytes;
+         
+        if (actions != null)
+            actions = null;
+    }
+
     public Object clone()
     {
         FSInitialize anObject = (FSInitialize)super.clone();
         
-         anObject.actions = new ArrayList();
+        if (actions != null)
+        {
+            anObject.actions = new ArrayList();
             
-        for (Iterator i = actions.iterator(); i.hasNext();)
-            anObject.actions.add(((FSActionObject)i.next()).clone());
-
+            for (Iterator i = actions.iterator(); i.hasNext();)
+                anObject.actions.add(((FSActionObject)i.next()).clone());
+        }
+        else
+        {
+            anObject.encodedActions = Transform.clone(encodedActions);
+        }
         return anObject;
     }
 
@@ -174,9 +225,12 @@
             FSInitialize typedObject = (FSInitialize)anObject;
             
             result = identifier == typedObject.identifier;
-            result = result && actions.equals(typedObject.getActions());
+
+            if (actions != null)
+                result = result && actions.equals(typedObject.actions);
+            else
+                result = result && Transform.equals(encodedActions, typedObject.encodedActions);
         }
-
         return result;
     }
 
@@ -188,7 +242,12 @@
         {
             buffer.append(": { ");
             Transform.append(buffer, "identifier", identifier);
-            Transform.append(buffer, "actions", actions, depth);
+            
+            if (actions != null)
+                Transform.append(buffer, "actions", actions, depth);
+            else
+                buffer.append("actions = <data>; ");
+
             buffer.append("}");
         }
     }
@@ -199,13 +258,20 @@
         
         length += 2;
 
-        for (int i=0; i<actions.size(); i++)
+        if (actions != null)
         {
-            FSActionObject currentAction = (FSActionObject)actions.get(i);
+            for (Iterator i = actions.iterator(); i.hasNext();)
+            {
+                FSActionObject currentAction = (FSActionObject)i.next();
             
-            length += currentAction.length(coder);
-            length += (currentAction.getType() > 128) ? 3 : 1;
+                length += currentAction.length(coder);
+                length += (currentAction.getType() > 128) ? 3 : 1;
+            }
         }
+        else
+        {
+            length += encodedActions.length;
+        }
         length += 1;
         
         return length;
@@ -217,28 +283,36 @@
         
         coder.writeWord(identifier, 2);
 
-        for (Iterator i=actions.iterator(); i.hasNext();)
+        if (actions != null)
         {
-            FSActionObject action = (FSActionObject)i.next();
+            for (Iterator i=actions.iterator(); i.hasNext();)
+            {
+                FSActionObject action = (FSActionObject)i.next();
                 
-            int objStart = coder.getPointer();
-            int start = coder.getPointer() + ((action.getType() > 128) ? 24 : 8);
-            int next = start + (action.getLength() << 3);
+                int objStart = coder.getPointer();
+                int length = action.getLength();
+                int start = coder.getPointer() + ((action.getType() > 128) ? 24 : 8);
+                int next = start + (length << 3);
             
-            action.encode(coder);
-            coder.setPointer(next);
+                action.encode(coder);
+                coder.setPointer(next);
             
-            int delta = (coder.getPointer() - next) >> 3;
+                int delta = (coder.getPointer() - next) >> 3;
             
-            if (delta != 0)
-            {
-                coder.context[FSCoder.CodingError] = 1;
-                coder.context[FSCoder.TypeInError] = action.getType();
-                coder.context[FSCoder.StartOfError] = objStart >>> 3;
-                coder.context[FSCoder.ExpectedLength] = (next-objStart)>>>3;
-                coder.context[FSCoder.Delta] = delta;
+                if (delta != 0)
+                {
+                    coder.context[FSCoder.CodingError] = 1;
+                    coder.context[FSCoder.TypeInError] = action.getType();
+                    coder.context[FSCoder.StartOfError] = objStart >>> 3;
+                    coder.context[FSCoder.ExpectedLength] = (next-objStart)>>>3;
+                    coder.context[FSCoder.Delta] = delta;
+                }
             }
         }
+        else
+        {
+            coder.writeBytes(encodedActions);
+        }
         coder.writeWord(0, 1);
 
         coder.endObject(name());
@@ -250,12 +324,15 @@
 
         identifier = coder.readWord(2, false);
 
-        actions = new ArrayList();
-        FSActionObject action = null;
-        
-        while ((action = FSMovie.decodeAction(coder)) != null)
-            actions.add(action);
-
+        if (coder.context[FSCoder.DecodeActions] == 1)
+        {
+            actions = FSMovie.decodeActions(coder);
+        }
+        else
+        {
+            encodedActions = new byte[length-2];
+            coder.readBytes(encodedActions);
+        }
         coder.endObject(name());
     }
 }
\ No newline at end of file

Modified: trunk/src/com/flagstone/transform/FSMovie.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovie.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSMovie.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -621,7 +621,68 @@
 
         return anAction;
     }
+    
+    static ArrayList decodeActions(byte[] encodedActions)
+    {
+        FSCoder coder = new FSCoder(FSCoder.LITTLE_ENDIAN, encodedActions);
+        
+        return decodeActions(coder);
+    }
+    
+    static ArrayList decodeActions(FSCoder coder)
+    {
+        FSActionObject action = null;
+        
+        ArrayList array = new ArrayList();
+    
+        while ((action = FSMovie.decodeAction(coder)) != null) {
+            array.add(action);
+        }
+        return array;
+    }
 
+    static ArrayList decodeShape(byte[] bytes)
+    {
+        FSCoder coder = new FSCoder(FSCoder.LITTLE_ENDIAN, bytes);
+        
+        return decodeShape(coder);
+    }
+    
+    static ArrayList decodeShape(FSCoder coder)
+    {
+        ArrayList objects = new ArrayList();
+        
+        int fillBits = coder.readBits(4, false);
+        int lineBits = coder.readBits(4, false);
+
+        coder.context[FSCoder.NumberOfFillBits] = fillBits;
+        coder.context[FSCoder.NumberOfLineBits] = lineBits;
+
+        while (coder.scanBits(6, false) > 0)
+        {
+            if ((coder.scanBits(6, false) & 0x20) > 0)
+            {
+                if ((coder.scanBits(6, false) & 0x10) > 0)
+                    objects.add(new FSLine(coder));
+                else
+                    objects.add(new FSCurve(coder));
+            }
+            else
+            {
+                objects.add(new FSShapeStyle(coder));
+            }
+        }
+    
+        coder.adjustPointer(6); // Skip over end of shape marker
+        coder.alignToByte();
+
+        return objects;
+    }
+    
+    private boolean decodeActions = true;
+    private boolean decodeShapes = true;
+    private boolean decodeGlyphs = true;
+    
     private int identifier = 0;
     private String encoding = "UTF8";
 
@@ -814,6 +875,30 @@
         this.encoding = encoding;
     }
 
+    public void setDecodeActions(boolean decode)
+    {
+        decodeActions = decode;
+    }
+    public boolean willDecodeActions()
+    {
+        return decodeActions;
+    }
+    public void setDecodeShapes(boolean decode)
+    {
+        decodeShapes = decode;
+    }
+    public boolean willDecodeShapes()
+    {
+        return decodeShapes;
+    }
+    public void setDecodeGlyphs(boolean decode)
+    {
+        decodeGlyphs = decode;
+    }
+    public boolean willDecodeGlyphs()
+    {
+        return decodeGlyphs;
+    }
     /** 
      * Gets the signature identifying that the movie contains Flash. Up to version 5 the string
      * "FWS" identifies that data is encoded using the Flash file format. From Flash version 6 
@@ -1067,6 +1152,9 @@
         frameCount = coder.readWord(2, false);
         
         coder.context[FSCoder.Version] = version;
+        coder.context[FSCoder.DecodeActions] = decodeActions ? 1 : 0;
+        coder.context[FSCoder.DecodeShapes] = decodeShapes ? 1 : 0;
+        coder.context[FSCoder.DecodeGlyphs] = decodeGlyphs ? 1 : 0;
                       
         while ((object = decodeObject(coder)) != null)
         {

Modified: trunk/src/com/flagstone/transform/FSPlaceObject2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPlaceObject2.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSPlaceObject2.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -963,27 +963,12 @@
         if (containsRatio)
             ratio = coder.readWord(2, false) / 65535.0f;
 
-        /*
-         * The order in which name and clipping depth was swapped
-         * in Flash 6.
-         */ 
-//        if (coder.context[FSCoder.Version] > 5)
-//        {
-            if (containsName)
-                name = coder.readString();
+        if (containsName)
+            name = coder.readString();
 
-            if (containsClippingDepth)
-                clippingDepth = coder.readWord(2, false);
-/*        }
-        else
-        {
-            if (containsClippingDepth)
-                clippingDepth = coder.readWord(2, false) - 1;
+        if (containsClippingDepth)
+            clippingDepth = coder.readWord(2, false);
 
-            if (containsName)
-                name = coder.readString();
-        }
-*/
         if (containsClipEvents)
         {
             int eventSize = coder.context[FSCoder.Version] > 5 ? 4 : 2;

Modified: trunk/src/com/flagstone/transform/FSShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSShape.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/FSShape.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -56,7 +56,16 @@
 public final class FSShape extends FSTransformObject
 {
     private ArrayList objects = null;
+    private byte[] encodedObjects = null; 
 
+    FSShape(FSCoder coder, int length)
+    {
+        if (coder.context[FSCoder.DecodeShapes] == 0)
+            encodedObjects = new byte[length];
+        
+        decode(coder);
+    }
+
     FSShape(FSCoder coder)
     {
         decode(coder);
@@ -83,8 +92,13 @@
         */
     public void add(FSTransformObject anObject)
     {
+        if (encodedObjects != null)
+        {
+            objects = FSMovie.decodeShape(encodedObjects);
+            encodedObjects = null;
+        }            
         objects.add(anObject);
-    }
+     }
 
     /** Gets the array of shape records that define the shape.
 
@@ -92,6 +106,11 @@
         */
     public ArrayList getObjects() 
     {
+        if (encodedObjects != null)
+        {
+            objects = FSMovie.decodeShape(encodedObjects);
+            encodedObjects = null;
+        }
         return objects;
     }
 
@@ -153,62 +172,56 @@
 
     int length(FSCoder coder)
     {
-        int numberOfBits = 8; // 4-bits each for number of line and fill bits plus.
+        int numberOfBits = 0;
         
         coder.context[FSCoder.NumberOfShapeBits] = numberOfBits;
-    
-        for (Iterator shapeIterator = objects.iterator(); shapeIterator.hasNext();) 
-            numberOfBits += ((FSTransformObject)shapeIterator.next()).length(coder);
+        
+        if (objects != null)
+        {
+            numberOfBits += 8;
             
-        numberOfBits += 6; // Add size of end of shape
-    
-        numberOfBits += (numberOfBits % 8 > 0) ? 8-(numberOfBits % 8) : 0;
-    
+            for (Iterator shapeIterator = objects.iterator(); shapeIterator.hasNext();) 
+                numberOfBits += ((FSTransformObject)shapeIterator.next()).length(coder);
+                
+            numberOfBits += 6; // Add size of end of shape
+        
+            numberOfBits += (numberOfBits % 8 > 0) ? 8-(numberOfBits % 8) : 0;
+        }
+        else
+        {
+            numberOfBits += encodedObjects.length << 3;
+        }
         return numberOfBits>>3;
     }
 
     void encode(FSCoder coder)
     {
-        // Number of line and fill bits is set by parent.
-        coder.writeBits(coder.context[FSCoder.NumberOfFillBits], 4);
-        coder.writeBits(coder.context[FSCoder.NumberOfLineBits], 4);
+        if (objects != null)
+        {      
+            coder.writeBits(coder.context[FSCoder.NumberOfFillBits], 4);
+            coder.writeBits(coder.context[FSCoder.NumberOfLineBits], 4);
 
-        for (Iterator shapeIterator = objects.iterator(); shapeIterator.hasNext();) 
-            ((FSTransformObject)shapeIterator.next()).encode(coder);
-    
-        coder.writeBits(0, 6); // End of shape
-        coder.alignToByte();
+            for (Iterator shapeIterator = objects.iterator(); shapeIterator.hasNext();) 
+                ((FSTransformObject)shapeIterator.next()).encode(coder);
+        
+            coder.writeBits(0, 6); // End of shape
+            coder.alignToByte();
+        }
+        else
+        {
+            coder.writeBytes(encodedObjects);
+        }
     }
     
     void decode(FSCoder coder)
     {
-        int fillBits = 0;
-        int lineBits = 0;
-
-        objects = new ArrayList();
-        
-        fillBits = coder.readBits(4, false);
-        lineBits = coder.readBits(4, false);
-
-        coder.context[FSCoder.NumberOfFillBits] = fillBits;
-        coder.context[FSCoder.NumberOfLineBits] = lineBits;
-
-        while (coder.scanBits(6, false) > 0)
+        if (coder.context[FSCoder.DecodeShapes] == 1)
         {
-            if ((coder.scanBits(6, false) & 0x20) > 0)
-            {
-                if ((coder.scanBits(6, false) & 0x10) > 0)
-                    objects.add(new FSLine(coder));
-                else
-                    objects.add(new FSCurve(coder));
-            }
-            else
-            {
-                objects.add(new FSShapeStyle(coder));
-            }
+            objects = FSMovie.decodeShape(coder);
         }
-    
-        coder.adjustPointer(6); // Skip over end of shape marker
-        coder.alignToByte();
+        else
+        {
+            coder.readBytes(encodedObjects);            
+        }
     }
 }

Modified: trunk/src/com/flagstone/transform/test/FSMovieTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSMovieTest.java	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/src/com/flagstone/transform/test/FSMovieTest.java	2006-03-01 15:43:15 UTC (rev 98)
@@ -90,6 +90,33 @@
     /**
      * @testng.test dataProvider="files"
      */
+    public void lazyCoding(String file)
+    {
+        try 
+        {
+            File srcFile = new File(sourceDir, file);
+            File destFile = new File(destDir, file);
+            
+            if (destDir.exists() == false)
+                assert destDir.mkdirs() : "Count not create directory: "+destDir;
+            
+            FSMovie movie = new FSMovie();
+            
+            movie.setDecodeActions(false);
+            movie.setDecodeShapes(false);
+            movie.setDecodeGlyphs(false);
+            
+            movie.decodeFromFile(srcFile.getPath());            
+            movie.encodeToFile(destFile.getPath());
+        }
+        catch (Exception e)
+        {
+            assert false : file+": "+e.toString();
+        }
+    }
+    /**
+     * @testng.test dataProvider="files"
+     */
     public void clone(String file)
     {
         try 

Modified: trunk/test/suites/FSMovie.xml
===================================================================
--- trunk/test/suites/FSMovie.xml	2006-03-01 08:31:05 UTC (rev 97)
+++ trunk/test/suites/FSMovie.xml	2006-03-01 15:43:15 UTC (rev 98)
@@ -204,6 +204,57 @@
       		</class>
 		</classes>
   	</test>
+  	
+   <!--
+        Lazy decoding and encoding of actions and shapes in a movie. 
+    -->
+    <test name="Lazy Coding SWF4">
+		<parameter name="srcDir" value="test/data/movies/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf4"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="lazyCoding"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
 
+    <test name="Lazy Coding SWF5">
+		<parameter name="srcDir" value="test/data/movies/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf5"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="lazyCoding"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Lazy Coding SWF6">
+		<parameter name="srcDir" value="test/data/movies/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf6"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="lazyCoding"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Lazy Coding SWF7">
+		<parameter name="srcDir" value="test/data/movies/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf7"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="lazyCoding"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
 </suite>
 



From smackay at berlios.de  Wed Mar  1 17:47:11 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Wed, 1 Mar 2006 17:47:11 +0100
Subject: [Transform-svn] r99 - in trunk: src/com/flagstone/transform test/suites
Message-ID: <200603011647.k21GlBmk011164@sheep.berlios.de>

Author: smackay
Date: 2006-03-01 17:46:57 +0100 (Wed, 01 Mar 2006)
New Revision: 99

Modified:
   trunk/src/com/flagstone/transform/FSButtonEvent.java
   trunk/src/com/flagstone/transform/FSClipEvent.java
   trunk/src/com/flagstone/transform/FSDefineButton.java
   trunk/src/com/flagstone/transform/FSDoAction.java
   trunk/src/com/flagstone/transform/FSExceptionHandler.java
   trunk/src/com/flagstone/transform/FSInitialize.java
   trunk/src/com/flagstone/transform/FSMovie.java
   trunk/test/suites/FSMovie.xml
Log:
Fixed a bug where the zero byte indicating the end of an array 
of actions was being included in the encoded data.

Modified: trunk/src/com/flagstone/transform/FSButtonEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonEvent.java	2006-03-01 15:43:15 UTC (rev 98)
+++ trunk/src/com/flagstone/transform/FSButtonEvent.java	2006-03-01 16:46:57 UTC (rev 99)
@@ -186,7 +186,7 @@
     FSButtonEvent(FSCoder coder, int length)
     {
         if (coder.context[FSCoder.DecodeActions] == 0)
-            encodedActions = new byte[length-2];
+            encodedActions = new byte[length-3];
         
         decode(coder);
     }
@@ -426,5 +426,6 @@
         {
             coder.readBytes(encodedActions);
         }
+        coder.readWord(1, false);
     }
 }

Modified: trunk/src/com/flagstone/transform/FSClipEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSClipEvent.java	2006-03-01 15:43:15 UTC (rev 98)
+++ trunk/src/com/flagstone/transform/FSClipEvent.java	2006-03-01 16:46:57 UTC (rev 99)
@@ -458,7 +458,7 @@
                 length += currentAction.length(coder);
                 length += (currentAction.getType() > 128) ? 3 : 1;
             }
-        }
+         }
         else
         {
             length += encodedActions.length;
@@ -554,8 +554,9 @@
         }
         else
         {
-            encodedActions = new byte[length];
+            encodedActions = new byte[length-1];
             coder.readBytes(encodedActions);
         }
+        coder.readWord(1, false);
     }
 }

Modified: trunk/src/com/flagstone/transform/FSDefineButton.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton.java	2006-03-01 15:43:15 UTC (rev 98)
+++ trunk/src/com/flagstone/transform/FSDefineButton.java	2006-03-01 16:46:57 UTC (rev 99)
@@ -414,9 +414,10 @@
         }
         else
         {
-            encodedActions = new byte[(coder.getPointer()-start) >>> 3];
+            encodedActions = new byte[((coder.getPointer()-start) >>> 3)-1];
             coder.readBytes(encodedActions);
         }
+        coder.readWord(1, false);
         coder.endObject(name());
     }
 }

Modified: trunk/src/com/flagstone/transform/FSDoAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDoAction.java	2006-03-01 15:43:15 UTC (rev 98)
+++ trunk/src/com/flagstone/transform/FSDoAction.java	2006-03-01 16:46:57 UTC (rev 99)
@@ -238,12 +238,12 @@
                 length += currentAction.length(coder);
                 length += (currentAction.getType() > 128) ? 3 : 1;
             }
+            length += 1;
         }
         else
         {
             length += encodedActions.length;
         }
-        length += 1;
         
         return length;
     }
@@ -276,12 +276,12 @@
                 }
                 coder.setPointer(next);
             }
+            coder.writeWord(0, 1);
         }
         else
         {
             coder.writeBytes(encodedActions);
         }
-        coder.writeWord(0, 1);
 
         coder.endObject(name());
     }

Modified: trunk/src/com/flagstone/transform/FSExceptionHandler.java
===================================================================
--- trunk/src/com/flagstone/transform/FSExceptionHandler.java	2006-03-01 15:43:15 UTC (rev 98)
+++ trunk/src/com/flagstone/transform/FSExceptionHandler.java	2006-03-01 16:46:57 UTC (rev 99)
@@ -559,6 +559,11 @@
                 tryLength -= anAction.getLength() + ((anAction.getType() >= 128) ? 3 : 1);
                 tryActions.add(anAction);
             }
+            else
+            {
+                coder.adjustPointer(8);
+                tryLength =- 1;
+            }
         }
         if (containsCatch)
         {
@@ -571,6 +576,11 @@
                     catchLength -= anAction.getLength() + ((anAction.getType() >= 128) ? 3 : 1);
                     catchActions.add(anAction);
                 }
+                else
+                {
+                    coder.adjustPointer(8);
+                    tryLength =- 1;
+                }
             }
         }
         if (containsFinal)
@@ -584,6 +594,11 @@
                     finalLength -= anAction.getLength() + ((anAction.getType() >= 128) ? 3 : 1);
                     finalActions.add(anAction);
                 }
+                else
+                {
+                    coder.adjustPointer(8);
+                    tryLength =- 1;
+                }
             }
         }
 

Modified: trunk/src/com/flagstone/transform/FSInitialize.java
===================================================================
--- trunk/src/com/flagstone/transform/FSInitialize.java	2006-03-01 15:43:15 UTC (rev 98)
+++ trunk/src/com/flagstone/transform/FSInitialize.java	2006-03-01 16:46:57 UTC (rev 99)
@@ -330,9 +330,10 @@
         }
         else
         {
-            encodedActions = new byte[length-2];
+            encodedActions = new byte[length-3];
             coder.readBytes(encodedActions);
         }
+        coder.readWord(1, false);
         coder.endObject(name());
     }
 }
\ No newline at end of file

Modified: trunk/src/com/flagstone/transform/FSMovie.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovie.java	2006-03-01 15:43:15 UTC (rev 98)
+++ trunk/src/com/flagstone/transform/FSMovie.java	2006-03-01 16:46:57 UTC (rev 99)
@@ -426,10 +426,6 @@
     
         if (type == 0)
         {
-            /*
-             * Skip over the End object so it does not generate an event.
-             */ 
-            coder.setPointer(next);
             return anAction;
         }
         

Modified: trunk/test/suites/FSMovie.xml
===================================================================
--- trunk/test/suites/FSMovie.xml	2006-03-01 15:43:15 UTC (rev 98)
+++ trunk/test/suites/FSMovie.xml	2006-03-01 16:46:57 UTC (rev 99)
@@ -2,64 +2,65 @@
   
 <suite name="FSMovie">
 	
-    <!--
-        Decode then encode a movie. 
+  	
+   <!--
+        Lazy decoding and encoding of actions and shapes in a movie. 
     -->
-    <test name="Encode SWF4">
+    <test name="Lazy Coding SWF4">
 		<parameter name="srcDir" value="test/data/movies/swf4"/>
-		<parameter name="dstDir" value="test/results/FSMovie/encode/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf4"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="encode"/>
+      				<include name="lazyCoding"/>
       			</methods>
       		</class>
 		</classes>
   	</test>
 
-    <test name="Encode SWF5">
+    <test name="Lazy Coding SWF5">
 		<parameter name="srcDir" value="test/data/movies/swf5"/>
-		<parameter name="dstDir" value="test/results/FSMovie/encode/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf5"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="encode"/>
+      				<include name="lazyCoding"/>
       			</methods>
       		</class>
 		</classes>
   	</test>
 
-    <test name="Encode SWF6">
+    <test name="Lazy Coding SWF6">
 		<parameter name="srcDir" value="test/data/movies/swf6"/>
-		<parameter name="dstDir" value="test/results/FSMovie/encode/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf6"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="encode"/>
+      				<include name="lazyCoding"/>
       			</methods>
       		</class>
 		</classes>
   	</test>
 
-    <test name="Encode SWF7">
+    <test name="Lazy Coding SWF7">
 		<parameter name="srcDir" value="test/data/movies/swf7"/>
-		<parameter name="dstDir" value="test/results/FSMovie/encode/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf7"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="encode"/>
+      				<include name="lazyCoding"/>
       			</methods>
       		</class>
 		</classes>
   	</test>
 
     <!--
-        Convert the results from the encode test to text to compare against
+        Convert the results from the lazy coding test to text to compare against
         the reference files. 
     -->
     <test name="Encode ToText SWF4">
-		<parameter name="srcDir" value="test/results/FSMovie/encode/swf4"/>
-		<parameter name="dstDir" value="test/results/FSMovie/encode/swf4"/>
+		<parameter name="srcDir" value="test/results/FSMovie/lazyCoding/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf4"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -70,8 +71,8 @@
   	</test>
 
     <test name="Encode ToText SWF5">
-		<parameter name="srcDir" value="test/results/FSMovie/encode/swf5"/>
-		<parameter name="dstDir" value="test/results/FSMovie/encode/swf5"/>
+		<parameter name="srcDir" value="test/results/FSMovie/lazyCoding/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf5"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -82,8 +83,8 @@
   	</test>
 
     <test name="Encode ToText SWF6">
-		<parameter name="srcDir" value="test/results/FSMovie/encode/swf6"/>
-		<parameter name="dstDir" value="test/results/FSMovie/encode/swf6"/>
+		<parameter name="srcDir" value="test/results/FSMovie/lazyCoding/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf6"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -94,8 +95,8 @@
   	</test>
 
     <test name="Encode ToText SWF7">
-		<parameter name="srcDir" value="test/results/FSMovie/encode/swf7"/>
-		<parameter name="dstDir" value="test/results/FSMovie/encode/swf7"/>
+		<parameter name="srcDir" value="test/results/FSMovie/lazyCoding/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf7"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -105,156 +106,5 @@
 		</classes>
   	</test>
 
-    <!--
-        Decode, clone then encode a movie. 
-    -->
-    <test name="Clone SWF4">
-		<parameter name="srcDir" value="test/data/movies/swf4"/>
-		<parameter name="dstDir" value="test/results/FSMovie/clone/swf4"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="clone"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Clone SWF5">
-		<parameter name="srcDir" value="test/data/movies/swf5"/>
-		<parameter name="dstDir" value="test/results/FSMovie/clone/swf5"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="clone"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Clone SWF6">
-		<parameter name="srcDir" value="test/data/movies/swf6"/>
-		<parameter name="dstDir" value="test/results/FSMovie/clone/swf6"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="clone"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Clone SWF7">
-		<parameter name="srcDir" value="test/data/movies/swf7"/>
-		<parameter name="dstDir" value="test/results/FSMovie/clone/swf7"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="clone"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-
-    <test name="Clone ToText SWF4">
-		<parameter name="srcDir" value="test/results/FSMovie/clone/swf4"/>
-		<parameter name="dstDir" value="test/results/FSMovie/clone/swf4"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="toText"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Clone ToText SWF5">
-		<parameter name="srcDir" value="test/results/FSMovie/clone/swf5"/>
-		<parameter name="dstDir" value="test/results/FSMovie/clone/swf5"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="toText"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Clone ToText SWF6">
-		<parameter name="srcDir" value="test/results/FSMovie/clone/swf6"/>
-		<parameter name="dstDir" value="test/results/FSMovie/clone/swf6"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="toText"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Clone ToText SWF7">
-		<parameter name="srcDir" value="test/results/FSMovie/clone/swf7"/>
-		<parameter name="dstDir" value="test/results/FSMovie/clone/swf7"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="toText"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-  	
-   <!--
-        Lazy decoding and encoding of actions and shapes in a movie. 
-    -->
-    <test name="Lazy Coding SWF4">
-		<parameter name="srcDir" value="test/data/movies/swf4"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf4"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="lazyCoding"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Lazy Coding SWF5">
-		<parameter name="srcDir" value="test/data/movies/swf5"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf5"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="lazyCoding"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Lazy Coding SWF6">
-		<parameter name="srcDir" value="test/data/movies/swf6"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf6"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="lazyCoding"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Lazy Coding SWF7">
-		<parameter name="srcDir" value="test/data/movies/swf7"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf7"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="lazyCoding"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
 </suite>
 



From smackay at berlios.de  Thu Mar  2 10:38:46 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Thu, 2 Mar 2006 10:38:46 +0100
Subject: [Transform-svn] r100 - trunk/src/com/flagstone/transform
Message-ID: <200603020938.k229ckHb030413@sheep.berlios.de>

Author: smackay
Date: 2006-03-02 10:38:37 +0100 (Thu, 02 Mar 2006)
New Revision: 100

Modified:
   trunk/src/com/flagstone/transform/FSDoAction.java
Log:
Finally fixed decoding bug, sigh.

Modified: trunk/src/com/flagstone/transform/FSDoAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDoAction.java	2006-03-01 16:46:57 UTC (rev 99)
+++ trunk/src/com/flagstone/transform/FSDoAction.java	2006-03-02 09:38:37 UTC (rev 100)
@@ -238,13 +238,12 @@
                 length += currentAction.length(coder);
                 length += (currentAction.getType() > 128) ? 3 : 1;
             }
-            length += 1;
         }
         else
         {
             length += encodedActions.length;
         }
-        
+        length += 1;
         return length;
     }
     
@@ -276,13 +275,12 @@
                 }
                 coder.setPointer(next);
             }
-            coder.writeWord(0, 1);
         }
         else
         {
             coder.writeBytes(encodedActions);
         }
-
+        coder.writeWord(0, 1);
         coder.endObject(name());
     }
     
@@ -296,9 +294,10 @@
         }
         else
         {
-            encodedActions = new byte[length];
+            encodedActions = new byte[length-1];
             coder.readBytes(encodedActions);
         }
+        coder.readWord(1, false);
         coder.endObject(name());
     }
 }
\ No newline at end of file



From smackay at berlios.de  Thu Mar  2 13:00:43 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Thu, 2 Mar 2006 13:00:43 +0100
Subject: [Transform-svn] r101 - trunk/src/com/flagstone/transform/test
Message-ID: <200603021200.k22C0hWt026998@sheep.berlios.de>

Author: smackay
Date: 2006-03-02 13:00:38 +0100 (Thu, 02 Mar 2006)
New Revision: 101

Modified:
   trunk/src/com/flagstone/transform/test/FSMovieTest.java
Log:
Added test for lazy decoding.

Modified: trunk/src/com/flagstone/transform/test/FSMovieTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSMovieTest.java	2006-03-02 09:38:37 UTC (rev 100)
+++ trunk/src/com/flagstone/transform/test/FSMovieTest.java	2006-03-02 12:00:38 UTC (rev 101)
@@ -38,6 +38,7 @@
 {
     private File sourceDir = null;
     private File destDir = null;
+    
     private String extension = ".swf";
     
     public FSMovieTest()
@@ -80,6 +81,7 @@
                 assert destDir.mkdirs() : "Count not create directory: "+destDir;
             
             FSMovie movie = new FSMovie(srcFile.getPath());
+
             movie.encodeToFile(destFile.getPath());
         }
         catch (Exception e)
@@ -90,11 +92,36 @@
     /**
      * @testng.test dataProvider="files"
      */
-    public void lazyCoding(String file)
+    public void lazyDecoding(String file)
     {
         try 
         {
             File srcFile = new File(sourceDir, file);
+            
+            if (destDir.exists() == false)
+                assert destDir.mkdirs() : "Count not create directory: "+destDir;
+            
+            FSMovie movie = new FSMovie();
+            
+            movie.setDecodeActions(false);
+            movie.setDecodeShapes(false);
+            movie.setDecodeGlyphs(false);
+            
+            movie.decodeFromFile(srcFile.getPath());            
+        }
+        catch (Exception e)
+        {
+            assert false : file+": "+e.toString();
+        }
+    }
+    /**
+     * @testng.test dataProvider="files"
+     */
+    public void lazyEncoding(String file)
+    {
+        try 
+        {
+            File srcFile = new File(sourceDir, file);
             File destFile = new File(destDir, file);
             
             if (destDir.exists() == false)
@@ -107,6 +134,7 @@
             movie.setDecodeGlyphs(false);
             
             movie.decodeFromFile(srcFile.getPath());            
+ 
             movie.encodeToFile(destFile.getPath());
         }
         catch (Exception e)
@@ -153,7 +181,6 @@
             new TextDump(new String[] {
                             "--fileIn", srcFile.getPath(), 
                             "--fileOut", dstFile.getPath()});
-
         }
         catch (Throwable e)
         {



From smackay at berlios.de  Thu Mar  2 13:01:02 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Thu, 2 Mar 2006 13:01:02 +0100
Subject: [Transform-svn] r102 - trunk/test/suites
Message-ID: <200603021201.k22C12TF027019@sheep.berlios.de>

Author: smackay
Date: 2006-03-02 13:01:00 +0100 (Thu, 02 Mar 2006)
New Revision: 102

Modified:
   trunk/test/suites/FSMovie.xml
Log:
Added test for lazy decoding.

Modified: trunk/test/suites/FSMovie.xml
===================================================================
--- trunk/test/suites/FSMovie.xml	2006-03-02 12:00:38 UTC (rev 101)
+++ trunk/test/suites/FSMovie.xml	2006-03-02 12:01:00 UTC (rev 102)
@@ -1,66 +1,319 @@
 <!DOCTYPE suite SYSTEM "http://beust.com/testng/testng-1.0.dtd" >
   
 <suite name="FSMovie">
-	
+ 	
+    <!--
+        Decode then encode a movie. 
+    -->
+    <test name="Encode SWF4">
+		<parameter name="srcDir" value="test/data/movies/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/encode/swf4"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="encode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode SWF5">
+		<parameter name="srcDir" value="test/data/movies/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/encode/swf5"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="encode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode SWF6">
+		<parameter name="srcDir" value="test/data/movies/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/encode/swf6"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="encode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode SWF7">
+		<parameter name="srcDir" value="test/data/movies/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/encode/swf7"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="encode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <!--
+        Convert the results from the encode test to text to compare against
+        the reference files. 
+    -->
+    <test name="Encode ToText SWF4">
+		<parameter name="srcDir" value="test/results/FSMovie/encode/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/encode/swf4"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="toText"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode ToText SWF5">
+		<parameter name="srcDir" value="test/results/FSMovie/encode/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/encode/swf5"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="toText"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode ToText SWF6">
+		<parameter name="srcDir" value="test/results/FSMovie/encode/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/encode/swf6"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="toText"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode ToText SWF7">
+		<parameter name="srcDir" value="test/results/FSMovie/encode/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/encode/swf7"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="toText"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <!--
+        Decode, clone then encode a movie. 
+    -->
+    <test name="Clone SWF4">
+		<parameter name="srcDir" value="test/data/movies/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/clone/swf4"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="clone"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Clone SWF5">
+		<parameter name="srcDir" value="test/data/movies/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/clone/swf5"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="clone"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Clone SWF6">
+		<parameter name="srcDir" value="test/data/movies/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/clone/swf6"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="clone"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Clone SWF7">
+		<parameter name="srcDir" value="test/data/movies/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/clone/swf7"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="clone"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+
+    <test name="Clone ToText SWF4">
+		<parameter name="srcDir" value="test/results/FSMovie/clone/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/clone/swf4"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="toText"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Clone ToText SWF5">
+		<parameter name="srcDir" value="test/results/FSMovie/clone/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/clone/swf5"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="toText"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Clone ToText SWF6">
+		<parameter name="srcDir" value="test/results/FSMovie/clone/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/clone/swf6"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="toText"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Clone ToText SWF7">
+		<parameter name="srcDir" value="test/results/FSMovie/clone/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/clone/swf7"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="toText"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
   	
+    <!--
+        Lazy decoding of actions and shapes in a movie. 
+    -->
+    <test name="Lazy Decoding SWF4">
+		<parameter name="srcDir" value="test/data/movies/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyDecoding/swf4"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="lazyDecoding"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Lazy Decoding SWF5">
+		<parameter name="srcDir" value="test/data/movies/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyDecoding/swf5"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="lazyDecoding"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Lazy Decoding SWF6">
+		<parameter name="srcDir" value="test/data/movies/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyDecoding/swf6"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="lazyDecoding"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Lazy Decoding SWF7">
+		<parameter name="srcDir" value="test/data/movies/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyDecoding/swf7"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="lazyDecoding"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
    <!--
-        Lazy decoding and encoding of actions and shapes in a movie. 
+        Lazy encoding of actions and shapes in a movie. 
     -->
-    <test name="Lazy Coding SWF4">
+    <test name="Lazy Encoding SWF4">
 		<parameter name="srcDir" value="test/data/movies/swf4"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf4"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="lazyCoding"/>
+      				<include name="lazyEncoding"/>
       			</methods>
       		</class>
 		</classes>
   	</test>
 
-    <test name="Lazy Coding SWF5">
+    <test name="Lazy Encoding SWF5">
 		<parameter name="srcDir" value="test/data/movies/swf5"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf5"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="lazyCoding"/>
+      				<include name="lazyEncoding"/>
       			</methods>
       		</class>
 		</classes>
   	</test>
 
-    <test name="Lazy Coding SWF6">
+    <test name="Lazy Encoding SWF6">
 		<parameter name="srcDir" value="test/data/movies/swf6"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf6"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="lazyCoding"/>
+      				<include name="lazyEncoding"/>
       			</methods>
       		</class>
 		</classes>
   	</test>
 
-    <test name="Lazy Coding SWF7">
+    <test name="Lazy Encoding SWF7">
 		<parameter name="srcDir" value="test/data/movies/swf7"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf7"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="lazyCoding"/>
+      				<include name="lazyEncoding"/>
       			</methods>
       		</class>
 		</classes>
   	</test>
 
     <!--
-        Convert the results from the lazy coding test to text to compare against
+        Convert the results from the lazy encoding test to text to compare against
         the reference files. 
     -->
     <test name="Encode ToText SWF4">
-		<parameter name="srcDir" value="test/results/FSMovie/lazyCoding/swf4"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf4"/>
+		<parameter name="srcDir" value="test/results/FSMovie/lazyEncoding/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf4"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -71,8 +324,8 @@
   	</test>
 
     <test name="Encode ToText SWF5">
-		<parameter name="srcDir" value="test/results/FSMovie/lazyCoding/swf5"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf5"/>
+		<parameter name="srcDir" value="test/results/FSMovie/lazyEncoding/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf5"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -83,8 +336,8 @@
   	</test>
 
     <test name="Encode ToText SWF6">
-		<parameter name="srcDir" value="test/results/FSMovie/lazyCoding/swf6"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf6"/>
+		<parameter name="srcDir" value="test/results/FSMovie/lazyEncoding/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf6"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -95,8 +348,8 @@
   	</test>
 
     <test name="Encode ToText SWF7">
-		<parameter name="srcDir" value="test/results/FSMovie/lazyCoding/swf7"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyCoding/swf7"/>
+		<parameter name="srcDir" value="test/results/FSMovie/lazyEncoding/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf7"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>



From smackay at berlios.de  Fri Mar  3 10:54:28 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 3 Mar 2006 10:54:28 +0100
Subject: [Transform-svn] r103 - in trunk: doc src/com/flagstone/transform/test test test/benchmarks test/suites
Message-ID: <200603030954.k239sSCm015503@sheep.berlios.de>

Author: smackay
Date: 2006-03-03 10:54:21 +0100 (Fri, 03 Mar 2006)
New Revision: 103

Added:
   trunk/test/benchmarks/
   trunk/test/benchmarks/FSMovie.xml
Modified:
   trunk/doc/CHANGES.txt
   trunk/src/com/flagstone/transform/test/FSMovieTest.java
   trunk/test/suites/FSMovie.xml
Log:
Updated FSMovieText.java and added a new test folder, benchmarks, 
for holding TestNG files to run performance test on Transform 
classes.

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-02 12:01:00 UTC (rev 102)
+++ trunk/doc/CHANGES.txt	2006-03-03 09:54:21 UTC (rev 103)
@@ -1,3 +1,8 @@
+2006-03-03 - smackay at flagstonesoftware.com
+
+    * Updated FSMovieText.java and added a new test folder, benchmarks, for 
+      holding TestNG files to run performance test on Transform classes.
+
 2006-03-01 - smackay at flagstonesoftware.com
 
 	* FSCharacterTable: Added remaining characters for Finnish and French. Added 

Modified: trunk/src/com/flagstone/transform/test/FSMovieTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSMovieTest.java	2006-03-02 12:01:00 UTC (rev 102)
+++ trunk/src/com/flagstone/transform/test/FSMovieTest.java	2006-03-03 09:54:21 UTC (rev 103)
@@ -36,9 +36,15 @@
 
 public class FSMovieTest
 {
+    private static String newline = System.getProperty("line.separator");
+    private static int iterations = 100;
+    
     private File sourceDir = null;
     private File destDir = null;
+    private File log = null;
     
+    private StringBuffer buffer = null;
+    
     private String extension = ".swf";
     
     public FSMovieTest()
@@ -46,14 +52,42 @@
     }
     /**
      * @testng.configuration beforeTest = "true" alwaysRun = "true" 
-     * @testng.parameters value = "srcDir dstDir"
+     * @testng.parameters value = "srcDir dstDir logFile"
      */
-    public void configure(String srcDir, String dstDir)
+    public void configure(String srcDir, String dstDir, String logFile)
     {
         sourceDir = new File(srcDir);
         destDir = new File(dstDir);
+        
+        if (destDir.getPath().length() > 0 && destDir.exists() == false)
+            assert destDir.mkdirs() : "Count not create directory: "+destDir;
+            
+        if (logFile.length() > 0)
+        {
+            log = new File(logFile);
+            buffer = new StringBuffer();
+        }
     }
     /**
+     * @testng.configuration afterTest = "true" alwaysRun = "true" 
+     */
+    public void finish()
+    {
+        if (buffer != null)
+        {
+            try
+            {
+                FileOutputStream stream = new FileOutputStream(log);
+                stream.write(buffer.toString().getBytes());
+                stream.close();
+            }
+            catch (IOException e)
+            {
+                assert false : "Cannot write log file: "+log.getPath();
+            }
+        }
+    }
+    /**
      * @testng.test dataProvider="files"
      */
     public void decode(String file)
@@ -77,9 +111,6 @@
             File srcFile = new File(sourceDir, file);
             File destFile = new File(destDir, file);
             
-            if (destDir.exists() == false)
-                assert destDir.mkdirs() : "Count not create directory: "+destDir;
-            
             FSMovie movie = new FSMovie(srcFile.getPath());
 
             movie.encodeToFile(destFile.getPath());
@@ -98,9 +129,6 @@
         {
             File srcFile = new File(sourceDir, file);
             
-            if (destDir.exists() == false)
-                assert destDir.mkdirs() : "Count not create directory: "+destDir;
-            
             FSMovie movie = new FSMovie();
             
             movie.setDecodeActions(false);
@@ -124,9 +152,6 @@
             File srcFile = new File(sourceDir, file);
             File destFile = new File(destDir, file);
             
-            if (destDir.exists() == false)
-                assert destDir.mkdirs() : "Count not create directory: "+destDir;
-            
             FSMovie movie = new FSMovie();
             
             movie.setDecodeActions(false);
@@ -152,9 +177,6 @@
             File srcFile = new File(sourceDir, file);
             File destFile = new File(destDir, file);
             
-            if (destDir.exists() == false)
-                assert destDir.mkdirs() : "Count not create directory: "+destDir;
-            
             FSMovie movie = new FSMovie(srcFile.getPath());
             
             FSMovie clone = (FSMovie)movie.clone();
@@ -175,9 +197,6 @@
             File srcFile = new File(sourceDir, file);
             File dstFile = new File(destDir, file.substring(0, file.length()-3)+"txt");
             
-            if (destDir.exists() == false)
-                assert destDir.mkdirs() : "Count not create directory: "+destDir;
-            
             new TextDump(new String[] {
                             "--fileIn", srcFile.getPath(), 
                             "--fileOut", dstFile.getPath()});
@@ -187,7 +206,82 @@
             assert false : file+": "+e.toString();
         }
     }
+
+    /*
+     * Methods for benchmarking
+     */
+    
     /**
+     * @testng.test dataProvider="files"
+     */
+    public void benchmarkDecode(String file)
+    {
+        try 
+        {
+            File swfFile = new File(sourceDir, file);
+            
+            byte[] bytes = new byte[(int)swfFile.length()];
+            
+            FileInputStream stream = new FileInputStream(swfFile);            
+            stream.read(bytes);
+            stream.close();
+            
+            System.gc();
+            
+            double before = (double)System.currentTimeMillis();
+            
+            for (int i=0; i<iterations; i++)
+            {
+                new FSMovie().decodeFromData(bytes);
+            }
+            
+            double duration = (System.currentTimeMillis() - before)/(double)iterations;
+            
+            buffer.append(file).append('\t').append(duration).append(newline);
+        }
+        catch (Exception e)
+        {
+            assert false : file+": "+e.toString();
+        }
+    }
+    /**
+     * @testng.test dataProvider="files"
+     */
+    public void benchmarkLazyDecode(String file)
+    {
+        try 
+        {
+            File swfFile = new File(sourceDir, file);
+            
+            byte[] bytes = new byte[(int)swfFile.length()];
+            
+            FileInputStream stream = new FileInputStream(swfFile);            
+            stream.read(bytes);
+            stream.close();
+            
+            System.gc();
+            
+            double before = (double)System.currentTimeMillis();
+            
+            for (int i=0; i<iterations; i++)
+            {
+                FSMovie movie = new FSMovie();
+                movie.setDecodeActions(false);
+                movie.setDecodeShapes(false);
+                movie.setDecodeGlyphs(false);
+                movie.decodeFromData(bytes);
+            }
+            
+            double duration = (System.currentTimeMillis() - before)/(double)iterations;
+            
+            buffer.append(file).append('\t').append(duration).append(newline);
+        }
+        catch (Exception e)
+        {
+            assert false : file+": "+e.toString();
+        }
+    }
+    /**
      * @testng.data-provider name="files"
      */
     public Object[][] findFiles()

Added: trunk/test/benchmarks/FSMovie.xml
===================================================================
--- trunk/test/benchmarks/FSMovie.xml	2006-03-02 12:01:00 UTC (rev 102)
+++ trunk/test/benchmarks/FSMovie.xml	2006-03-03 09:54:21 UTC (rev 103)
@@ -0,0 +1,118 @@
+<!DOCTYPE suite SYSTEM "http://beust.com/testng/testng-1.0.dtd" >
+  
+<suite name="FSMovie Benchmarks">
+ 	
+    <!--
+        Movie Decoding. 
+    -->
+
+    <test name="Decode SWF4">
+		<parameter name="srcDir" value="test/data/movies/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/decode-swf4.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Decode SWF5">
+		<parameter name="srcDir" value="test/data/movies/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/decode-swf5.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Decode SWF6">
+		<parameter name="srcDir" value="test/data/movies/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/decode-swf6.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Decode SWF7">
+		<parameter name="srcDir" value="test/data/movies/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/decode-swf7.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+  	
+    <!--
+        Lazy Movie Decoding. 
+    -->
+
+    <test name="Decode SWF4">
+		<parameter name="srcDir" value="test/data/movies/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-decode-swf4.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkLazyDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Decode SWF5">
+		<parameter name="srcDir" value="test/data/movies/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-decode-swf5.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkLazyDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Decode SWF6">
+		<parameter name="srcDir" value="test/data/movies/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-decode-swf6.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkLazyDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Decode SWF7">
+		<parameter name="srcDir" value="test/data/movies/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-decode-swf7.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkLazyDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+  	
+</suite>
+

Modified: trunk/test/suites/FSMovie.xml
===================================================================
--- trunk/test/suites/FSMovie.xml	2006-03-02 12:01:00 UTC (rev 102)
+++ trunk/test/suites/FSMovie.xml	2006-03-03 09:54:21 UTC (rev 103)
@@ -2,7 +2,60 @@
   
 <suite name="FSMovie">
  	
+    <parameter name="logFile" value=""/>
+
     <!--
+        Decode a movie. 
+    -->
+    <test name="Encode SWF4">
+		<parameter name="srcDir" value="test/data/movies/swf4"/>
+		<parameter name="dstDir" value=""/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="decode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode SWF5">
+		<parameter name="srcDir" value="test/data/movies/swf5"/>
+		<parameter name="dstDir" value=""/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="decode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode SWF6">
+		<parameter name="srcDir" value="test/data/movies/swf6"/>
+		<parameter name="dstDir" value=""/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="decode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode SWF7">
+		<parameter name="srcDir" value="test/data/movies/swf7"/>
+		<parameter name="dstDir" value=""/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="decode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <!--
         Decode then encode a movie. 
     -->
     <test name="Encode SWF4">
@@ -210,7 +263,7 @@
     -->
     <test name="Lazy Decoding SWF4">
 		<parameter name="srcDir" value="test/data/movies/swf4"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyDecoding/swf4"/>
+		<parameter name="dstDir" value=""/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -222,7 +275,7 @@
 
     <test name="Lazy Decoding SWF5">
 		<parameter name="srcDir" value="test/data/movies/swf5"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyDecoding/swf5"/>
+		<parameter name="dstDir" value=""/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -234,7 +287,7 @@
 
     <test name="Lazy Decoding SWF6">
 		<parameter name="srcDir" value="test/data/movies/swf6"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyDecoding/swf6"/>
+		<parameter name="dstDir" value=""/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -246,7 +299,7 @@
 
     <test name="Lazy Decoding SWF7">
 		<parameter name="srcDir" value="test/data/movies/swf7"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyDecoding/swf7"/>
+		<parameter name="dstDir" value=""/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>



From smackay at berlios.de  Fri Mar  3 19:03:45 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 3 Mar 2006 19:03:45 +0100
Subject: [Transform-svn] r104 - in trunk/src/com/flagstone/transform: . examples test
Message-ID: <200603031803.k23I3jtt007196@sheep.berlios.de>

Author: smackay
Date: 2006-03-03 19:00:33 +0100 (Fri, 03 Mar 2006)
New Revision: 104

Modified:
   trunk/src/com/flagstone/transform/FSAction.java
   trunk/src/com/flagstone/transform/FSActionObject.java
   trunk/src/com/flagstone/transform/FSBitmapFill.java
   trunk/src/com/flagstone/transform/FSBounds.java
   trunk/src/com/flagstone/transform/FSButton.java
   trunk/src/com/flagstone/transform/FSButtonColorTransform.java
   trunk/src/com/flagstone/transform/FSButtonEvent.java
   trunk/src/com/flagstone/transform/FSButtonSound.java
   trunk/src/com/flagstone/transform/FSCall.java
   trunk/src/com/flagstone/transform/FSCharacter.java
   trunk/src/com/flagstone/transform/FSClipEvent.java
   trunk/src/com/flagstone/transform/FSColor.java
   trunk/src/com/flagstone/transform/FSColorTransform.java
   trunk/src/com/flagstone/transform/FSCoordTransform.java
   trunk/src/com/flagstone/transform/FSCurve.java
   trunk/src/com/flagstone/transform/FSDefineButton.java
   trunk/src/com/flagstone/transform/FSDefineButton2.java
   trunk/src/com/flagstone/transform/FSDefineFont.java
   trunk/src/com/flagstone/transform/FSDefineFont2.java
   trunk/src/com/flagstone/transform/FSDefineImage.java
   trunk/src/com/flagstone/transform/FSDefineImage2.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
   trunk/src/com/flagstone/transform/FSDefineMorphShape.java
   trunk/src/com/flagstone/transform/FSDefineMovieClip.java
   trunk/src/com/flagstone/transform/FSDefineObject.java
   trunk/src/com/flagstone/transform/FSDefineShape.java
   trunk/src/com/flagstone/transform/FSDefineShape2.java
   trunk/src/com/flagstone/transform/FSDefineShape3.java
   trunk/src/com/flagstone/transform/FSDefineSound.java
   trunk/src/com/flagstone/transform/FSDefineText.java
   trunk/src/com/flagstone/transform/FSDefineText2.java
   trunk/src/com/flagstone/transform/FSDefineTextField.java
   trunk/src/com/flagstone/transform/FSDefineVideo.java
   trunk/src/com/flagstone/transform/FSDoAction.java
   trunk/src/com/flagstone/transform/FSEnableDebugger.java
   trunk/src/com/flagstone/transform/FSEnableDebugger2.java
   trunk/src/com/flagstone/transform/FSEnvelope.java
   trunk/src/com/flagstone/transform/FSExceptionHandler.java
   trunk/src/com/flagstone/transform/FSExport.java
   trunk/src/com/flagstone/transform/FSFillStyle.java
   trunk/src/com/flagstone/transform/FSFontInfo.java
   trunk/src/com/flagstone/transform/FSFontInfo2.java
   trunk/src/com/flagstone/transform/FSFrameLabel.java
   trunk/src/com/flagstone/transform/FSFree.java
   trunk/src/com/flagstone/transform/FSGetUrl.java
   trunk/src/com/flagstone/transform/FSGetUrl2.java
   trunk/src/com/flagstone/transform/FSGotoFrame.java
   trunk/src/com/flagstone/transform/FSGotoFrame2.java
   trunk/src/com/flagstone/transform/FSGotoLabel.java
   trunk/src/com/flagstone/transform/FSGradient.java
   trunk/src/com/flagstone/transform/FSGradientFill.java
   trunk/src/com/flagstone/transform/FSIf.java
   trunk/src/com/flagstone/transform/FSImport.java
   trunk/src/com/flagstone/transform/FSInitialize.java
   trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java
   trunk/src/com/flagstone/transform/FSJump.java
   trunk/src/com/flagstone/transform/FSKerning.java
   trunk/src/com/flagstone/transform/FSLimitScript.java
   trunk/src/com/flagstone/transform/FSLine.java
   trunk/src/com/flagstone/transform/FSMorphBitmapFill.java
   trunk/src/com/flagstone/transform/FSMorphGradient.java
   trunk/src/com/flagstone/transform/FSMorphGradientFill.java
   trunk/src/com/flagstone/transform/FSMorphSolidFill.java
   trunk/src/com/flagstone/transform/FSMorphSolidLine.java
   trunk/src/com/flagstone/transform/FSMovieObject.java
   trunk/src/com/flagstone/transform/FSNewFunction.java
   trunk/src/com/flagstone/transform/FSNewFunction2.java
   trunk/src/com/flagstone/transform/FSPathsArePostscript.java
   trunk/src/com/flagstone/transform/FSPlaceObject.java
   trunk/src/com/flagstone/transform/FSPlaceObject2.java
   trunk/src/com/flagstone/transform/FSPointer.java
   trunk/src/com/flagstone/transform/FSProperty.java
   trunk/src/com/flagstone/transform/FSProtect.java
   trunk/src/com/flagstone/transform/FSPush.java
   trunk/src/com/flagstone/transform/FSQuicktimeMovie.java
   trunk/src/com/flagstone/transform/FSRegisterCopy.java
   trunk/src/com/flagstone/transform/FSRegisterIndex.java
   trunk/src/com/flagstone/transform/FSRegisterVariable.java
   trunk/src/com/flagstone/transform/FSRemoveObject.java
   trunk/src/com/flagstone/transform/FSRemoveObject2.java
   trunk/src/com/flagstone/transform/FSSerialNumber.java
   trunk/src/com/flagstone/transform/FSSetBackgroundColor.java
   trunk/src/com/flagstone/transform/FSSetTarget.java
   trunk/src/com/flagstone/transform/FSShape.java
   trunk/src/com/flagstone/transform/FSShapeStyle.java
   trunk/src/com/flagstone/transform/FSShowFrame.java
   trunk/src/com/flagstone/transform/FSSolidFill.java
   trunk/src/com/flagstone/transform/FSSolidLine.java
   trunk/src/com/flagstone/transform/FSSound.java
   trunk/src/com/flagstone/transform/FSSoundStreamBlock.java
   trunk/src/com/flagstone/transform/FSSoundStreamHead.java
   trunk/src/com/flagstone/transform/FSSoundStreamHead2.java
   trunk/src/com/flagstone/transform/FSStartSound.java
   trunk/src/com/flagstone/transform/FSTabOrder.java
   trunk/src/com/flagstone/transform/FSTable.java
   trunk/src/com/flagstone/transform/FSTableIndex.java
   trunk/src/com/flagstone/transform/FSText.java
   trunk/src/com/flagstone/transform/FSUnknownAction.java
   trunk/src/com/flagstone/transform/FSUnknownObject.java
   trunk/src/com/flagstone/transform/FSVideoFrame.java
   trunk/src/com/flagstone/transform/FSVoid.java
   trunk/src/com/flagstone/transform/FSWaitForFrame.java
   trunk/src/com/flagstone/transform/FSWaitForFrame2.java
   trunk/src/com/flagstone/transform/FSWith.java
   trunk/src/com/flagstone/transform/examples/FillStyles.java
   trunk/src/com/flagstone/transform/test/FSMovieTest.java
Log:
Made constructors that initialize attributes from an FSCoder public.
These methods will be used for testing. All classes.

Added copy constructors to all classes.


Modified: trunk/src/com/flagstone/transform/FSAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSAction.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSAction.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -1010,22 +1010,37 @@
     /// Factory method for generating an FSAction object representing a Extends action.
     public static FSAction Extends() { return new FSAction(FSAction.Extends); }
     
-    FSAction(FSCoder coder)
+    /**
+     * Construct an FSAction object, initalizing it with values decoded from an
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSAction(FSCoder coder)
     {
         super(0);
         decode(coder);
     }
-
-    /** Constructs a stack-based action with the specified type. 
-
-        @param aType the code used to denote the type of action performed.
-        */
+    /** 
+     * Constructs a stack-based action with the specified type.
+     * 
+     * @param aType the code used to denote the type of action performed.
+     */
     public FSAction(int aType)
     {
         super(aType);
     }
-
     /**
+     * Constructs an FSAction object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSAction object.
+     */
+    public FSAction(FSAction obj)
+    {
+        super(obj);
+    }    
+    /**
      * Returns a string identifying the type of stack-based action that the 
      * object represents.
      * 

Modified: trunk/src/com/flagstone/transform/FSActionObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSActionObject.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSActionObject.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -109,11 +109,16 @@
     protected int size = 0;
     protected int length = 0;
     
-    FSActionObject(int aType)
+    protected FSActionObject(int aType)
     {
         type = aType;
     }
-
+    protected FSActionObject(FSActionObject obj)
+    {
+        type = obj.type;
+        size = obj.size;
+        length = obj.length;
+    }  
     /** Gets the code used that identifies the type of the action when it is encoded. 
 
         @return the code used to denote the type of action performed.

Modified: trunk/src/com/flagstone/transform/FSBitmapFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSBitmapFill.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSBitmapFill.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -116,11 +116,17 @@
     private int identifier = 0;
     private FSCoordTransform transform = new FSCoordTransform(0,0);
     
-    FSBitmapFill(FSCoder coder)
+    /**
+     * Construct an FSBitmapFill object an initialize it with values decoded 
+     * from an encoded FSBitmapFill object.
+     * 
+     * @param coder an FSCoder object containing an FSBitmapFill encoded as 
+     * binary data.
+     */
+    public FSBitmapFill(FSCoder coder)
     {
         decode(coder);
     }
-
     /** 
      * Constructs an FSBitmapFill object, specifying whether the image is tiled
      * or clipped within the shape, the identifier of the object containing the
@@ -143,6 +149,16 @@
         setIdentifier(anIdentifier);
         setTransform(aTransform);
     }
+    /**
+     * Construct an FSBitmapFill object by copying an existing object.
+     * 
+     * @param object an FSBitmapFill object. 
+     */
+    public FSBitmapFill(FSBitmapFill obj)
+    {
+        identifier = obj.identifier;
+        transform = new FSCoordTransform(obj.transform);
+    }   
 
     /** Gets the identifier of the object containing the image to be displayed.
 

Modified: trunk/src/com/flagstone/transform/FSBounds.java
===================================================================
--- trunk/src/com/flagstone/transform/FSBounds.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSBounds.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -107,11 +107,17 @@
     private int maxX = 0;
     private int maxY = 0;
     
-    FSBounds(FSCoder coder)
+    /**
+     * Construct an FSBounds object an initialize it with values decoded from 
+     * a binary encoded FSBounds object.
+     * 
+     * @param coder an FSCoder object containing an FSBounds encoded as binary
+     * data.
+     */
+    public FSBounds(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSBounds object representing a rectangle with the top left corner at (xl,yl) and bottom right corner at (xr,yr).
 
         @param xl x-coordinate of the top left corner.
@@ -126,6 +132,19 @@
         setMaxX(xr);
         setMaxY(yr);
     }
+    /**
+     * Construct an FSBounds object and initialize it with value from another 
+     * FSBounds object.
+     * 
+     * @param obj an FSBounds object.
+     */
+    public FSBounds(FSBounds obj)
+    {
+        minX = obj.minX;
+        maxX = obj.maxX;
+        minY = obj.minY;
+        maxY = obj.maxY;
+    }
 
     /** Gets the x-coordinate of the top left corner of the bounding rectangle.
 

Modified: trunk/src/com/flagstone/transform/FSButton.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButton.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSButton.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -103,11 +103,16 @@
     private FSCoordTransform transform = null;
     private FSColorTransform colorTransform = null;
 
-    FSButton(FSCoder coder)
+    /**
+     * Construct an FSButton object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSButton(FSCoder coder)
     {
         decode(coder);
     }
-
     /**  Constructs an FSButton object without a coordinate or colour transform that will be applied to the shape drawn for the button states. The transforms default to unity transforms which do not change the location of colour of the shape for the button.
 
         @param aState the state of the button when the shape is drawn.
@@ -155,6 +160,23 @@
         setTransform(aTransform);
         setColorTransform(aColorTransform);
     }
+    /**
+     * Constructs an FSButton object by copying values from an existing object.
+     *
+     * @param obj an FSButton object.
+     */
+    public FSButton(FSButton obj)
+    {
+        state = obj.state;
+        identifier = obj.identifier;
+        layer = obj.layer;
+        transform = new FSCoordTransform(obj.transform);
+        
+        if (obj.colorTransform != null)
+            colorTransform = new FSColorTransform(obj.colorTransform);
+        else
+            colorTransform = null;
+    }
 
     /** Get the state(s) of the button when the shape is drawn.
 

Modified: trunk/src/com/flagstone/transform/FSButtonColorTransform.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonColorTransform.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSButtonColorTransform.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -66,7 +66,13 @@
     private int identifier = 0;
     private FSColorTransform colorTransform = null;
 
-    FSButtonColorTransform(FSCoder coder)
+    /**
+     * Construct an FSButtonColorTransform object, initalizing it with values 
+     * decoded from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSButtonColorTransform(FSCoder coder)
     {
         super(_ButtonColorTransform);
         decode(coder);
@@ -83,6 +89,19 @@
         setIdentifier(anIdentifier);
         setColorTransform(aColorTransform);
     }
+    /**
+     * Constructs an FSButtonColorTransform object by copying values from an 
+     * existing object.
+     *
+     * @param obj an FSButtonColorTransform object.
+     */
+    public FSButtonColorTransform(FSButtonColorTransform obj)
+    {
+        super(obj);
+        
+        identifier = obj.identifier;
+        colorTransform = new FSColorTransform(obj.colorTransform);
+    }
 
     /** Gets the identifier of the button that this FSButtonColorTransform object applies to. 
 

Modified: trunk/src/com/flagstone/transform/FSButtonEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonEvent.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSButtonEvent.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -182,7 +182,10 @@
     private int event = 0;
     private ArrayList actions = null;
     private byte[] encodedActions = null;
-    
+   
+    /*
+     * This constructor is used only then lazily decoding actions.
+     */
     FSButtonEvent(FSCoder coder, int length)
     {
         if (coder.context[FSCoder.DecodeActions] == 0)
@@ -190,12 +193,16 @@
         
         decode(coder);
     }
-
-    FSButtonEvent(FSCoder coder)
+    /**
+     * Construct an FSButtonEvent object, initalizing it with values 
+     * decoded from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSButtonEvent(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSButtonEvent object that defines the array of actions that will be executed when a particular event occurs.
 
         @param aNumber the event code.
@@ -206,7 +213,6 @@
         setEvent(aNumber);
         setActions(anArray);
     }
-
     /** 
      * Constructs an FSButtonEvent object that defines the array of actions that 
      * will be executed when a particular event occurs.
@@ -219,7 +225,29 @@
         setEvent(aNumber);
         setEncodedActions(bytes);
     }
+    /**
+     * Constructs an FSButtonEvent object by copying values from an existing object.
+     *
+     * @param obj an FSButtonEvent object.
+     */
+    public FSButtonEvent(FSButtonEvent obj)
+    {
+        event = obj.event;
+        
+        if (obj.actions != null)
+        {
+            actions = new ArrayList();
+            
+            for (Iterator i = obj.actions.iterator(); i.hasNext();)
+                actions.add(((FSActionObject)i.next()).clone());
+        }
+        else
+        {
+            encodedActions = Transform.clone(obj.encodedActions);
+        }
+    }
 
+
     /** Add an action to the end of the actions array.
         
         @param anAction an object derived from the base class FSActionObject.

Modified: trunk/src/com/flagstone/transform/FSButtonSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonSound.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSButtonSound.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -89,12 +89,17 @@
     private int identifier = 0;
     private FSSound[] sound = new FSSound[] {null, null, null, null};
     
-    FSButtonSound(FSCoder coder)
+    /**
+     * Construct an FSButtonSound object, initalizing it with values 
+     * decoded from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSButtonSound(FSCoder coder)
     {
         super(_ButtonSound);
         decode(coder);
     }
-
     /**  Constructs an FSButtonSound object that defines the sound played for a single button event.
 
         @param anIdentifier the identifier of the FSDefineButton or FSDefineButton2 object that defines the button.
@@ -108,6 +113,26 @@
         setIdentifier(anIdentifier);
         setSoundForEvent(eventCode, aSound);
     }
+    /**
+     * Constructs an FSButtonSound object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSButtonSound object.
+     */
+    public FSButtonSound(FSButtonSound obj)
+    {
+        super(obj);
+        
+        identifier = obj.identifier;
+        
+        for (int i=0; i<4; i++)
+        {
+            if (obj.sound[i] != null)
+                sound[i] = new FSSound(obj.sound[i]);
+            else
+                sound[i] = null;
+        }
+    }
 
     /** Gets the identifier of the button that this object applies to.
 

Modified: trunk/src/com/flagstone/transform/FSCall.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCall.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSCall.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -68,12 +68,17 @@
  */  
 public final class FSCall extends FSActionObject
 {
-    FSCall(FSCoder coder)
+    /**
+     * Construct an FSCall object, initalizing it with values decoded from an 
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSCall(FSCoder coder)
     {
         super(_Call);
         decode(coder);
     }
-
     /** 
      * Constructs an FSCall object. 
      */
@@ -81,6 +86,15 @@
     {
         super(_Call);
     }
+    /**
+     * Constructs an FSCall object by copying values from an existing object.
+     *
+     * @param obj an FSCall object.
+     */
+    public FSCall(FSCall obj)
+    {
+        super(obj);
+    }
     
     public void appendDescription(StringBuffer buffer, int depth)
     {

Modified: trunk/src/com/flagstone/transform/FSCharacter.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCharacter.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSCharacter.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -106,11 +106,16 @@
     private int glyphIndex = 0;
     private int advance = 0;
 
-    FSCharacter(FSCoder coder)
+    /**
+     * Construct an FSCharacter object, initalizing it with values decoded from 
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSCharacter(FSCoder coder)
     {
         decode(coder);
     }
-
     /** 
      * Constructs an FSCharacter specifying the index of the glyph to be displayed 
      * and the spacing to the next glyph.
@@ -126,6 +131,16 @@
         setGlyphIndex(anIndex);
         setAdvance(anAdvance);
     }
+    /**
+     * Constructs an FSCharacter object by copying values from an existing object.
+     *
+     * @param obj an FSCharacter object.
+     */
+    public FSCharacter(FSCharacter obj)
+    {
+        glyphIndex = obj.glyphIndex;
+        advance = obj.advance;
+    }
 
     /** 
      * Gets the index of the glyph, in a font definition object, that will 

Modified: trunk/src/com/flagstone/transform/FSClipEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSClipEvent.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSClipEvent.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -220,11 +220,16 @@
     private ArrayList actions = null;
     private byte[] encodedActions = null;
     
-    FSClipEvent(FSCoder coder)
+    /**
+     * Construct an FSClipEvent object, initalizing it with values decoded from 
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSClipEvent(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSClipEvent object that defines the array of actions that will be executed when a particular event occurs.
 
         @param eventCode the code representing one or more events.
@@ -280,6 +285,28 @@
         setEncodedActions(bytes);
     }
 // End Flash 6
+    /**
+     * Constructs an FSCall object by copying values from an existing object.
+     *
+     * @param obj an FSCall object.
+     */
+    public FSClipEvent(FSClipEvent obj)
+    {
+        event = obj.event;
+        keyCode = obj.keyCode;
+        
+        if (actions != null)
+        {
+            actions = new ArrayList();
+            
+            for (Iterator i = obj.actions.iterator(); i.hasNext();)
+                actions.add(((FSActionObject)i.next()).clone());
+        }
+        else
+        {
+            encodedActions = Transform.clone(obj.encodedActions);
+        }
+    }
 
     /** Adds an action to the array of actions.
         

Modified: trunk/src/com/flagstone/transform/FSColor.java
===================================================================
--- trunk/src/com/flagstone/transform/FSColor.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSColor.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -92,11 +92,17 @@
     private int blue = 255;
     private int alpha = 255;
 
+    /**
+     * Construct an FSColor object and initialize it with values decoded from 
+     * a binary encoded FSColor object.
+     * 
+     * @param coder an FSCoder object containing an FSColor encoded as binary
+     * data.
+     */
     public FSColor(FSCoder coder)
     {
         decode(coder);
     }    
-
     /** 
      * Constructs an FSColor object containing red, green and blue channels. The
      * alpha channel defaults to the value 255 - defining an opaque colour.
@@ -126,6 +132,19 @@
         setBlue(b);
         setAlpha(a);
     }
+    /**
+     * Construct an FSColor object and initialize it with value from another 
+     * FSColor object.
+     * 
+     * @param obj an FSColor object.
+     */
+    public FSColor(FSColor obj)
+    {
+        red = obj.red;
+        green = obj.green;
+        blue = obj.blue;
+        alpha = obj.alpha;
+    }
 
     /** Gets the value for the red colour channel. 
 

Modified: trunk/src/com/flagstone/transform/FSColorTransform.java
===================================================================
--- trunk/src/com/flagstone/transform/FSColorTransform.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSColorTransform.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -175,17 +175,23 @@
     private int addBlue = 0;
     private int addAlpha = 0;
 
-    FSColorTransform(FSCoder coder)
+    /**
+     * Construct an FSColorTransform object an initialize with the values 
+     * decoded from an encoded colour transform
+     * 
+     * @param coder an FSCoder object containing the encoded colour transform.
+     */
+    public FSColorTransform(FSCoder coder)
     {
         decode(coder);
     }    
-
-    /** Constructs an FSColorTransform object defining a unity transform. If the transform is applied to a shape its colour will not change.
-        */
+    /** 
+     * Constructs an FSColorTransform object defining a unity transform. If the 
+     * transform is applied to a shape its colour will not change.
+     */
     public FSColorTransform()
     {
     }    
-
     /** Constructs an FSColorTransform object with the specified add terms.
 
         Each colour channel is transformed by the following calculation:
@@ -352,6 +358,23 @@
         setAddBlue(addBlueTerm);
         setAddAlpha(addAlphaTerm);
     }
+    /**
+     * Construct an FSColorTansform object and initialize it using a copy of 
+     * the values from another colour transform.
+     * 
+     * @param obj a colour transform.
+     */
+    public FSColorTransform(FSColorTransform obj)
+    {
+        multiplyRed = obj.multiplyRed;
+        multiplyGreen = obj.multiplyGreen;
+        multiplyBlue = obj.multiplyBlue;
+        multiplyAlpha = obj.multiplyAlpha;
+        addRed = obj.addRed;
+        addGreen = obj.addGreen;
+        addBlue = obj.addBlue;
+        addAlpha = obj.addAlpha;
+    }
 
     /** Gets the value of the multiply term for the red channel. 
 

Modified: trunk/src/com/flagstone/transform/FSCoordTransform.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCoordTransform.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSCoordTransform.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -159,22 +159,31 @@
         {0.0f, 0.0f, 1.0f} 
     };
 
-    FSCoordTransform(FSCoder coder)
+    /**
+     * Construct an FSCoordTransform object and initialize it with values decoded 
+     * from a binary encoded FSCoordTransform object.
+     * 
+     * @param coder an FSCoder object containing an FSColor encoded as binary
+     * data.
+     */
+    public FSCoordTransform(FSCoder coder)
     {
         decode(coder);
     }
-
-    /** Constructs an FSCoordTransform object defining a unity transform. If the transform is applied to a shape its location or appearance will not change.
-        */
+    /** 
+     * Constructs an FSCoordTransform object defining a unity transform. If the 
+     * transform is applied to a shape its location or appearance will not change.
+     */
     public FSCoordTransform()
     {
-    }
-
-    /** Constructs an FSCoordTransform object defining a translation transform that will change an objects location to the specified coordinates. 
-    
-        @param x the x-coordinate where the object will be displayed.
-        @param y the y-coordinate where the object will be displayed.
-        */
+    }  
+    /** 
+     * Constructs an FSCoordTransform object defining a translation transform 
+     * that will change an objects location to the specified coordinates. 
+     * 
+     * @param x the x-coordinate where the object will be displayed.
+     * @param y the y-coordinate where the object will be displayed.
+     */
     public FSCoordTransform(int x, int y)
     {
         float xValue = (float)x;
@@ -183,7 +192,6 @@
         matrix[0][2] = xValue;
         matrix[1][2] = yValue;
     }
-
     /** 
      * Constructs an FSCoordTransform object defining translation and scaling transforms
      * that will change an object's location and size.
@@ -209,6 +217,15 @@
     {
         setMatrix(aMatrix);
     }
+    /**
+     * Construct an FSCoordTransform object by copying an existing object.
+     */
+    public FSCoordTransform(FSCoordTransform obj)
+    {
+        for(int i=0; i<3; i++)
+            for (int j = 0; j<3; j++)
+                matrix[i][j] = obj.matrix[i][j];
+    }
     
     /** Sets the translation points of the transform.
      * 

Modified: trunk/src/com/flagstone/transform/FSCurve.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCurve.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSCurve.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -81,11 +81,16 @@
     private int anchorX = 0;
     private int anchorY = 0;
 
-    FSCurve(FSCoder coder)
+    /**
+     * Construct an FSCurve object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSCurve(FSCoder coder)
     {
         decode(coder);
     }
-
     /** 
      * Constructs an FSCurve object specifying the anchor and control point 
      * coordinates - specified in twips. 
@@ -102,6 +107,19 @@
         setAnchorX(ax);
         setAnchorY(ay);
     }
+    /**
+     * Constructs an FSCurve object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSCurve object.
+     */
+    public FSCurve(FSCurve obj)
+    {
+        controlX = obj.controlX;
+        controlY = obj.controlY;
+        anchorX = obj.anchorX;
+        anchorY = obj.anchorY;
+    }    
 
     /** Gets the x-coordinate of the control point relative to the current 
      * drawing point.  

Modified: trunk/src/com/flagstone/transform/FSDefineButton.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineButton.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -148,12 +148,17 @@
     private ArrayList actions = null;
     private byte[] encodedActions = null;
 
-    FSDefineButton(FSCoder coder)
+    /**
+     * Construct an FSDefineButton object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineButton(FSCoder coder)
     {
         super(DefineButton, 0);
         decode(coder);
     }
-
     /**  Constructs an FSDefineButton object with the identifier, button records and actions.
 
         @param anIdentifier a unique identifier for this button.
@@ -166,7 +171,33 @@
         setButtonRecords(buttonRecordArray);
         setActions(actionArray);
     }
+    /**
+     * Constructs an FSDefineButton object by copying values from an existing object.
+     *
+     * @param obj an FSDefineButton object.
+     */
+    public FSDefineButton(FSDefineButton obj)
+    {
+        super(obj);
+        
+        buttonRecords = new ArrayList();
+        
+        for (Iterator i = obj.buttonRecords.iterator(); i.hasNext();)
+            buttonRecords.add(((FSButton)i.next()).clone());
 
+        if (actions != null)
+        {
+            actions = new ArrayList();
+            
+            for (Iterator i = obj.actions.iterator(); i.hasNext();)
+                actions.add(((FSActionObject)i.next()).clone());
+        }
+        else
+        {
+            encodedActions = Transform.clone(obj.encodedActions);
+        }
+    }
+
     /**  
      * Constructs an FSDefineButton object with the identifier, button records and 
      * encoded actions.
@@ -268,8 +299,8 @@
         
         anObject.buttonRecords = new ArrayList();
             
-        for (Iterator i = actions.iterator(); i.hasNext();)
-            anObject.actions.add(((FSButton)i.next()).clone());
+        for (Iterator i = buttonRecords.iterator(); i.hasNext();)
+            anObject.buttonRecords.add(((FSButton)i.next()).clone());
 
         if (actions != null)
         {

Modified: trunk/src/com/flagstone/transform/FSDefineButton2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineButton2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -130,12 +130,17 @@
     private ArrayList buttonEvents = null;
     private byte[] encodedEvents = null;
     
-    FSDefineButton2(FSCoder coder)
+    /**
+     * Construct an FSDefineButton2 object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineButton2(FSCoder coder)
     {
         super(_DefineButton2, 0);
         decode(coder);
     }
-
     /** Constructs an FSDefineButton object, specifying the unique identifier, the type of button to be created, the button records that describe the button's appearance and the actions that are performed in response to each button event.
 
         @param anIdentifier a unique identifier for this button.
@@ -169,7 +174,35 @@
         setButtonRecords(buttonRecordArray);
         setEncodedEvents(bytes);
     }
+    /**
+     * Constructs an FSDefineButton2 object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineButton2 object.
+     */
+    public FSDefineButton2(FSDefineButton2 obj)
+    {
+        super(obj);
+        buttonType = obj.buttonType;
+        
+        buttonRecords = new ArrayList();
+            
+        for (Iterator i = obj.buttonRecords.iterator(); i.hasNext();)
+            buttonRecords.add(((FSButton)i.next()).clone());
 
+        if (buttonEvents != null)
+        {
+            buttonEvents = new ArrayList();
+            
+            for (Iterator i = obj.buttonEvents.iterator(); i.hasNext();)
+                buttonEvents.add(((FSButtonEvent)i.next()).clone());
+        }
+        else
+        {
+            encodedEvents = Transform.clone(obj.encodedEvents);
+        }
+    }
+
     /** Adds an FSButton to the array of button records.
 
         @param aButton a button record.

Modified: trunk/src/com/flagstone/transform/FSDefineFont.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineFont.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineFont.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -67,12 +67,17 @@
 {
     private ArrayList shapes = null;
     
-    FSDefineFont(FSCoder coder)
+    /**
+     * Construct an FSCall object, initalizing it with values decoded from an 
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineFont(FSCoder coder)
     {
         super(FSMovieObject.DefineFont, 0);
         decode(coder);
     }
-
     /** Constructs an FSDefineFont object setting the unique identifier for the object and the array of glyphs used to render the characters used from the font.
 
         @param anIdentifier the unique identifier for this object.
@@ -83,7 +88,22 @@
         super(FSMovieObject.DefineFont, anIdentifier);
         setShapes(anArray);
     }
+    /**
+     * Constructs an FSDefineFont object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineFont object.
+     */
+    public FSDefineFont(FSDefineFont obj)
+    {
+        super(obj);
 
+        shapes = new ArrayList();
+        
+        for (Iterator i = obj.shapes.iterator(); i.hasNext();)
+            shapes.add(((FSShape)i.next()).clone());
+    }
+
     /** Add a shape to the array of shapes.
 
         @param anObject a shape.

Modified: trunk/src/com/flagstone/transform/FSDefineFont2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineFont2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineFont2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -168,12 +168,17 @@
     private ArrayList bounds = null;
     private ArrayList kernings = null;
     
-    FSDefineFont2(FSCoder coder)
+    /**
+     * Construct an FSDefineFont2 object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineFont2(FSCoder coder)
     {
         super(_DefineFont2, 0);
         decode(coder);
     }
-
     /** 
      * Constructs an FSDefineFont2 object specifying only the name of the font. 
      *
@@ -195,7 +200,73 @@
         super(_DefineFont2, anIdentifier);
         setName(name);
     }
+    /**
+     * Constructs an FSDefineFont2 object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineFont2 object.
+     */
+    public FSDefineFont2(FSDefineFont2 obj)
+    {
+        super(obj);
+        encoding = obj.encoding;
+        small = obj.small;
+        italic = obj.italic;
+        bold = obj.bold;
+        language = obj.language;
+        name = new String(obj.name);
+        
+        shapes = new ArrayList();
+        
+        for (Iterator i = obj.shapes.iterator(); i.hasNext();)
+            shapes.add(((FSShape)i.next()).clone());
 
+        codes = new ArrayList();
+            
+        for (Iterator i = obj.codes.iterator(); i.hasNext();)
+            codes.add(new Integer(((Integer)i.next()).intValue()));
+
+        ascent = obj.ascent;
+        descent = obj.descent;
+        leading = obj.leading;
+        
+        if (advances != null)
+        {
+            advances = new ArrayList();
+            
+            for (Iterator i = obj.advances.iterator(); i.hasNext();)
+                advances.add(new Integer(((Integer)i.next()).intValue()));
+        }
+        else
+        {
+            advances = null;
+        }
+
+        if (bounds != null)
+        {
+            bounds = new ArrayList();
+            
+            for (Iterator i = obj.bounds.iterator(); i.hasNext();)
+                bounds.add(((FSBounds)i.next()).clone());
+        }
+        else
+        {
+            bounds = null;
+        }
+
+        if (kernings != null)
+        {
+            kernings = new ArrayList();
+            
+            for (Iterator i = obj.kernings.iterator(); i.hasNext();)
+                kernings.add(((FSKerning)i.next()).clone());
+        }
+        else
+        {
+            kernings = null;
+        }
+    }
+
     /** Add a shape to the array of shapes.
 
         @param anObject a shape.

Modified: trunk/src/com/flagstone/transform/FSDefineImage.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineImage.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineImage.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -106,13 +106,18 @@
     
     private byte[] compressedData = null;
 
-    FSDefineImage(FSCoder coder)
+    /**
+     * Construct an FSDefineImage object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineImage(FSCoder coder)
     {
         super(_DefineImage, 0);
         extendLength = true;
         decode(coder);
     }
-    
     /** Constructs an FSDefineImage object defining a colour-mapped image.
         
         @param anIdentifier    the unique identifier for this object
@@ -150,6 +155,21 @@
         setTableSize(0);
         setCompressedData(compressedBytes);
     }    
+    /**
+     * Constructs an FSDefineImage object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineImage object.
+     */
+    public FSDefineImage(FSDefineImage obj)
+    {
+        super(obj);
+        width = obj.width;
+        height = obj.height;
+        pixelSize = obj.pixelSize;
+        tableSize = obj.tableSize;
+        compressedData = Transform.clone(obj.compressedData);        
+    }    
 
     /** Gets the width of the image. 
 

Modified: trunk/src/com/flagstone/transform/FSDefineImage2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineImage2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineImage2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -96,12 +96,17 @@
     
     private byte[] compressedData = null;
 
-    FSDefineImage2(FSCoder coder)
+    /**
+     * Construct an FSCall object, initalizing it with values decoded from an 
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineImage2(FSCoder coder)
     {
         super(_DefineImage2, 0);
         decode(coder);
     }
-
     /** Constructs an FSDefineImage2 object defining a colour-mapped image.
 
     @param anIdentifier    the unique identifier for this object
@@ -136,6 +141,21 @@
         setTableSize(0);
         setCompressedData(compressedBytes);
     }
+    /**
+     * Constructs an FSDefineImage2 object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineImage2 object.
+     */
+    public FSDefineImage2(FSDefineImage2 obj)
+    {
+        super(obj);
+        width = obj.width;
+        height = obj.height;
+        pixelSize = obj.pixelSize;
+        tableSize = obj.tableSize;
+        compressedData = Transform.clone(obj.compressedData);        
+    }
 
     /** Gets the width of the image. 
 

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -93,12 +93,17 @@
 {
     private byte[] image = null;
     
-    FSDefineJPEGImage(FSCoder coder)
+    /**
+     * Construct an FSDefineJPEGImage object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineJPEGImage(FSCoder coder)
     {
         super(FSMovieObject.DefineJPEGImage, 0);
         decode(coder);
     }
-
     /** Constructs an FSDefineJPEGImage object with the identifier and JPEG data.
 
         @param anIdentifier    the unique identifier for this object
@@ -109,6 +114,17 @@
         super(FSMovieObject.DefineJPEGImage, anIdentifier);
         setImage(bytes);
     }
+    /**
+     * Constructs an FSDefineJPEGImage object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineJPEGImage object.
+     */
+    public FSDefineJPEGImage(FSDefineJPEGImage obj)
+    {
+        super(obj);
+        image = Transform.clone(obj.image);
+    }
 
     /** Gets the image data.
 

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -97,12 +97,17 @@
         (byte)0xFF, (byte)0xD9, (byte)0xFF, (byte)0xD8 
     };
 
-    FSDefineJPEGImage2(FSCoder coder)
+    /**
+     * Construct an FSDefineJPEGImage2 object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineJPEGImage2(FSCoder coder)
     {
         super(_DefineJPEGImage2, 0);
         decode(coder);
     }
-
     /** Constructs an FSDefineJPEGImage2 object with the identifier, JPEG image data and JPEG encoding table data.
 
         @param anIdentifier    the unique identifier for this object
@@ -115,7 +120,6 @@
         setImage(imageBytes);
         setEncodingTable(encodingBytes);
     }
-
     /** Constructs an FSDefineJPEGImage2 object with the identifier, JPEG image data and JPEG encoding table data.
 
         @param anIdentifier    the unique identifier for this object
@@ -126,6 +130,18 @@
         super(_DefineJPEGImage2, anIdentifier);
         setImage(imageBytes);
     }
+    /**
+     * Constructs an FSDefineJPEGImage2 object by copying values from an 
+     * existing object.
+     *
+     * @param obj an FSDefineJPEGImage2 object.
+     */
+    public FSDefineJPEGImage2(FSDefineJPEGImage2 obj)
+    {
+        super(obj);
+        image = Transform.clone(obj.image);
+        encodingTable = Transform.clone(obj.encodingTable);
+    }
 
     /** Gets the image data.
 

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -122,12 +122,17 @@
     };
     private byte[] alpha = null;
 
-    FSDefineJPEGImage3(FSCoder coder)
+    /**
+     * Construct an FSDefineJPEGImage3 object, initalizing it with values 
+     * decoded from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineJPEGImage3(FSCoder coder)
     {
         super(_DefineJPEGImage3, 0);
         decode(coder);
     }
-
     /** Constructs an FSDefineJPEGImage3 object with the specified image data, encoding table and
         alpha channel data.
 
@@ -143,6 +148,19 @@
         setEncodingTable(encodingBytes);
         setCompressedAlpha(alphaBytes);
     }
+    /**
+     * Constructs an FSDefineJPEGImage object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineJPEGImage object.
+     */
+    public FSDefineJPEGImage3(FSDefineJPEGImage3 obj)
+    {
+        super(obj);
+        image = Transform.clone(obj.image);
+        encodingTable = Transform.clone(obj.encodingTable);
+        alpha = Transform.clone(obj.alpha);
+    }
 
     /** Gets the encoding table.
 

Modified: trunk/src/com/flagstone/transform/FSDefineMorphShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineMorphShape.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineMorphShape.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -164,12 +164,17 @@
     private FSShape startShape = null;
     private FSShape endShape = null;
 
-    FSDefineMorphShape(FSCoder coder)
+    /**
+     * Construct an FSDefineJPEGImage object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineMorphShape(FSCoder coder)
     {
         super(_DefineMorphShape, 0);
         decode(coder);
     }
-
     /** Constructs an FSDefineMorphShape object.
 
         @param anIdentifier an unique identifier for this object.
@@ -190,7 +195,32 @@
         setStartShape(startShape);
         setEndShape(endShape);
     }
+    /**
+     * Constructs an FSDefineJPEGImage object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineJPEGImage object.
+     */
+    public FSDefineMorphShape(FSDefineMorphShape obj)
+    {
+        super(obj);
+        startBounds = new FSBounds(obj.startBounds);
+        endBounds = new FSBounds(obj.endBounds);
 
+        fillStyles = new ArrayList();
+        
+        for (Iterator i = obj.fillStyles.iterator(); i.hasNext();)
+            fillStyles.add(((FSFillStyle)i.next()).clone());
+
+        lineStyles = new ArrayList();
+            
+        for (Iterator i = obj.lineStyles.iterator(); i.hasNext();)
+            lineStyles.add(((FSLineStyle)i.next()).clone());
+
+        startShape = new FSShape(obj.startShape);
+        endShape = new FSShape(obj.endShape);
+    }
+
     /** Add a FSSolidLine object to the array of line styles.
 
         @param aLineStyle and FSSolidLine object.

Modified: trunk/src/com/flagstone/transform/FSDefineMovieClip.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineMovieClip.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineMovieClip.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -69,12 +69,17 @@
 {
     private ArrayList objects = null;
 
-    FSDefineMovieClip(FSCoder coder)
+    /**
+     * Construct an FSDefineMovieClip object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineMovieClip(FSCoder coder)
     {
         super(_DefineMovieClip, 0);
         decode(coder);
     }
-
     /** 
      * Constructs an FSDefineMovieClip object with the unique identifier. The 
      * Array of objects used to control the movie is empty.
@@ -86,7 +91,6 @@
         super(_DefineMovieClip, anIdentifier);
         setObjects(new ArrayList());
     }
-
     /** Constructs an FSDefineMovieClip object with the unique identifier and array of movie objects.
 
         @param anIdentifier a unique identifier for the movie clip.
@@ -97,7 +101,22 @@
         super(_DefineMovieClip, anIdentifier);
         setObjects(anArray);
     }
+    /**
+     * Constructs an FSDefineShape object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineShape object.
+     */
+    public FSDefineMovieClip(FSDefineMovieClip obj)
+    {
+        super(obj);
 
+        objects = new ArrayList();
+        
+        for (Iterator i = obj.objects.iterator(); i.hasNext();)
+            objects.add(((FSMovieObject)i.next()).clone());
+    }
+
     /** Adds the movie object to the array of actions.
 
         @param anObject an object belonging to a class derived from FSMovieObject.

Modified: trunk/src/com/flagstone/transform/FSDefineObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineObject.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineObject.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -53,7 +53,12 @@
         super(type);
         setIdentifier(anIdentifier);
     }
-
+    protected FSDefineObject(FSDefineObject obj)
+    {
+        super(obj);
+        identifier = obj.identifier;
+    }
+    
     /** Returns the unique identifier assigned to this Define tag. 
 
         @return the unique identifier for the object.

Modified: trunk/src/com/flagstone/transform/FSDefineShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineShape.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -123,12 +123,17 @@
     private ArrayList lineStyles = null;
     private FSShape shape = null;
 
-    FSDefineShape(FSCoder coder)
+    /**
+     * Construct an FSDefineShape object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineShape(FSCoder coder)
     {
         super(FSMovieObject.DefineShape, 0);
         decode(coder);
     }
-    
     /** Constructs an FSDefineShape object.
 
         @param anIdentifier the unique identifier for the shape in the range 1..65535.
@@ -145,7 +150,30 @@
         setLineStyles(lineStyleArray);
         setShape(aShape);
     }
+    /**
+     * Constructs an FSDefineShape object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineShape object.
+     */
+    public FSDefineShape(FSDefineShape obj)
+    {
+        super(obj);
+        bounds = new FSBounds(obj.bounds);
+        
+        fillStyles = new ArrayList();
+        
+        for (Iterator i = obj.fillStyles.iterator(); i.hasNext();)
+            fillStyles.add(((FSFillStyle)i.next()).clone());
 
+        lineStyles = new ArrayList();
+            
+        for (Iterator i = obj.lineStyles.iterator(); i.hasNext();)
+            lineStyles.add(((FSLineStyle)i.next()).clone());
+
+        shape = new FSShape(obj.shape);
+    }
+    
     /** Add a FSSolidLine object to the array of line styles.
 
         @param aLineStyle and FSSolidLine object.

Modified: trunk/src/com/flagstone/transform/FSDefineShape2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineShape2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -124,12 +124,17 @@
     private ArrayList lineStyles = null;
     private FSShape shape = null;
 
-    FSDefineShape2(FSCoder coder)
+    /**
+     * Construct an FSDefineShape2 object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineShape2(FSCoder coder)
     {
         super(_DefineShape2, 0);
         decode(coder);
     }
-    
     /** Constructs an FSDefineShape2 object.
 
         @param anIdentifier the unique identifier for the shape.
@@ -146,8 +151,30 @@
         setLineStyles(lineStyleArray);
         setShape(aShape);
     }
+    /**
+     * Constructs an FSDefineShape object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineShape object.
+     */
+    public FSDefineShape2(FSDefineShape2 obj)
+    {
+        super(obj);
+        bounds = new FSBounds(obj.bounds);
+        
+        fillStyles = new ArrayList();
+        
+        for (Iterator i = obj.fillStyles.iterator(); i.hasNext();)
+            fillStyles.add(((FSFillStyle)i.next()).clone());
+
+        lineStyles = new ArrayList();
+            
+        for (Iterator i = obj.lineStyles.iterator(); i.hasNext();)
+            lineStyles.add(((FSLineStyle)i.next()).clone());
+
+        shape = new FSShape(obj.shape);
+    }
     
-
     /** Add a FSSolidLine object to the array of line styles.
 
         @param aLineStyle and FSSolidLine object.

Modified: trunk/src/com/flagstone/transform/FSDefineShape3.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape3.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineShape3.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -117,12 +117,17 @@
     private ArrayList lineStyles = null;
     private FSShape shape = null;
 
-    FSDefineShape3(FSCoder coder)
+    /**
+     * Construct an FSDefineShape3 object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineShape3(FSCoder coder)
     {
         super(_DefineShape3, 0);
         decode(coder);
     }
-
     /** Constructs an FSDefineShape3 object.
 
         @param anIdentifier the unique identifier for the shape.
@@ -139,7 +144,30 @@
         setLineStyles(lineStyleArray);
         setShape(aShape);
     }
+    /**
+     * Constructs an FSDefineShape object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineShape object.
+     */
+    public FSDefineShape3(FSDefineShape3 obj)
+    {
+        super(obj);
+        bounds = new FSBounds(obj.bounds);
+        
+        fillStyles = new ArrayList();
+        
+        for (Iterator i = obj.fillStyles.iterator(); i.hasNext();)
+            fillStyles.add(((FSFillStyle)i.next()).clone());
 
+        lineStyles = new ArrayList();
+            
+        for (Iterator i = obj.lineStyles.iterator(); i.hasNext();)
+            lineStyles.add(((FSLineStyle)i.next()).clone());
+
+        shape = new FSShape(obj.shape);
+    }
+
     /** Add a FSSolidLine object to the array of line styles.
 
         @param aLineStyle and FSSolidLine object.

Modified: trunk/src/com/flagstone/transform/FSDefineSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineSound.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineSound.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -30,6 +30,9 @@
 
 package com.flagstone.transform;
 
+import java.util.ArrayList;
+import java.util.Iterator;
+
 /**
 FSDefineSound is used to define a sound that will be played when a given event occurs. 
 
@@ -123,12 +126,17 @@
     private int sampleCount = 0;
     private byte[] soundData = null;
 
-    FSDefineSound(FSCoder coder)
+    /**
+     * Construct an FSDefineSound object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineSound(FSCoder coder)
     {
         super(FSMovieObject.DefineSound, 0);
         decode(coder);
     }
-
     /** Constructs an FSDefineSound object specifying the unique identifier and all the parameters required to describe the sound.
 
         @param anIdentifier the unique identifier for this sound.
@@ -149,6 +157,22 @@
         setSampleCount(count);
         setSoundData(bytes);
     }
+    /**
+     * Constructs an FSDefineSound object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineSound object.
+     */
+    public FSDefineSound(FSDefineSound obj)
+    {
+        super(obj);
+        format = obj.format;
+        playbackRate = obj.playbackRate;
+        playbackChannels = obj.playbackChannels;
+        playbackSampleSize = obj.playbackSampleSize;
+        sampleCount = obj.sampleCount;
+        soundData = Transform.clone(obj.soundData);
+    }
 
     /**    Gets the compression format used, either FSSound.NATIVE_PCM, FSSound.PCM or FSSound.ADPCM (all Flash 1), FSSound.MP3 (Flash 4+) or FSSound.NELLYMOSER (Flash 6+).
 

Modified: trunk/src/com/flagstone/transform/FSDefineText.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineText.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineText.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -124,12 +124,17 @@
     private FSCoordTransform transform = null;
     private ArrayList objects = null;
 
-    FSDefineText(FSCoder coder)
+    /**
+     * Construct an FSDefineText object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineText(FSCoder coder)
     {
         super(FSMovieObject.DefineText, 0);
         decode(coder);
     }
-    
     /** Constructs an FSDefineText object with the specified bounding rectangle, coordinate transform and text records.
 
         @param anIdentifier the unique identifier for this object. Must be in the range 1..65535
@@ -146,6 +151,23 @@
         setTransform(aTransform);
         setObjects(array);
     }
+    /**
+     * Constructs an FSDefineText object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineText object.
+     */
+    public FSDefineText(FSDefineText obj)
+    {
+        super(obj);
+        bounds = new FSBounds(obj.bounds);
+        transform = new FSCoordTransform(obj.transform);
+        
+        objects = new ArrayList(obj.objects.size());
+        
+        for (Iterator i = obj.objects.iterator(); i.hasNext();)
+            objects.add(((FSText)i.next()).clone());
+    }    
 
     /** Add a FSText object to the array of text records.
 

Modified: trunk/src/com/flagstone/transform/FSDefineText2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineText2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineText2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -123,12 +123,17 @@
     private FSCoordTransform transform = null;
     private ArrayList objects = null;
 
-    FSDefineText2(FSCoder coder)
+    /**
+     * Construct an FSDefineText2 object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineText2(FSCoder coder)
     {
         super(_DefineText2, 0);
         decode(coder);
     }
-
     /** Constructs an FSDefineText2 object with the specified bounding rectangle, coordinate transform and text records.
 
     @param anIdentifier the unique identifier for this object.
@@ -143,6 +148,23 @@
         setTransform(aTransform);
         setObjects(textRecordArray);
     }
+    /**
+     * Constructs an FSDefineText object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineText object.
+     */
+    public FSDefineText2(FSDefineText2 obj)
+    {
+        super(obj);
+        bounds = new FSBounds(obj.bounds);
+        transform = new FSCoordTransform(obj.transform);
+        
+        objects = new ArrayList(obj.objects.size());
+        
+        for (Iterator i = obj.objects.iterator(); i.hasNext();)
+            objects.add(((FSText)i.next()).clone());
+    }    
     
     /** Add a FSText object to the array of text records.
 

Modified: trunk/src/com/flagstone/transform/FSDefineTextField.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineTextField.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineTextField.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -301,12 +301,17 @@
     private String variableName = "";
     private String initialText = "";
 
-    FSDefineTextField(FSCoder coder)
+    /**
+     * Construct an FSDefineTextField object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineTextField(FSCoder coder)
     {
         super(_DefineTextField, 0);
         decode(coder);
     }
-
     /** Constructs an FSDefineTextField object with the specified identifier and with the size defined by the bounding rectangle. All other attributes are set to their default values which will result in a blank, single-line, editable text field. Any values entered will not be assigned to a variable. Since no font is specified the text will be displayed in a non-spaced font 20 twips in height.
 
         @param anIdentifier the unique identifier for this object.
@@ -317,7 +322,6 @@
         super(_DefineTextField, anIdentifier);
         setBounds(aBounds);
     }
-
     /** Constructs an FSDefineTextField object setting the attributes added to the Hashtable. Each entry consists of a key-value pair. The key is one of the pre-defined attribute names while the value is an instance of a wrapper class (Boolean, Integer or String) that will be assigned to the specified attribute.
 
         @param anIdentifier the unique identifier for this object.
@@ -330,6 +334,39 @@
         setBounds(aBounds);
         setAttributes(attributes);
     }
+    /**
+     * Constructs an FSDefineText object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineText object.
+     */
+    public FSDefineTextField(FSDefineTextField obj)
+    {
+        super(obj);
+        bounds = new FSBounds(obj.bounds);
+        wordWrapped = obj.wordWrapped;
+        multiline = obj.multiline;
+        password = obj.password;
+        readOnly = obj.readOnly;
+        reserved1 = obj.reserved1;
+        selectable = obj.selectable;
+        bordered = obj.bordered;
+        reserved2 = obj.reserved2;
+        html = obj.html;
+        useFontGlyphs = obj.useFontGlyphs;
+        autoSize = obj.autoSize;
+        fontIdentifier = obj.fontIdentifier;
+        fontHeight = obj.fontHeight;
+        color = new FSColor(obj.color);
+        maxLength = obj.maxLength;
+        alignment = obj.alignment;
+        leftMargin = obj.leftMargin;
+        rightMargin = obj.rightMargin;
+        indent = obj.indent;
+        leading = obj.leading;
+        variableName = new String(obj.variableName);
+        initialText = new String(obj.initialText);
+    }    
 
     /** Gets the bounding rectangle that completely encloses the text field.
 

Modified: trunk/src/com/flagstone/transform/FSDefineVideo.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineVideo.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDefineVideo.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -30,6 +30,9 @@
 
 package com.flagstone.transform;
 
+import java.util.ArrayList;
+import java.util.Iterator;
+
 /**
 The FSDefineVideo class is used to display video within a Flash file. 
  
@@ -121,16 +124,21 @@
     private boolean smoothing = false;
     private int codec = 0;
 
-    FSDefineVideo(FSCoder coder)
+    /**
+     * Construct an FSDefineVideo object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDefineVideo(FSCoder coder)
     {
         super(_DefineVideo, 0);
         decode(coder);
     }
-
     /**
      * Constructs an FSDefineVideo object with the specified parameters.
      *
-     * @param anIdentifier    the unique identifier for this object
+     * @param anIdentifier the unique identifier for this object
      * @param count the number of video frames.
      * @param width the width of each frame in pixels.
      * @param height the height of each frame in pixels.
@@ -149,6 +157,22 @@
         setSmoothing(smoothing);
         setCodec(codec);
     }
+    /**
+     * Constructs an FSDefineVideo object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDefineVideo object.
+     */
+    public FSDefineVideo(FSDefineVideo obj)
+    {
+        super(obj);
+        frameCount = obj.frameCount;
+        width = obj.width;
+        height = obj.height;
+        deblocking = obj.deblocking;
+        smoothing = obj.smoothing;
+        codec = obj.codec;
+    }    
 
     /**
      * Gets the number of frames in the video.

Modified: trunk/src/com/flagstone/transform/FSDoAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDoAction.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSDoAction.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -83,14 +83,19 @@
     private ArrayList actions = null;
     private byte[] encodedActions = null;
     
-    FSDoAction(FSCoder coder)
+    /**
+     * Construct an FSDoAction object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSDoAction(FSCoder coder)
     {
         super(FSMovieObject.DoAction);
         decode(coder);
     }
+    /** Constructs an FSDoAction object with an array of actions.
 
-    /**  Constructs an FSDoAction object with an array of actions.
-
         @param anArray the array of action objects.
         */
     public FSDoAction(ArrayList anArray)
@@ -98,7 +103,6 @@
         super(FSMovieObject.DoAction);
         setActions(anArray);
     }
-
     /**
      * Constructs an FSDoAction object with an array of encoded actions
      * generated by the classes in Translate.
@@ -110,7 +114,29 @@
         super(FSMovieObject.DoAction);
         setEncodedActions(bytes);
     }
+    /**
+     * Constructs an FSDoAction object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSDoAction object.
+     */
+    public FSDoAction(FSDoAction obj)
+    {
+        super(obj);
 
+        if (obj.actions != null)
+        {
+            actions = new ArrayList(obj.actions.size());
+            
+            for (Iterator i = obj.actions.iterator(); i.hasNext();)
+                actions.add(((FSActionObject)i.next()).clone());
+        }
+        else
+        {
+            encodedActions = Transform.clone(obj.encodedActions);
+        }
+    }    
+
     /** 
      * Adds the action object to the array of actions. If the object already
      * contains encoded actions then they will be deleted.

Modified: trunk/src/com/flagstone/transform/FSEnableDebugger.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnableDebugger.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSEnableDebugger.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -30,6 +30,9 @@
 
 package com.flagstone.transform;
 
+import java.util.ArrayList;
+import java.util.Iterator;
+
 /**
 Enables a movie to be debugged when played using the Flash authoring tool, allowing the 
 variables defined in the arrays of actions specified in object to be inspected.
@@ -60,17 +63,38 @@
 {
     private String password = null;
         
-    FSEnableDebugger(FSCoder coder)
+    /**
+     * Construct an FSEnableDebugger object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSEnableDebugger(FSCoder coder)
     {
         super(_EnableDebugger);
         decode(coder);
     }
-    
+    /** 
+     * Constructs an FSEnableDebugger2 object with an MD5 encrypted password.
+     *
+     * @param aString the string defining the password.
+     */
     public FSEnableDebugger(String password)
     {
         super(_EnableDebugger);
         setPassword(password);
     }
+    /**
+     * Constructs an FSEnableDebugger object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSEnableDebugger object.
+     */
+    public FSEnableDebugger(FSEnableDebugger obj)
+    {
+        super(obj);
+        password = new String(obj.password);
+    }    
 
     /** Gets the MD5 encrypted password.
 

Modified: trunk/src/com/flagstone/transform/FSEnableDebugger2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnableDebugger2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSEnableDebugger2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -60,17 +60,38 @@
 {
     private String password = null;
         
-    FSEnableDebugger2(FSCoder coder)
+    /**
+     * Construct an FSEnableDebugger2 object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSEnableDebugger2(FSCoder coder)
     {
         super(_EnableDebugger2);
         decode(coder);
     }
-    
+    /** 
+     * Constructs an FSEnableDebugger2 object with an MD5 encrypted password.
+     *
+     * @param aString the string defining the password.
+     */
     public FSEnableDebugger2(String password)
     {
         super(_EnableDebugger2);
         setPassword(password);
     }
+    /**
+     * Constructs an FSEnableDebugger2 object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSEnableDebugger2 object.
+     */
+    public FSEnableDebugger2(FSEnableDebugger2 obj)
+    {
+        super(obj);
+        password = new String(obj.password);
+    }    
 
     /** Gets the MD5 encrypted password.
 

Modified: trunk/src/com/flagstone/transform/FSEnvelope.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnvelope.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSEnvelope.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -30,6 +30,9 @@
 
 package com.flagstone.transform;
 
+import java.util.ArrayList;
+import java.util.Iterator;
+
 /**
 FSEnvelope is used to define an envelope which controls how a particular sound is 
 played over time. 
@@ -70,11 +73,16 @@
     private int left = 0;
     private int right = 0;
 
-    FSEnvelope(FSCoder coder)
+    /**
+     * Construct an FSEnvelope object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSEnvelope(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an envelope specifying the mark, left and right values.
 
         @param markValue the sample number in the 44.1KHz playback data stream where the levels for the channels is applied.
@@ -87,6 +95,18 @@
         setLeft(leftValue);
         setRight(rightValue);
     }
+    /**
+     * Constructs an FSEnvelope object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSEnvelope object.
+     */
+    public FSEnvelope(FSEnvelope obj)
+    {
+        mark = obj.mark;
+        left = obj.left;
+        right = obj.right;
+    }    
 
     /** Gets the sample number in the 44.1KHz playback data stream where the level information is applied.
 

Modified: trunk/src/com/flagstone/transform/FSExceptionHandler.java
===================================================================
--- trunk/src/com/flagstone/transform/FSExceptionHandler.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSExceptionHandler.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -93,12 +93,17 @@
     private ArrayList catchActions = null;
     private ArrayList finalActions = null;
 
-    FSExceptionHandler(FSCoder coder)
+    /**
+     * Construct an FSExceptionHandler object, initalizing it with values 
+     * decoded from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSExceptionHandler(FSCoder coder)
     {
         super(_ExceptionHandler);
         decode(coder);
     }
-    
     /**
      * Constructs a new exception handler with the thrown object assigned to a local variable.
      *
@@ -117,7 +122,6 @@
         catchActions = catchArray;
         finalActions = finallyArray;
     }
-
     /**
      * Constructs a new exception handler with the thrown object assigned to one of the 
      * Flash Player's internal registers.
@@ -137,6 +141,51 @@
         catchActions = catchArray;
         finalActions = finallyArray;
     }
+    /**
+     * Constructs an FSExceptionHandler object by copying values from an 
+     * existing object.
+     *
+     * @param obj an FSExceptionHandler object.
+     */
+    public FSExceptionHandler(FSExceptionHandler obj)
+    {
+        super(obj);
+        register = obj.register;
+        
+        if (obj.variable != null)
+            variable = new String(obj.variable);
+        else
+            variable = null;
+        
+        tryActions = new ArrayList(obj.tryActions.size());
+        
+        for (Iterator i = obj.tryActions.iterator(); i.hasNext();)
+            tryActions.add(((FSActionObject)i.next()).clone());
+        
+        if (obj.catchActions != null)
+        {
+            catchActions = new ArrayList(obj.catchActions.size());
+            
+            for (Iterator i = obj.catchActions.iterator(); i.hasNext();)
+                catchActions.add(((FSActionObject)i.next()).clone());
+        }
+        else
+        {
+            catchActions = null;
+        }
+        
+        if (obj.finalActions != null)
+        {
+            finalActions = new ArrayList(obj.finalActions.size());
+            
+            for (Iterator i = obj.finalActions.iterator(); i.hasNext();)
+                finalActions.add(((FSActionObject)i.next()).clone());
+        }
+        else
+        {
+            finalActions = null;
+        }
+    }    
 
     /** Adds the action object to the array of actions for the try block.
 

Modified: trunk/src/com/flagstone/transform/FSExport.java
===================================================================
--- trunk/src/com/flagstone/transform/FSExport.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSExport.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -78,17 +78,21 @@
 {
     private Hashtable objects = new Hashtable();
         
-    FSExport(FSCoder coder)
+    FSExport()
     {
         super(_Export);
-        decode(coder);
     }
-    
-    FSExport()
+    /**
+     * Construct an FSExport object, initalizing it with values decoded from an
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSExport(FSCoder coder)
     {
         super(_Export);
+        decode(coder);
     }
-
     /** Constructs an FSExport object that exports the object with the specified identifier. The exported object is assigned the specified name to allow it to be referenced in files importing the object. 
 
         @param anIdentifier the identifier of the object to be exported.
@@ -99,6 +103,23 @@
         super(_Export);
         add(anIdentifier, aString);
     }
+    /**
+     * Constructs an FSExport object by copying values from an existing object.
+     *
+     * @param obj an FSExport object.
+     */
+    public FSExport(FSExport obj)
+    {
+        super(obj);
+        
+        objects = new Hashtable(obj.objects.size());
+        
+        for (Iterator i = obj.objects.keySet().iterator(); i.hasNext();)
+        {
+            Object key = i.next();
+            objects.put(key, new String((String)objects.get(key)));
+        }
+    }    
 
     /** Adds the identifier and name to the list of objects to be exported.
 

Modified: trunk/src/com/flagstone/transform/FSFillStyle.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFillStyle.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSFillStyle.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -53,15 +53,18 @@
     
     protected int type = 0;
     
-    FSFillStyle(FSCoder coder)
+    FSFillStyle()
     {
-        decode(coder);
     }
 
-    FSFillStyle()
+    protected FSFillStyle(FSCoder coder)
     {
+        decode(coder);
     }
-
+    protected FSFillStyle(FSFillStyle obj)
+    {
+        type = obj.type;
+    }
     protected FSFillStyle(int aType)
     {
         setType(aType);

Modified: trunk/src/com/flagstone/transform/FSFontInfo.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFontInfo.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSFontInfo.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -121,14 +121,22 @@
     private boolean bold = false;
     private ArrayList codes = new ArrayList();
     
+    /*
+     * attributes used to retain state during encoding.
+     */
     private boolean _containsWideCodes = false;
     
-    FSFontInfo(FSCoder coder)
+    /**
+     * Construct an FSFontInfo object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSFontInfo(FSCoder coder)
     {
         super(FSMovieObject.FontInfo);
         decode(coder);
     }
-
     /**  Constructs a basic FSFontInfo object specifying only the name of the font.
     
         @param anIdentifier the unique identifier of the FSDefineFont that contains the glyphs for the font.
@@ -140,6 +148,27 @@
         setIdentifier(anIdentifier);
         setName(aName);
     }
+    /**
+     * Constructs an FSFontInfo object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSFontInfo object.
+     */
+    public FSFontInfo(FSFontInfo obj)
+    {
+        super(obj);
+        identifier = obj.identifier;
+        name = new String(obj.name);
+        encoding = obj.encoding;
+        small = obj.small;
+        italic = obj.italic;
+        bold = obj.bold;
+        
+        codes = new ArrayList(obj.codes.size());
+        
+        for (Iterator i = obj.codes.iterator(); i.hasNext();)
+            codes.add(new Integer(((Integer)i.next()).intValue()));
+    }    
 
     /** Gets the identifier of the font that this font information is for.
 

Modified: trunk/src/com/flagstone/transform/FSFontInfo2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFontInfo2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSFontInfo2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -79,12 +79,17 @@
     private int language = 1; // FSText.Latin
     private ArrayList codes = new ArrayList();
     
-    FSFontInfo2(FSCoder coder)
+    /**
+     * Construct an FSFontInfo2 object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSFontInfo2(FSCoder coder)
     {
         super(_FontInfo2);
         decode(coder);
     }
-
     /**  Constructs a basic FSFontInfo2 object specifying only the name of the font.
     
         @param anIdentifier the unique identifier of the FSDefineFont that contains the glyphs for the font.
@@ -96,6 +101,28 @@
         setIdentifier(anIdentifier);
         setName(aName);
     }
+    /**
+     * Constructs an FSFontInfo2 object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSFontInfo2 object.
+     */
+    public FSFontInfo2(FSFontInfo2 obj)
+    {
+        super(obj);
+        identifier = obj.identifier;
+        name = new String(obj.name);
+        encoding = obj.encoding;
+        small = obj.small;
+        italic = obj.italic;
+        bold = obj.bold;
+        language = obj.language;
+        
+        codes = new ArrayList(obj.codes.size());
+        
+        for (Iterator i = obj.codes.iterator(); i.hasNext();)
+            codes.add(new Integer(((Integer)i.next()).intValue()));
+    }    
 
     /** Gets the identifier of the font that this font information is for.
 

Modified: trunk/src/com/flagstone/transform/FSFrameLabel.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFrameLabel.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSFrameLabel.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -30,6 +30,9 @@
 
 package com.flagstone.transform;
 
+import java.util.ArrayList;
+import java.util.Iterator;
+
 /**
 FSFrameLabel defines a name for the current frame in a movie or movie clip. 
   
@@ -154,17 +157,22 @@
     private boolean anchor = false;
 // End Flash 6
         
-    FSFrameLabel(FSCoder coder)
+    FSFrameLabel()
     {
         super(_FrameLabel);
-        decode(coder);
     }
-    
-    FSFrameLabel()
+
+    /**
+     * Construct an FSFrameLabel object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSFrameLabel(FSCoder coder)
     {
         super(_FrameLabel);
+        decode(coder);
     }
-
     /** Constructs an FSFrameLabel object with the specified name. 
 
         @param aString the string that defines the label that will be assigned to the current frame.
@@ -174,7 +182,6 @@
         super(_FrameLabel);
         setLabel(aString);
     }
-
 // Flash 6
     /** Constructs an FSFrameLabel object with the specified name. If the isAnchor 
      *  flag is true then the frame will be directly selectable by a URL and the 
@@ -190,6 +197,18 @@
         setAnchor(isAnchor);
     }
 // End Flash 6
+    /**
+     * Constructs an FSFrameLabel object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSFrameLabel object.
+     */
+    public FSFrameLabel(FSFrameLabel obj)
+    {
+        super(obj);
+        label = new String(label);
+        anchor = obj.anchor;
+    }    
 
     /** Gets the label.
 

Modified: trunk/src/com/flagstone/transform/FSFree.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFree.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSFree.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -57,12 +57,17 @@
 {
     private int identifier = 0;
         
-    FSFree(FSCoder coder)
+    /**
+     * Construct an FSFree object, initalizing it with values decoded from an
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSFree(FSCoder coder)
     {
         super(_Free);
         decode(coder);
     }
-
     /** Constructs an FSFree object with the specified identifier. The identifier must be in the range 1..65535.
 
         @param anIdentifier the identifier of the object to be deleted.
@@ -72,7 +77,17 @@
         super(_Free);
         setIdentifier(anIdentifier);
     }
-
+    /**
+     * Constructs an FSFree object by copying values from an existing object.
+     *
+     * @param obj an FSFree object.
+     */
+    public FSFree(FSFree obj)
+    {
+        super(obj);
+        identifier = obj.identifier;
+    }    
+ 
     /** Gets the identifier of the object to be deleted.
 
         @return the object's identifier.

Modified: trunk/src/com/flagstone/transform/FSGetUrl.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGetUrl.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSGetUrl.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -131,17 +131,21 @@
     private String url = null;
     private String target = "";
     
-    FSGetUrl(FSCoder coder)
+    FSGetUrl()
     {
         super(FSActionObject.GetUrl);
-        decode(coder);
     }
-
-    FSGetUrl()
+    /**
+     * Construct an FSGetUrl object, initalizing it with values decoded from an
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSGetUrl(FSCoder coder)
     {
         super(FSActionObject.GetUrl);
+        decode(coder);
     }
-
     /** Constructs an FSGetUrl with the specified url and target frame. 
 
         @param urlString a fully qualified URL.
@@ -153,7 +157,6 @@
         setUrl(urlString);
         setTarget(targetString);
     }
-
     /**  Constructs an FSGetUrl with the specified url. The target defaults to the current window. 
 
         @param urlString a fully qualified URL.
@@ -163,6 +166,22 @@
         super(FSActionObject.GetUrl);
         setUrl(urlString);
     }
+    /**
+     * Constructs an FSGetUrl object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSGetUrl object.
+     */
+    public FSGetUrl(FSGetUrl obj)
+    {
+        super(obj);
+        url = new String(obj.url);
+        
+        if (obj.target != null)
+            target = new String(obj.target);
+        else
+            target = null;
+    }    
 
     /** Gets the URL. 
 

Modified: trunk/src/com/flagstone/transform/FSGetUrl2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGetUrl2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSGetUrl2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -176,12 +176,17 @@
         
     private int requestType = MovieToLevel;
     
-    FSGetUrl2(FSCoder coder)
+    /**
+     * Construct an FSGetUrl2 object, initalizing it with values decoded from an
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSGetUrl2(FSCoder coder)
     {
         super(_GetUrl2);
         decode(coder);
     }
-
     /** Constructs an FSGetUrl2 using the specified request type. 
 
         @param aType the type of request to be performed. Must be one of the constants defined in this class.
@@ -191,6 +196,17 @@
         super(_GetUrl2);
         setRequestType(aType);
     }
+    /**
+     * Constructs an FSGetUrl2 object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSGetUrl2 object.
+     */
+    public FSGetUrl2(FSGetUrl2 obj)
+    {
+        super(obj);
+        requestType = obj.requestType;
+    }    
 
     /** Gets the request type. 
 

Modified: trunk/src/com/flagstone/transform/FSGotoFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGotoFrame.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSGotoFrame.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -83,12 +83,17 @@
 {
     private int frameNumber = 1;
 
-    FSGotoFrame(FSCoder coder)
+    /**
+     * Construct an FSGotoFrame object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSGotoFrame(FSCoder coder)
     {
         super(_GotoFrame);
         decode(coder);
     }
-
     /** Constructs an FSGotoFrame with the specified frame number. The frame number must be in the range 1..65535.
 
         @param aNumber the number of the frame.
@@ -98,6 +103,17 @@
         super(_GotoFrame);
         setFrameNumber(aNumber);
     }
+    /**
+     * Constructs an FSGotoFrame object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSGotoFrame object.
+     */
+    public FSGotoFrame(FSGotoFrame obj)
+    {
+        super(obj);
+        frameNumber = obj.frameNumber;
+    }    
 
     /** Gets the number of the frame to move the main time-line to.
 

Modified: trunk/src/com/flagstone/transform/FSGotoFrame2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGotoFrame2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSGotoFrame2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -144,12 +144,17 @@
     private boolean playFrame = false;
     private int frameOffset = 0;
     
-    FSGotoFrame2(FSCoder coder)
+    /**
+     * Construct an FSGotoFrame2 object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSGotoFrame2(FSCoder coder)
     {
         super(_GotoFrame2);
         decode(coder);
     }
-
     /** Constructs an FSGotoFrame2 object with the specified play flag setting. 
 
         @param aBool true if the player should being playing the movie at the specified frame. 
@@ -160,7 +165,6 @@
         super(_GotoFrame2);
         setPlayFrame(aBool);
     }
-
 // Flash 5
     /** Constructs an FSGotoFrame2 object with the specified play flag setting 
      *  and frame offset for a given scene. 
@@ -176,7 +180,20 @@
         setPlayFrame(aBool);
         setFrameOffset(offset);
     }
-
+//  End Flash 5
+    /**
+     * Constructs an FSGotoFrame2 object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSGotoFrame object.
+     */
+    public FSGotoFrame2(FSGotoFrame2 obj)
+    {
+        super(obj);
+        playFrame = obj.playFrame;
+        frameOffset = obj.frameOffset;
+    }    
+//  Flash 5
     /** Gets the offset that will be added to the 'logical' frame number obtained 
      *  from the stack to generate the 'physical' frame number.
      * 

Modified: trunk/src/com/flagstone/transform/FSGotoLabel.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGotoLabel.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSGotoLabel.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -85,17 +85,21 @@
 {
     private String label = null;
     
-    FSGotoLabel(FSCoder coder)
+    FSGotoLabel()
     {
         super(_GotoLabel);
-        decode(coder);
     }
-
-    FSGotoLabel()
+    /**
+     * Construct an FSGotoLabel object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSGotoLabel(FSCoder coder)
     {
         super(_GotoLabel);
+        decode(coder);
     }
-
     /** Constructs an FSGotoLabel action with the specified frame label. 
 
         @param aString the label assigned a particular frame in the movie.
@@ -105,6 +109,17 @@
         super(_GotoLabel);
         setLabel(aString);
     }
+    /**
+     * Constructs an FSGotoLabel object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSGotoLabel object.
+     */
+    public FSGotoLabel(FSGotoLabel obj)
+    {
+        super(obj);
+        label = new String(obj.label);
+    }    
 
     /** Gets the frame label.
 

Modified: trunk/src/com/flagstone/transform/FSGradient.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGradient.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSGradient.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -61,11 +61,16 @@
     private int ratio = 0;
     private FSColor color = null;
     
-    FSGradient(FSCoder coder)
+    /**
+     * Construct an FSGradient object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSGradient(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSGradient object with the specified ratio and color.
 
         @param aRatio the ratio along the gradient square.
@@ -76,6 +81,17 @@
         setRatio(aRatio);
         setColor(aColor);
     }
+    /**
+     * Constructs an FSGradient object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSGradient object.
+     */
+    public FSGradient(FSGradient obj)
+    {
+        ratio = obj.ratio;
+        color = new FSColor(obj.color);
+    }    
 
     /** Gets the ratio that defines the relative point across the gradient square.
 

Modified: trunk/src/com/flagstone/transform/FSGradientFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGradientFill.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSGradientFill.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -124,11 +124,16 @@
     private FSCoordTransform transform = null;
     private ArrayList gradients = new ArrayList();
     
-    FSGradientFill(FSCoder coder)
+    /**
+     * Construct an FSGradientFill object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSGradientFill(FSCoder coder)
     {
         decode(coder);
     }
-
     /**  Constructs an FSGradientFill object specifying the type, coordinate transform and array of gradient records.
 
         @param aType the type of gradient fill, either FSFillStyle.Linear or FSFillStyle.Radial.
@@ -141,6 +146,22 @@
         setTransform(aTransform);
         setGradients(anArray);
     }
+    /**
+     * Constructs an FSGradientFill object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSGradientFill object.
+     */
+    public FSGradientFill(FSGradientFill obj)
+    {
+        super(obj);
+        transform = new FSCoordTransform(obj.transform);
+        
+        gradients = new ArrayList(obj.gradients.size());
+        
+        for (Iterator i = obj.gradients.iterator(); i.hasNext();)
+            gradients.add(((FSGradient)i.next()).clone());
+    }    
 
     /** Add a FSGradient object to the array of gradient objects.
 

Modified: trunk/src/com/flagstone/transform/FSIf.java
===================================================================
--- trunk/src/com/flagstone/transform/FSIf.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSIf.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -75,12 +75,17 @@
 {
     private int offset = 0;
 
-    FSIf(FSCoder coder)
+    /**
+     * Construct an FSIf object, initalizing it with values decoded from an 
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSIf(FSCoder coder)
     {
         super(_If);
         decode(coder);
     }
-
     /** Constructs an if action with the specified offset. The offset must be in the range  -32768..32767.
 
         @param anOffset the number of bytes to add to the instruction pointer if the value popped off the stack evaluates to true.
@@ -90,6 +95,16 @@
         super(_If);
         setOffset(anOffset);
     }
+    /**
+     * Constructs an FSIf object by copying values from an existing object.
+     *
+     * @param obj an FSIf object.
+     */
+    public FSIf(FSIf obj)
+    {
+        super(obj);
+        offset = obj.offset;
+    }    
 
     /** Gets the offset that will be added to the instruction pointer if the value at the top of the stack evaluates to true (non-zero).
 

Modified: trunk/src/com/flagstone/transform/FSImport.java
===================================================================
--- trunk/src/com/flagstone/transform/FSImport.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSImport.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -89,17 +89,21 @@
     private String url = null;
     private Hashtable objects = new Hashtable();
         
-    FSImport(FSCoder coder)
+    FSImport()
     {
         super(_Import);
-        decode(coder);
     }
-    
-    FSImport()
+    /**
+     * Construct an FSImport object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSImport(FSCoder coder)
     {
         super(_Import);
+        decode(coder);
     }
-
     /** Constructs an FSImport object that imports an object from the specified file. The exported object is referenced by a name assigned to it when it was exported. The newly imported object must be assigned an identifier that is unique within the movie the object is imported into. Limited security is provided by requiring that the URL must be in the same domain or sub-domain as the URL of the movie which contains this object.
 
         @param aUrl the URL referencing the file to be imported.
@@ -112,6 +116,25 @@
         setUrl(aUrl);
         add(anIdentifier, aString);
     }
+    /**
+     * Constructs an FSImport object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSImport object.
+     */
+    public FSImport(FSImport obj)
+    {
+        super(obj);
+        url = new String(obj.url);
+        
+        objects = new Hashtable(obj.objects.size());
+        
+        for (Iterator i = obj.objects.keySet().iterator(); i.hasNext();)
+        {
+            Object key = i.next();
+            objects.put(key, new String((String)objects.get(key)));
+        }
+    }    
 
     /** Adds the identifier and name to the list of objects to be imported.
 

Modified: trunk/src/com/flagstone/transform/FSInitialize.java
===================================================================
--- trunk/src/com/flagstone/transform/FSInitialize.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSInitialize.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -91,12 +91,17 @@
     private ArrayList actions = null;
     private byte[] encodedActions = null;
     
-    FSInitialize(FSCoder coder)
+    /**
+     * Construct an FSInitialize object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSInitialize(FSCoder coder)
     {
         super(_Initialize);
         decode(coder);
     }
-
     /**  
      * Constructs an FSInitialize object that will initialize the movie clip 
      * with the specified identifier with the actions in the array.
@@ -123,7 +128,31 @@
         setIdentifier(anIdentifier);
         setEncodedActions(bytes);
     }
+    /**
+     * Constructs an FSInitialize object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSInitialize object.
+     */
+    public FSInitialize(FSInitialize obj)
+    {
+        super(obj);
 
+        identifier = obj.identifier;
+        
+        if (obj.actions != null)
+        {
+            actions = new ArrayList(obj.actions.size());
+            
+            for (Iterator i = obj.actions.iterator(); i.hasNext();)
+                actions.add(((FSActionObject)i.next()).clone());
+        }
+        else
+        {
+            encodedActions = Transform.clone(obj.encodedActions);
+        }
+    }    
+
     /** Returns the identifier of the movie clip that will be initialized. 
 
         @return the identifier of the movie clip.

Modified: trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java
===================================================================
--- trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -84,18 +84,24 @@
 {
     private byte[] encodingTable = null;
 
-    FSJPEGEncodingTable(FSCoder coder)
+    /**
+     * Construct an FSJPEGEncodingTable object, initalizing it with values 
+     * decoded from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSJPEGEncodingTable(FSCoder coder)
     {
         super(FSMovieObject.JPEGTables);
         decode(coder);
     }
-
-    /** Constructs an FSJPEGEncodingTable object with an empty encoding table. */ 
+    /** 
+     * Constructs an FSJPEGEncodingTable object with an empty encoding table. 
+     */ 
     public FSJPEGEncodingTable()
     {
         super(FSMovieObject.JPEGTables);
     }
-
     /** Constructs an FSJPEGEncodingTable object with the encoding table data.
 
         @param bytes an array of bytes contains the data for the encoding table.
@@ -105,6 +111,21 @@
         super(FSMovieObject.JPEGTables);
         setEncodingTable(bytes);
     }
+    /**
+     * Constructs an FSJPEGEncodingTable object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSJPEGEncodingTable object.
+     */
+    public FSJPEGEncodingTable(FSJPEGEncodingTable obj)
+    {
+        super(obj);
+        
+        if (obj.encodingTable != null)
+            encodingTable = Transform.clone(obj.encodingTable);
+        else
+            encodingTable = null;
+    }    
 
     /** Gets the encoding table.
 

Modified: trunk/src/com/flagstone/transform/FSJump.java
===================================================================
--- trunk/src/com/flagstone/transform/FSJump.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSJump.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -68,12 +68,17 @@
 {
     private int offset = 0;
 
-    FSJump(FSCoder coder)
+    /**
+     * Construct an FSJump object, initalizing it with values decoded from an 
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSJump(FSCoder coder)
     {
         super(_Jump);
         decode(coder);
     }
-
     /** Constructs an FSJump action with the specified offset. The offset must be in the range -32768..32767.
 
         @param anOffset the number of bytes to add to the instruction pointer.
@@ -83,6 +88,16 @@
         super(_Jump);
         setOffset(anOffset);
     }
+    /**
+     * Constructs an FSJump object by copying values from an existing object.
+     *
+     * @param obj an FSJump object.
+     */
+    public FSJump(FSJump obj)
+    {
+        super(obj);
+        offset = obj.offset;
+    }    
 
     /** Gets the offset that will be added to the instruction pointer.
 

Modified: trunk/src/com/flagstone/transform/FSKerning.java
===================================================================
--- trunk/src/com/flagstone/transform/FSKerning.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSKerning.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -68,11 +68,16 @@
     private int rightGlyphIndex = 0;
     private int adjustment = 0;
     
-    FSKerning(FSCoder coder)
+    /**
+     * Construct an FSKerning object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSKerning(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSKerning object specifying the glyph indexes and adjustment. The value for the adjustment must be specified in twips.
 
         @param leftIndex the index in a code table for the glyph on the left side of the pair.
@@ -85,6 +90,18 @@
         setRightGlyphIndex(rightIndex);
         setAdjustment(adjust);
     }
+    /**
+     * Constructs an FSKerning object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSKerning object.
+     */
+    public FSKerning(FSKerning obj)
+    {
+        leftGlyphIndex = obj.leftGlyphIndex;
+        rightGlyphIndex = obj.rightGlyphIndex;
+        adjustment = obj.adjustment;
+    }    
 
     /** Gets the index of the left glyph in the kerning pair.
 

Modified: trunk/src/com/flagstone/transform/FSLimitScript.java
===================================================================
--- trunk/src/com/flagstone/transform/FSLimitScript.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSLimitScript.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -66,12 +66,17 @@
     private int depth = 0; 
     private int timeout = 0; 
     
+    /**
+     * Construct an FSLimitScript object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
     public FSLimitScript(FSCoder coder)
     {
         super(_LimitScript);
         decode(coder);
     }
-
     /**
      * Constructs an FSLimitScript object that limits the recursion depth to <em>depth</em> levels
      * and specifies that any sequence of actions will timeout after <em>timeout</em> seconds.
@@ -85,6 +90,18 @@
         setDepth(depth);
         setTimeout(timeout);
     }
+    /**
+     * Constructs an FSLimitScript object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSLimitScript object.
+     */
+    public FSLimitScript(FSLimitScript obj)
+    {
+        super(obj);
+        depth = obj.depth;
+        timeout = obj.timeout;
+    }    
 
     /**
      * Gets the maximum recursion level.

Modified: trunk/src/com/flagstone/transform/FSLine.java
===================================================================
--- trunk/src/com/flagstone/transform/FSLine.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSLine.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -64,11 +64,16 @@
     private int x = 0;
     private int y = 0;
 
-    FSLine(FSCoder coder)
+    /**
+     * Construct an FSLine object and initialize it with the values decoded from 
+     * an encoded line.
+     * 
+     * @param coder an FSCoder object containing the encoded colour transform.
+     */
+    public FSLine(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSLine with the specified relative coordinates.
 
         @param xValue the x-coordinate of the end point, specified relative to the current drawing point.
@@ -79,6 +84,14 @@
         setX(xValue);
         setY(yValue);
     }
+    /**
+     * Construct an FSCoordTransform object by copying an existing object.
+     */
+    public FSLine(FSLine obj)
+    {
+        x = obj.x;
+        y = obj.y;
+    }
 
     /** Gets the relative x-coordinate.
 
@@ -210,8 +223,6 @@
 
         boolean _containsGeneralLine = coder.readBits(1, false) != 0 ? true : false;
 
-        // Dummy reads are used so event logging registers fields in the correct order
-        // Fields are recorded in the following order: containsVerticalLine, x, y.
         if (_containsGeneralLine)
         {
             x = coder.readBits(fieldSize, true);

Modified: trunk/src/com/flagstone/transform/FSMorphBitmapFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphBitmapFill.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSMorphBitmapFill.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -79,15 +79,21 @@
  */  
 public final class FSMorphBitmapFill extends FSFillStyle
 {
-    private int identifier= 0;
+    private int identifier = 0;
     private FSCoordTransform startTransform = new FSCoordTransform(0,0);
     private FSCoordTransform endTransform = new FSCoordTransform(0,0);
 
-    FSMorphBitmapFill(FSCoder coder)
+    /**
+     * Construct an FSMorphBitmapFill object an initialize it with values 
+     * decoded from an encoded FSMorphBitmapFill object.
+     * 
+     * @param coder an FSCoder object containing an FSMorphBitmapFill encoded 
+     * as binary data.
+     */
+    public FSMorphBitmapFill(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSMorphBitmapFill specifying the type, bitmap image and coordinated transforms for the image at the start and end of the morphing process.
 
         @param aType the type of fill either FSFillStyle.Tiled or FSFillStyle.Clipped.
@@ -102,6 +108,17 @@
         setStartTransform(aStartTransform);
         setEndTransform(anEndTransform);
     }
+    /**
+     * Construct an FSMorphBitmapFill object by copying an existing object.
+     * 
+     * @param object an FSMorphBitmapFill object. 
+     */
+    public FSMorphBitmapFill(FSMorphBitmapFill obj)
+    {
+        identifier = obj.identifier;
+        startTransform = new FSCoordTransform(obj.startTransform);
+        endTransform = new FSCoordTransform(obj.endTransform);
+    }   
 
     /** Gets the identifier of the bitmap image.
 

Modified: trunk/src/com/flagstone/transform/FSMorphGradient.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphGradient.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSMorphGradient.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -78,11 +78,16 @@
     private FSColor startColor = null;
     private FSColor endColor = null;
     
-    FSMorphGradient(FSCoder coder)
+    /**
+     * Construct an FSMorphGradient object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSMorphGradient(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSMorphGradient object specifying the starting and ending ratios and colours.
 
         @param aStartRatio the ratio along the gradient square at the start of the morphing process.
@@ -97,6 +102,19 @@
         setStartColor(aStartColor);
         setEndColor(anEndColor);
     }
+    /**
+     * Constructs an FSMorphGradient object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSMorphGradient object.
+     */
+    public FSMorphGradient(FSMorphGradient obj)
+    {
+        startRatio = obj.startRatio;
+        endRatio = obj.endRatio;
+        startColor = new FSColor(obj.startColor);
+        endColor = new FSColor(obj.endColor);
+    }    
 
     /** Gets the ratio at the start of the morphing process.
 

Modified: trunk/src/com/flagstone/transform/FSMorphGradientFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphGradientFill.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSMorphGradientFill.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -133,11 +133,16 @@
     private FSCoordTransform endTransform = null;
     private ArrayList gradients = null;
     
-    FSMorphGradientFill(FSCoder coder)
+    /**
+     * Construct an FSMorphGradientFill object, initalizing it with values 
+     * decoded from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSMorphGradientFill(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSMorphGradientFill object specifying the type of fill, starting and ending coordinate transforms and the array of gradient records.
 
         @param aType the type of gradient fill, either FSFillStyle.Linear or FSFillStyle.Radial.
@@ -152,6 +157,23 @@
         setEndTransform(anEndTransform);
         setGradients(anArray);
     }
+    /**
+     * Constructs an FSMorphGradientFill object by copying values from an 
+     * existing object.
+     *
+     * @param obj an FSMorphGradientFill object.
+     */
+    public FSMorphGradientFill(FSMorphGradientFill obj)
+    {
+        super(obj);
+        startTransform = new FSCoordTransform(obj.startTransform);
+        endTransform = new FSCoordTransform(obj.endTransform);
+        
+        gradients = new ArrayList(obj.gradients.size());
+        
+        for (Iterator i = obj.gradients.iterator(); i.hasNext();)
+            gradients.add(((FSGradient)i.next()).clone());
+    }    
 
     /** Add a FSMorphGradient object to the array of gradient objects.
 

Modified: trunk/src/com/flagstone/transform/FSMorphSolidFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphSolidFill.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSMorphSolidFill.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -74,11 +74,16 @@
     private FSColor startColor = null;
     private FSColor endColor = null;
     
-    FSMorphSolidFill(FSCoder coder)
+    /**
+     * Construct an FSMorphSolidFill object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSMorphSolidFill(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSMorphSolidFill object specifying the starting and ending colours.
 
         @param aStartColor the colour at the start of the morphing process.
@@ -90,6 +95,18 @@
         setStartColor(aStartColor);
         setEndColor(anEndColor);
     }
+    /**
+     * Constructs an FSMorphSolidFill object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSMorphSolidFill object.
+     */
+    public FSMorphSolidFill(FSMorphSolidFill obj)
+    {
+        super(obj);
+        startColor = new FSColor(obj.startColor);
+        endColor = new FSColor(obj.endColor);
+    }    
 
     /** Gets the colour at the start of the morphing process.
 

Modified: trunk/src/com/flagstone/transform/FSMorphSolidLine.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphSolidLine.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSMorphSolidLine.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -73,11 +73,16 @@
     private FSColor startColor = null;
     private FSColor endColor = null;
     
-    FSMorphSolidLine(FSCoder coder)
+    /**
+     * Construct an FSMorphSolidLine object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSMorphSolidLine(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSMorphLineStyle object specifying the starting and ending widths and colours.
 
         @param aStartWidth the width of the line at the start of the morphing process.
@@ -92,6 +97,19 @@
         setStartColor(aStartColor);
         setEndColor(anEndColor);
     }
+    /**
+     * Constructs an FSMorphSolidLine object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSMorphSolidLine object.
+     */
+    public FSMorphSolidLine(FSMorphSolidLine obj)
+    {
+        startWidth = obj.startWidth;
+        endWidth = obj.endWidth;
+        startColor = new FSColor(obj.startColor);
+        endColor = new FSColor(obj.endColor);
+    }    
 
     /** Gets the width of the line at the start of the morphing process.
 

Modified: trunk/src/com/flagstone/transform/FSMovieObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovieObject.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSMovieObject.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -215,11 +215,21 @@
      * 
      * @param aType an identifier indicating the type of movie object.
      */
-    public FSMovieObject(int aType)
+    protected FSMovieObject(int aType)
     {
         type = aType;
     }
-
+    /**
+     * Constructs a movie object by copying an existing one.
+     * 
+     * @param aType an identifier indicating the type of movie object.
+     */
+    protected FSMovieObject(FSMovieObject obj)
+    {
+        type = obj.type;
+        length = obj.length;
+        extendLength = obj.extendLength;
+    }
     /** 
      * Gets the code used that identifies the type of the object when it is 
      * encoded. 

Modified: trunk/src/com/flagstone/transform/FSNewFunction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNewFunction.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSNewFunction.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -149,17 +149,21 @@
 
     private int actionsLength = 0;
     
-    FSNewFunction(FSCoder coder)
+    FSNewFunction()
     {
         super(_NewFunction);
-        decode(coder);
     }
-    
-    FSNewFunction()
+    /**
+     * Construct an FSNewFunction object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSNewFunction(FSCoder coder)
     {
         super(_NewFunction);
+        decode(coder);
     }
-
     /** Constructs an FSNewFunction with the specified name, argument names and actions to be executed. The order of the Strings in the argument array indicate the order in which the values will be popped off the stack when the function is executed. The fist argument is popped from the stack first.
 
         @param aString the name of the function.
@@ -173,7 +177,6 @@
         setArguments(argumentArray);
         setActions(actionArray);
     }
-
     /** Constructs an anonymous FSNewFunction with the specified argument names and actions to be executed. Use this constructor when defining functions that will be assigned to object variables and used as methods.
 
         @param argumentArray an array of Strings listing the names of the arguments.
@@ -185,6 +188,37 @@
         setArguments(argumentArray);
         setActions(actionArray);
     }
+    /**
+     * Constructs an FSNewFunction object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSNewFunction object.
+     */
+    public FSNewFunction(FSNewFunction obj)
+    {
+        super(obj);
+
+        if (obj.name != null)
+            name = new String(obj.name);
+        else
+            name = null;
+        
+        if (obj.arguments != null)
+        {
+            arguments = new ArrayList(obj.arguments.size());
+            
+            for (Iterator i = obj.arguments.iterator(); i.hasNext();)
+                arguments.add(new String(i.next().toString()));
+        }
+
+        if (obj.actions != null)
+        {
+            actions = new ArrayList(obj.actions.size());
+            
+            for (Iterator i = obj.actions.iterator(); i.hasNext();)
+                actions.add(((FSActionObject)i.next()).clone());
+        }
+    }    
     
     /** Adds the name of an argument to the array of argument names.
 

Modified: trunk/src/com/flagstone/transform/FSNewFunction2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNewFunction2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSNewFunction2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -230,14 +230,22 @@
     private ArrayList arguments = null;
     private ArrayList actions = null;
     
-    private int actionsLength = 0;
+    /*
+     * variables used to record state when encoding.
+     */
+    private int _actionsLength = 0;
 
-    FSNewFunction2(FSCoder coder)
+    /**
+     * Construct an FSNewFunction2 object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSNewFunction2(FSCoder coder)
     {
         super(_NewFunction2);
         decode(coder);
     }
-    
     /** 
      * Constructs an FSNewFunction with the specified name, argument names and actions to 
      * be executed. The order of the Strings in the argument array indicate the order in 
@@ -255,7 +263,6 @@
         setArguments(arguments);
         setActions(actions);
     }
-
     /** 
      * Constructs an anonymous FSNewFunction with the specified argument names and actions 
      * to be executed. Use this constructor when defining functions that will be assigned 
@@ -270,7 +277,41 @@
         setArguments(arguments);
         setActions(actions);
     }
+    /**
+     * Constructs an FSNewFunction2 object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSNewFunction2 object.
+     */
+    public FSNewFunction2(FSNewFunction2 obj)
+    {
+        super(obj);
 
+        if (obj.name != null)
+            name = new String(obj.name);
+        else
+            name = null;
+        
+        registerCount = obj.registerCount;
+        optimizations = obj.optimizations;
+        
+        if (obj.arguments != null)
+        {
+            arguments = new ArrayList(obj.arguments.size());
+            
+            for (Iterator i = obj.arguments.iterator(); i.hasNext();)
+                arguments.add(new String(i.next().toString()));
+        }
+
+        if (obj.actions != null)
+        {
+            actions = new ArrayList(obj.actions.size());
+            
+            for (Iterator i = obj.actions.iterator(); i.hasNext();)
+                actions.add(((FSActionObject)i.next()).clone());
+        }
+    }    
+
     /** Adds the name of an argument to the array of argument names.
 
         @param anArgument the name of an argument passed to the FSNewFunction object.
@@ -465,16 +506,16 @@
         
         length += 2;
         
-        actionsLength = 0;
+        _actionsLength = 0;
 
         for (Iterator i = actions.iterator(); i.hasNext();)
         {
             FSActionObject currentAction = (FSActionObject)i.next();
             
-            actionsLength += currentAction.length(coder);
-            actionsLength += (currentAction.getType() > 128) ? 3 : 1;
+            _actionsLength += currentAction.length(coder);
+            _actionsLength += (currentAction.getType() > 128) ? 3 : 1;
         }
-        length += actionsLength;
+        length += _actionsLength;
         
         return length;
     }
@@ -484,7 +525,7 @@
         coder.beginObject(name());
 
         coder.writeWord(type, 1);
-        coder.writeWord(length - actionsLength, 2);
+        coder.writeWord(length - _actionsLength, 2);
 
         if (name != null)
             coder.writeString(name);
@@ -498,7 +539,7 @@
         for (Iterator i = arguments.iterator(); i.hasNext();)
             ((FSRegisterVariable)i.next()).encode(coder);
 
-        coder.writeWord(actionsLength, 2);
+        coder.writeWord(_actionsLength, 2);
            
         for (Iterator i=actions.iterator(); i.hasNext();)
         {
@@ -545,10 +586,10 @@
         for (int i=0; i<argumentCount; i++)
             arguments.add(new FSRegisterVariable(coder));
 
-        actionsLength = coder.readWord(2, false);
-        length += actionsLength;
+        _actionsLength = coder.readWord(2, false);
+        length += _actionsLength;
         
-        while (bytesRead < actionsLength)
+        while (bytesRead < _actionsLength)
         {
             FSActionObject anAction = FSMovie.decodeAction(coder);
             

Modified: trunk/src/com/flagstone/transform/FSPathsArePostscript.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPathsArePostscript.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSPathsArePostscript.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -63,17 +63,32 @@
  */  
 public final class FSPathsArePostscript extends FSMovieObject
 {
-    FSPathsArePostscript(FSCoder coder)
+    /**
+     * Construct an FSPathsArePostscript object, initalizing it with values 
+     * decoded from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSPathsArePostscript(FSCoder coder)
     {
         super(_PathsArePostscript);
         decode(coder);
     }
-
     /** Constructs an FSPathsArePostscript object. */
     public FSPathsArePostscript()
     {
         super(_PathsArePostscript);
     }
+    /**
+     * Constructs an FSPathsArePostscript object by copying values from an 
+     * existing object.
+     *
+     * @param obj an FSPathsArePostscript object.
+     */
+    public FSPathsArePostscript(FSPathsArePostscript obj)
+    {
+        super(obj);
+    }    
     
     public void appendDescription(StringBuffer buffer, int depth)
     {

Modified: trunk/src/com/flagstone/transform/FSPlaceObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPlaceObject.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSPlaceObject.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -123,12 +123,17 @@
     private FSCoordTransform transform = null;
     private FSColorTransform colorTransform = null;
         
-    FSPlaceObject(FSCoder coder)
+    /**
+     * Construct an FSPlaceObject object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSPlaceObject(FSCoder coder)
     {
         super(FSMovieObject.PlaceObject);
         decode(coder);
     }
-
     /** Constructs an FSPlaceObject object that places an object with the identifier into the display list layer at the specified coordinates (x,y).
 
         @param anIdentifier the unique identifier for the object to the placed on the display list.
@@ -173,6 +178,22 @@
         setTransform(aTransform);
         setColorTransform(aColorTransform);
     }
+    /**
+     * Constructs an FSPlaceObject object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSPlaceObject object.
+     */
+    public FSPlaceObject(FSPlaceObject obj)
+    {
+        super(obj);
+        identifier = obj.identifier;
+        layer = obj.layer;
+        transform = new FSCoordTransform(obj.transform);
+        
+        if (obj.colorTransform != null)
+            colorTransform = new FSColorTransform(obj.colorTransform);
+    }    
 
     /** Gets the identifier of the object.
 

Modified: trunk/src/com/flagstone/transform/FSPlaceObject2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPlaceObject2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSPlaceObject2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -271,12 +271,17 @@
     private ArrayList clipEvents = null;
     private byte[] encodedEvents = null;
         
-    FSPlaceObject2(FSCoder coder)
+    /**
+     * Construct an FSPlaceObject2 object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSPlaceObject2(FSCoder coder)
     {
         super(_PlaceObject2);
         decode(coder);
     }
-
     /** Constructs an FSPlaceObject2 object to place a new object on the display list at the coordinates on the screen.
 
         @param anIdentifier the identifier of a new object to be displayed.
@@ -521,6 +526,43 @@
         setTransform(transform);
         setColorTransform(colorTransform);
     }
+    /**
+     * Constructs an FSPlaceObject2 object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSPlaceObject2 object.
+     */
+    public FSPlaceObject2(FSPlaceObject2 obj)
+    {
+        super(obj);
+        place = obj.place;
+        layer = obj.layer;
+        identifier = obj.identifier;
+        
+        if (obj.transform != null)
+            transform = new FSCoordTransform(obj.transform);
+        
+        if (obj.colorTransform != null)
+            colorTransform = new FSColorTransform(obj.colorTransform);
+        
+        ratio = obj.ratio;
+        clippingDepth = obj.clippingDepth;
+        
+        if (obj.name != null)
+            name = new String(obj.name);
+        
+        if (obj.clipEvents != null)
+        {
+            clipEvents = new ArrayList(obj.clipEvents.size());
+            
+            for (Iterator i = obj.clipEvents.iterator(); i.hasNext();)
+                clipEvents.add(((FSClipEvent)i.next()).clone());
+        }
+        else
+        {
+            encodedEvents = Transform.clone(encodedEvents);
+        }
+    }    
 
     /** Adds a clip event to the array of clip events. If the object already
      * contains a set of encoded clip event objects they will be deleted.

Modified: trunk/src/com/flagstone/transform/FSPointer.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPointer.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSPointer.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -61,12 +61,17 @@
 {
     private int pointer = 0;
 
-    FSPointer(FSCoder coder)
+    /**
+     * Construct an FSPointer object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSPointer(FSCoder coder)
     {
         super(_DefineBitsPtr);
         decode(coder);
     }
-
     /** Constructs an FSPointer object, specifying the pointer.
 
         @param aPointer the pointer.
@@ -76,6 +81,17 @@
         super(_DefineBitsPtr);
         setPointer(aPointer);
     }
+    /**
+     * Constructs an FSPointer object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSPointer object.
+     */
+    public FSPointer(FSPointer obj)
+    {
+        super(obj);
+        pointer = obj.pointer;
+    }    
 
     /** Gets the value for the pointer.
 

Modified: trunk/src/com/flagstone/transform/FSProperty.java
===================================================================
--- trunk/src/com/flagstone/transform/FSProperty.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSProperty.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -34,15 +34,35 @@
 {
     private int value = 0;
 
-    FSProperty(FSCoder coder)
+    /**
+     * Construct an FSProperty object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSProperty(FSCoder coder)
     {
         decode(coder);
     }
-
+    /**
+     * Construct an FSProperty object with the proerty value.
+     * 
+     * @param aValue an integer representing a movie property.
+     */
     public FSProperty(int aValue)
     {
         setValue(aValue);
     }
+    /**
+     * Constructs an FSProperty object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSProperty object.
+     */
+    public FSProperty(FSProperty obj)
+    {
+        value = obj.value;
+    }    
 
     public int getValue() 
     {

Modified: trunk/src/com/flagstone/transform/FSProtect.java
===================================================================
--- trunk/src/com/flagstone/transform/FSProtect.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSProtect.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -63,12 +63,17 @@
 {
     private String password = null;
         
-    FSProtect(FSCoder coder)
+    /**
+     * Construct an FSProtect object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSProtect(FSCoder coder)
     {
         super(_Protect);
         decode(coder);
     }
-
     /** Constructs an Protect object. */
     public FSProtect()
     {
@@ -81,6 +86,17 @@
         super(_Protect);
         setPassword(password);
     }
+    /**
+     * Constructs an FSProtect object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSProtect object.
+     */
+    public FSProtect(FSProtect obj)
+    {
+        super(obj);
+        password = new String(obj.password);
+    }    
 
     /** Gets the MD5 encrypted password.
 

Modified: trunk/src/com/flagstone/transform/FSPush.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPush.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSPush.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -226,12 +226,17 @@
     
     private ArrayList values = new ArrayList();
 
-    FSPush(FSCoder coder)
+    /**
+     * Construct an FSPush object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSPush(FSCoder coder)
     {
         super(_Push);
         decode(coder);
     }
-
     /** Constructs an FSPush action object with no values added. */
     public FSPush()
     {
@@ -327,7 +332,42 @@
         super(_Push);
         setValues(anArray);
     }
+    /**
+     * Constructs an FSPush object by copying values from an existing object.
+     *
+     * @param obj an FSPush object.
+     */
+    public FSPush(FSPush obj)
+    {
+        super(obj);
 
+        values = new ArrayList(obj.values.size());
+
+        for (Iterator i = obj.values.iterator(); i.hasNext();)
+        {
+            Object value = i.next();
+            
+            if (value instanceof Boolean)
+                values.add(new Boolean(((Boolean)value).booleanValue()));
+            else if (value instanceof Integer)
+                values.add(new Integer(((Integer)value).intValue()));
+            else if (value instanceof Float)
+                values.add(new Float(((Float)value).floatValue()));
+            else if (value instanceof Double)
+                values.add(new Double(((Double)value).doubleValue()));
+            else if (value instanceof String)
+                values.add(new String((String)value));
+            else if (value instanceof FSNull)
+                values.add(((FSNull)value).clone());
+            else if (value instanceof FSVoid)
+                values.add(((FSVoid)value).clone());
+            else if (value instanceof FSTableIndex)
+                values.add(((FSTableIndex)value).clone());
+            else if (value instanceof FSRegisterIndex)
+                values.add(((FSRegisterIndex)value).clone());
+        }
+    }    
+
     /** Adds a boolean value to the array of values that will be pushed onto the stack.
 
         @param aBool a boolean value.

Modified: trunk/src/com/flagstone/transform/FSQuicktimeMovie.java
===================================================================
--- trunk/src/com/flagstone/transform/FSQuicktimeMovie.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSQuicktimeMovie.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -59,12 +59,17 @@
 {
     private String name = null;
         
-    FSQuicktimeMovie(FSCoder coder)
+    /**
+     * Construct an FSQuicktimeMovie object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSQuicktimeMovie(FSCoder coder)
     {
         super(_QuicktimeMovie);
         decode(coder);
     }
-
     /** Constructs an FSQuicktimeMovie object referencing the specified file.
 
         @param aString the file or URL where the file is located.
@@ -74,6 +79,17 @@
         super(_QuicktimeMovie);
         setName(aString);
     }
+    /**
+     * Constructs an FSQuicktimeMovie object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSQuicktimeMovie object.
+     */
+    public FSQuicktimeMovie(FSQuicktimeMovie obj)
+    {
+        super(obj);
+        name = new String(obj.name);
+    }    
 
     /** Gets the reference to the file containing the movie.
 

Modified: trunk/src/com/flagstone/transform/FSRegisterCopy.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRegisterCopy.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSRegisterCopy.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -72,12 +72,17 @@
 {
     private int registerNumber = 0;
     
-    FSRegisterCopy(FSCoder coder)
+    /**
+     * Construct an FSRegisterCopy object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSRegisterCopy(FSCoder coder)
     {
         super(_RegisterCopy);
         decode(coder);
     }
-
     /** Constructs an FSRegisterCopy object with the register number.
 
         @param anIndex the number of one of the Flash Player's internal registers.
@@ -87,6 +92,17 @@
         super(_RegisterCopy);
         setRegisterNumber(anIndex);
     }
+    /**
+     * Constructs an FSRegisterCopy object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSRegisterCopy object.
+     */
+    public FSRegisterCopy(FSRegisterCopy obj)
+    {
+        super(obj);
+        registerNumber = obj.registerNumber;
+    }    
 
     /** Gets the number of the Player register that the value on the stack will be copied to.
 

Modified: trunk/src/com/flagstone/transform/FSRegisterIndex.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRegisterIndex.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSRegisterIndex.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -65,11 +65,16 @@
 {
     private int index = 0;
 
-    FSRegisterIndex(FSCoder coder)
+    /**
+     * Construct an FSRegisterIndex object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSRegisterIndex(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSRegisterIndex object referencing the value stored in one of the Flash Player's internal registers.
 
         @param anIndex the register number.
@@ -78,6 +83,16 @@
     {
         setIndex(anIndex);
     }
+    /**
+     * Constructs an FSRegisterIndex object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSRegisterIndex object.
+     */
+    public FSRegisterIndex(FSRegisterIndex obj)
+    {
+        index = obj.index;
+    }    
 
     /** Gets the number of the Flash Player's internal register.
 

Modified: trunk/src/com/flagstone/transform/FSRegisterVariable.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRegisterVariable.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSRegisterVariable.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -42,11 +42,16 @@
     private int index = 0;
     private String name = null;
 
-    FSRegisterVariable(FSCoder coder)
+    /**
+     * Construct an FSRegisterVariable object, initalizing it with values 
+     * decoded from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSRegisterVariable(FSCoder coder)
     {
         decode(coder);
     }    
-
     /**
      * Constructs a new FSRegisterVariable object specifying the name of the argument and 
      * the number of the register it will be mapped to. If the index is 0 then the 
@@ -67,6 +72,17 @@
      * @return the number of the register, 1..255, in which the function argument will be stored, 0 if the argument will be stored in a local variable.
      */
     public int getIndex() { return index; }
+    /**
+     * Constructs an FSRegisterVariable object by copying values from an 
+     * existing object.
+     *
+     * @param obj an FSRegisterVariable object.
+     */
+    public FSRegisterVariable(FSRegisterVariable obj)
+    {
+        index = obj.index;
+        name = new String(obj.name);
+    }    
 
     /**
      * Gets the name of the function argument.

Modified: trunk/src/com/flagstone/transform/FSRemoveObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRemoveObject.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSRemoveObject.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -95,12 +95,17 @@
     private int identifier = 0;
     private int layer = 0;
 
-    FSRemoveObject(FSCoder coder)
+    /**
+     * Construct an FSRemoveObject object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSRemoveObject(FSCoder coder)
     {
         super(FSMovieObject.RemoveObject);
         decode(coder);
     }
-
     /**  Constructs an FSRemoveObject object that will remove an object with the specified identifier from the given layer in the display list.
 
         @param anIdentifier the unique identifier for the object currently on the display list.
@@ -112,6 +117,18 @@
         setIdentifier(anIdentifier);
         setLayer(layer);
     }
+    /**
+     * Constructs an FSRemoveObject object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSRemoveObject object.
+     */
+    public FSRemoveObject(FSRemoveObject obj)
+    {
+        super(obj);
+        identifier = obj.identifier;
+        layer = obj.layer;
+    }    
 
     /** Gets the identifier of the object to be removed from the display list.
 

Modified: trunk/src/com/flagstone/transform/FSRemoveObject2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRemoveObject2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSRemoveObject2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -59,12 +59,17 @@
 {
     private int layer = 0;
 
-    FSRemoveObject2(FSCoder coder)
+    /**
+     * Construct an FSRemoveObject2 object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSRemoveObject2(FSCoder coder)
     {
         super(_RemoveObject2);
         decode(coder);
     }
-
     /** Constructs an FSRemoveObject2, specifying the layer in the display list where the object to be removed is currently displayed.
 
         @param layer the layer number on which the object is displayed.
@@ -74,6 +79,17 @@
         super(_RemoveObject2);
         setLayer(layer);
     }
+    /**
+     * Constructs an FSRemoveObject2 object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSRemoveObject2 object.
+     */
+    public FSRemoveObject2(FSRemoveObject2 obj)
+    {
+        super(obj);
+        layer = obj.layer;
+    }    
 
     /** Gets the layer in the display list where the object to be removed is currently displayed.
 

Modified: trunk/src/com/flagstone/transform/FSSerialNumber.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSerialNumber.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSSerialNumber.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -64,12 +64,17 @@
 {
     private String serialNumber = null;
     
-    FSSerialNumber(FSCoder coder)
+    /**
+     * Construct an FSSerialNumber object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSSerialNumber(FSCoder coder)
     {
         super(_SerialNumber);
         decode(coder);
     }
-
     /** Constructs an FSSerialNumber action with the specified string. 
 
         @param aString an arbitrary string containing the serial number.
@@ -79,6 +84,17 @@
         super(_SerialNumber);
         setSerialNumber(aString);
     }
+    /**
+     * Constructs an FSSerialNumber object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSSerialNumber object.
+     */
+    public FSSerialNumber(FSSerialNumber obj)
+    {
+        super(obj);
+        serialNumber = new String(obj.serialNumber);
+    }    
 
     /** Gets the serial number.
 

Modified: trunk/src/com/flagstone/transform/FSSetBackgroundColor.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSetBackgroundColor.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSSetBackgroundColor.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -68,12 +68,17 @@
 {
     private FSColor color = null;
     
-    FSSetBackgroundColor(FSCoder coder)
+    /**
+     * Construct an FSSetBackgroundColor object, initalizing it with values 
+     * decoded from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSSetBackgroundColor(FSCoder coder)
     {
         super(FSMovieObject.SetBackgroundColor);
         decode(coder);
     }
-
     /** Constructs an FSSetBackgroundColor object with a the specified colour.
 
         @param aColor the colour for the background.
@@ -83,6 +88,17 @@
         super(FSMovieObject.SetBackgroundColor);
         setColor(aColor);
     }
+    /**
+     * Constructs an FSSetBackgroundColor object by copying values from an 
+     * existing object.
+     *
+     * @param obj an FSSetBackgroundColor object.
+     */
+    public FSSetBackgroundColor(FSSetBackgroundColor obj)
+    {
+        super(obj);
+        color = new FSColor(obj.color);
+    }    
 
     /** Gets the colour for the movie background.
 

Modified: trunk/src/com/flagstone/transform/FSSetTarget.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSetTarget.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSSetTarget.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -75,12 +75,17 @@
 {
     private String target = "";
     
-    FSSetTarget(FSCoder coder)
+    /**
+     * Construct an FSSetTarget object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSSetTarget(FSCoder coder)
     {
         super(_SetTarget);
         decode(coder);
     }
-
     /** Constructs an FSSetTarget action that changes the context to the specified target.
 
         @param aString the name of a movie clip.
@@ -90,6 +95,17 @@
         super(_SetTarget);
         setTarget(aString);
     }
+    /**
+     * Constructs an FSSetTarget object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSSetTarget object.
+     */
+    public FSSetTarget(FSSetTarget obj)
+    {
+        super(obj);
+        target = new String(obj.target);
+    }    
 
     /** Gets the name of the target movie clip. 
 

Modified: trunk/src/com/flagstone/transform/FSShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSShape.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSShape.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -58,6 +58,9 @@
     private ArrayList objects = null;
     private byte[] encodedObjects = null; 
 
+    /*
+     * This method is only used when lazily decoding shapes.
+     */
     FSShape(FSCoder coder, int length)
     {
         if (coder.context[FSCoder.DecodeShapes] == 0)
@@ -66,17 +69,21 @@
         decode(coder);
     }
 
-    FSShape(FSCoder coder)
+    /**
+     * Construct an FSShape object, initalizing it with values decoded from an
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSShape(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSShape object with no shape objects. */
     public FSShape()
     {
         objects = new ArrayList();
     }
-
     /** Constructs an FSShape object, specifying the Objects that describe how the shape is drawn.
 
         @param anArray the array of shape records.
@@ -85,6 +92,25 @@
     {
         setObjects(anArray);
     }
+    /**
+     * Constructs an FSShape object by copying values from an existing object.
+     *
+     * @param obj an FSShape object.
+     */
+    public FSShape(FSShape obj)
+    {
+        if (objects != null)
+        {
+            objects = new ArrayList();
+        
+            for (Iterator i = obj.objects.iterator(); i.hasNext();)
+                objects.add(((FSTransformObject)i.next()).clone());
+        }
+        else
+        {
+            encodedObjects = Transform.clone(obj.encodedObjects);
+        }
+    }
 
     /** Adds the object to the array of shape records.
 
@@ -127,10 +153,17 @@
     {
         FSShape anObject = (FSShape)super.clone();
         
-        anObject.objects = new ArrayList();
+        if (objects != null)
+        {
+            anObject.objects = new ArrayList();
         
-        for (Iterator i = objects.iterator(); i.hasNext();)
-            anObject.objects.add(((FSTransformObject)i.next()).clone());
+            for (Iterator i = objects.iterator(); i.hasNext();)
+                anObject.objects.add(((FSTransformObject)i.next()).clone());
+        }
+        else
+        {
+            anObject.encodedObjects = Transform.clone(encodedObjects);
+        }
 
         return anObject;
     }

Modified: trunk/src/com/flagstone/transform/FSShapeStyle.java
===================================================================
--- trunk/src/com/flagstone/transform/FSShapeStyle.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSShapeStyle.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -221,11 +221,16 @@
     private ArrayList fillStyles = null;
     private ArrayList lineStyles = null;
 
-    FSShapeStyle(FSCoder coder)
+    /**
+     * Construct an FSShapeStyle object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSShapeStyle(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSShapeStyle object, selecting the line and fill styles.
 
         @param lineStyleIndex selects the line style at lineStyleIndex in the line styles array of the parent FSShape object.
@@ -238,7 +243,6 @@
         setFillStyle(fillStyleIndex);
         setAltFillStyle(altFillStyleIndex);
     }
-
     /** Constructs an FSShapeStyle object, selecting the relative drawing point.
 
         @param relativeX move the current point by relativeX in the x direction.
@@ -249,7 +253,6 @@
         setMoveX(relativeX);
         setMoveY(relativeY);
     }
-
     /** Constructs an FSShapeStyle object, specifying the new set of line and fill styles for the parent shape.
 
         @param lineStylesArray an array of FSLineStyle objects.
@@ -315,7 +318,45 @@
         setLineStyles(lineStylesArray);
         setFillStyles(fillStylesArray);
     }
+    /**
+     * Constructs an FSShapeStyle object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSShapeStyle object.
+     */
+    public FSShapeStyle(FSShapeStyle obj)
+    {
+        moveX = obj.moveX;
+        moveY = obj.moveY;
+        fillStyle = obj.fillStyle;
+        altFillStyle = obj.altFillStyle;
+        lineStyle = obj.lineStyle;
 
+        if (obj.fillStyles != null)
+        {
+            fillStyles = new ArrayList();
+            
+            for (Iterator i = obj.fillStyles.iterator(); i.hasNext();)
+                fillStyles.add(((FSFillStyle)i.next()).clone());
+        }
+        else
+        {
+            fillStyles = null;
+        }
+
+        if (obj.lineStyles != null)
+        {
+            lineStyles = new ArrayList();
+            
+            for (Iterator i = obj.lineStyles.iterator(); i.hasNext();)
+                lineStyles.add(((FSLineStyle)i.next()).clone());
+        }
+        else
+        {
+            fillStyles = null;
+        }
+    }    
+
     /** Add a FSSolidLine object to the array of line styles.
 
         @param aLineStyle and FSSolidLine object.

Modified: trunk/src/com/flagstone/transform/FSShowFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSShowFrame.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSShowFrame.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -95,17 +95,32 @@
  */
 public final class FSShowFrame extends FSMovieObject
 {
-    FSShowFrame(FSCoder coder)
+    /**
+     * Construct an FSShowFrame object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSShowFrame(FSCoder coder)
     {
         super(FSMovieObject.ShowFrame);
         decode(coder);
     }
-
     /** Constructs an FSShowFrame object. */
     public FSShowFrame()
     {
         super(FSMovieObject.ShowFrame);
     }
+    /**
+     * Constructs an FSShowFrame object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSShowFrame object.
+     */
+    public FSShowFrame(FSShowFrame obj)
+    {
+        super(obj);
+    }    
 
     public void appendDescription(StringBuffer buffer, int depth)
     {

Modified: trunk/src/com/flagstone/transform/FSSolidFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSolidFill.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSSolidFill.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -99,11 +99,16 @@
 {
     private FSColor color = null;
     
-    FSSolidFill(FSCoder coder)
+    /**
+     * Construct an FSSolidFill object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSSolidFill(FSCoder coder)
     {
         decode(coder);
     }
-
     /**    Constructs an FSSolidFill object of the specified colour.
 
         @param aColor an FSColor object that defines the colour that the area will be filled with.
@@ -113,6 +118,17 @@
         super(FSFillStyle.Solid);
         setColor(aColor);
     }
+    /**
+     * Constructs an FSSolidFill object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSSolidFill object.
+     */
+    public FSSolidFill(FSSolidFill obj)
+    {
+        super(obj);
+        color = new FSColor(obj.color);
+    }    
 
     /** Gets the colour of the fill style.
 

Modified: trunk/src/com/flagstone/transform/FSSolidLine.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSolidLine.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSSolidLine.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -94,11 +94,16 @@
     private int width = 0;
     private FSColor color = null;
     
-    FSSolidLine(FSCoder coder)
+    /**
+     * Construct an FSSolidLine object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSSolidLine(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSSolidLine, specifying the width and colour of the line. 
 
         @param aWidth the width of the line.
@@ -109,6 +114,17 @@
         setWidth(aWidth);
         setColor(aColor);
     }
+    /**
+     * Constructs an FSSolidLine object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSSolidLine object.
+     */
+    public FSSolidLine(FSSolidLine obj)
+    {
+        width = obj.width;
+        color = new FSColor(obj.color);
+    }    
 
     /**  Gets the width of the line.
 

Modified: trunk/src/com/flagstone/transform/FSSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSound.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSSound.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -111,11 +111,16 @@
     private int loopCount = 0;
     private ArrayList envelopes = null;
 
-    FSSound(FSCoder coder)
+    /**
+     * Construct an FSSound object, initalizing it with values decoded from an 
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSSound(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSSound object specifying how the sound is played.
 
         @param anIdentifier the unique identifier of the object that contains the sound data.
@@ -190,6 +195,25 @@
         setLoopCount(aCount);
         setEnvelopes(anArray);
     }
+    /**
+     * Constructs an FSSound object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSSound object.
+     */
+    public FSSound(FSSound obj)
+    {
+        identifier = obj.identifier;
+        mode = obj.mode;
+        inPoint = obj.inPoint;
+        outPoint = obj.outPoint;
+        loopCount = obj.loopCount;
+        
+        envelopes = new ArrayList();
+        
+        for (Iterator i = obj.envelopes.iterator(); i.hasNext();)
+            envelopes.add(((FSEnvelope)i.next()).clone());        
+    }
 
     /** Add a FSEnvelope object to the array of envelope objects.
 

Modified: trunk/src/com/flagstone/transform/FSSoundStreamBlock.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSoundStreamBlock.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSSoundStreamBlock.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -70,12 +70,17 @@
 {
     private byte[] soundData = null;
     
-    FSSoundStreamBlock(FSCoder coder)
+    /**
+     * Construct an FSSoundStreamBlock object, initalizing it with values 
+     * decoded from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSSoundStreamBlock(FSCoder coder)
     {
         super(FSMovieObject.SoundStreamBlock);
         decode(coder);
     }
-
     /** Constructs an FSSoundStreamBlock specifying the sound data in the format defined by a preceding FSSoundStreamHead or FSSoundStreamHead2 object.
 
         @param bytes an array of bytes containing the sound data.
@@ -85,6 +90,17 @@
         super(FSMovieObject.SoundStreamBlock);
         setSoundData(bytes);
     }
+    /**
+     * Constructs an FSSoundStreamBlock object by copying values from an 
+     * existing object.
+     *
+     * @param obj an FSSoundStreamBlock object.
+     */
+    public FSSoundStreamBlock(FSSoundStreamBlock obj)
+    {
+        super(obj);
+        soundData = Transform.clone(obj.soundData);
+    }    
 
     /** Gets the sound data in the format defined by a preceding FSSoundStreamHead or FSSoundStreamHead2 object.
 

Modified: trunk/src/com/flagstone/transform/FSSoundStreamHead.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSoundStreamHead.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSSoundStreamHead.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -130,12 +130,17 @@
     private int streamSampleCount = 0;
     private int latency = 0;
 
-    FSSoundStreamHead(FSCoder coder)
+    /**
+     * Construct an FSSoundStreamHead object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSSoundStreamHead(FSCoder coder)
     {
         super(FSMovieObject.SoundStreamHead);
         decode(coder);
     }
-    
     /** Constructs an FSSoundStreamHead object specifying all the parameters required to define the sound.
 
         @param playRate the recommended rate for playing the sound, either 5512, 11025, 22050 or 44100 Hz.
@@ -161,7 +166,27 @@
         setStreamSampleCount(streamingCount);
         setLatency(latency);
     }
-
+    /**
+     * Constructs an FSSoundStreamHead object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSSoundStreamHead object.
+     */
+    public FSSoundStreamHead(FSSoundStreamHead obj)
+    {
+        super(obj);
+        format = obj.format;
+        playbackRate = obj.playbackRate;
+        playbackChannels = obj.playbackChannels;
+        playbackSampleSize = obj.playbackSampleSize;
+        
+        streamRate = obj.streamRate;
+        streamChannels = obj.streamChannels;
+        streamSampleSize = obj.streamSampleSize;
+        streamSampleCount = obj.streamSampleCount;
+        latency = obj.latency;
+    }
+    
     /** Gets the streaming sound format. For the FSSoundStreamHead class supports 
      * ADPCM or MP3 encoded sound data.
     

Modified: trunk/src/com/flagstone/transform/FSSoundStreamHead2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSoundStreamHead2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSSoundStreamHead2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -138,12 +138,17 @@
      */
     private int _reserved = 0;
 
-    FSSoundStreamHead2(FSCoder coder)
+    /**
+     * Construct an FSSoundStreamHead2 object, initalizing it with values 
+     * decoded from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSSoundStreamHead2(FSCoder coder)
     {
         super(_SoundStreamHead2);
         decode(coder);
     }
-
     /** Constructs an FSSoundStreamHead2 object specifying all the parameters required to define the sound.
 
     @param encoding the compression format for the sound data, either FSSound.NATIVE_PCM, FSSound.ADPCM, FSSound.MP3, FSSound.PCM or FSSound.NELLYMOSER (Flash 6+ only).
@@ -172,6 +177,27 @@
         setStreamSampleCount(streamingCount);
         setLatency(latency);
     }
+    /**
+     * Constructs an FSSoundStreamHead2 object by copying values from an 
+     * existing object.
+     *
+     * @param obj an FSSoundStreamHead2 object.
+     */
+    public FSSoundStreamHead2(FSSoundStreamHead2 obj)
+    {
+        super(obj);
+        format = obj.format;
+        playbackRate = obj.playbackRate;
+        playbackChannels = obj.playbackChannels;
+        playbackSampleSize = obj.playbackSampleSize;
+        
+        streamRate = obj.streamRate;
+        streamChannels = obj.streamChannels;
+        streamSampleSize = obj.streamSampleSize;
+        streamSampleCount = obj.streamSampleCount;
+        latency = obj.latency;
+        _reserved = obj._reserved;
+    }
 
     /** 
      * Gets the streaming sound format. For the FSSoundStreamHead2 class supports 

Modified: trunk/src/com/flagstone/transform/FSStartSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSStartSound.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSStartSound.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -56,12 +56,17 @@
 {
     private FSSound sound = null;
 
-    FSStartSound(FSCoder coder)
+    /**
+     * Construct an FSStartSound object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSStartSound(FSCoder coder)
     {
         super(FSMovieObject.StartSound);
         decode(coder);
     }
-
     /** Constructs an FSStartSound object with an FSSound object that identifies the sound and controls how it is played.
 
         @param aSound the FSSound object.
@@ -71,6 +76,17 @@
         super(FSMovieObject.StartSound);
         setSound(aSound);
     }
+    /**
+     * Constructs an FSStartSound object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSStartSound object.
+     */
+    public FSStartSound(FSStartSound obj)
+    {
+        super(obj);
+        sound = new FSSound(obj.sound);
+    }    
 
     /**  Gets the FSSound object describing how the sound will be played.
 

Modified: trunk/src/com/flagstone/transform/FSTabOrder.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTabOrder.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSTabOrder.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -64,7 +64,13 @@
     private int layer = 0; 
     private int index = 0; 
     
-    FSTabOrder(FSCoder coder)
+    /**
+     * Construct an FSTabOrder object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSTabOrder(FSCoder coder)
     {
         super(_TabOrder);
         decode(coder);
@@ -83,8 +89,19 @@
         setLayer(layer);
         setIndex(index);
     }
-
     /**
+     * Constructs an FSTabOrder object by copying values from an existing object.
+     *
+     * @param obj an FSTabOrder object.
+     */
+    public FSTabOrder(FSTabOrder obj)
+    {
+        super(obj);
+        
+        layer = obj.layer;
+        index = obj.index;
+    }
+    /**
      * Gets the layer number which contains the object assigned to the tabbing order.
      *
      * @return the layer number.

Modified: trunk/src/com/flagstone/transform/FSTable.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTable.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSTable.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -105,18 +105,22 @@
 {
     private ArrayList values = null;
     
-    FSTable(FSCoder coder)
+    /**
+     * Construct an FSTable object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSTable(FSCoder coder)
     {
         super(_Table);
         decode(coder);
     }
-
     /** Constructs an empty table. */
     public FSTable()
     {
         super(_Table);
     }
-
     /** Constructs an FSTable object using the array of strings.
 
         @param anArray of Strings that will be added to the table.
@@ -126,7 +130,22 @@
         super(_Table);
         setValues(anArray);
     }
+    /**
+     * Constructs an FSTable object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSGotoFrame object.
+     */
+    public FSTable(FSTable obj)
+    {
+        super(obj);
 
+        values = new ArrayList(obj.values.size());
+        
+        for (Iterator i = obj.values.iterator(); i.hasNext();)
+            values.add(new String((String)i.next()));
+    }    
+
     /** Adds a String to the variable table.
 
         @param aString a String that will be added to the end of the table.

Modified: trunk/src/com/flagstone/transform/FSTableIndex.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTableIndex.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSTableIndex.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -72,11 +72,16 @@
 {
     private int index = 0;
 
-    FSTableIndex(FSCoder coder)
+    /**
+     * Construct an FSTableIndex object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSTableIndex(FSCoder coder)
     {
         decode(coder);
     }
-
     /** Constructs an FSTableIndex object referencing the value stored in the literal table.
 
         @param anIndex the index into the literal table.
@@ -85,6 +90,16 @@
     {
         setIndex(anIndex);
     }
+    /**
+     * Constructs an FSTableIndex object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSTableIndex object.
+     */
+    public FSTableIndex(FSTableIndex obj)
+    {
+        index = obj.index;
+    }    
 
     /** Gets the index in the table of string literals.
 

Modified: trunk/src/com/flagstone/transform/FSText.java
===================================================================
--- trunk/src/com/flagstone/transform/FSText.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSText.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -218,11 +218,16 @@
 
     private ArrayList characters = new ArrayList();
 
-    FSText(FSCoder coder)
+    /**
+     * Construct an FSText object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSText(FSCoder coder)
     {
         decode(coder);
     }
-
     /**
      * Constructs an FSText object specifying the array of characters to be displayed and their 
      * relative placement within a block of text. The selected font, colour of the text and height 
@@ -261,6 +266,24 @@
         setHeight(aHeight);
         setCharacters(anArray);
     }
+    /**
+     * Constructs an FSText object by copying values from an existing object.
+     *
+     * @param obj an FSText object.
+     */
+    public FSText(FSText obj)
+    {
+        identifier = obj.identifier;
+        color = new FSColor(obj.color);
+        offsetX = obj.offsetX;
+        offsetY = obj.offsetY;
+        height = obj.height;
+        
+        characters = new ArrayList(obj.characters.size());
+        
+        for (Iterator i = obj.characters.iterator(); i.hasNext();)
+            characters.add(((FSCharacter)i.next()).clone());
+    }    
 
     /** Gets the identifier of the font in which the text will be displayed.
 

Modified: trunk/src/com/flagstone/transform/FSUnknownAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSUnknownAction.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSUnknownAction.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -57,12 +57,17 @@
 {
     private byte[] data = null;
     
-    FSUnknownAction(FSCoder coder)
+    /**
+     * Construct an FSUnknownAction object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSUnknownAction(FSCoder coder)
     {
         super(0);
         decode(coder);
     }
-
     /** Constructs an FSUnknownAction object of the specified type with the encoded Flash data.
 
         @param aType the code identifying the action type.
@@ -73,6 +78,21 @@
         super(aType);
         data = bytes;
     }
+    /**
+     * Constructs an FSUnknownAction object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSUnknownAction object.
+     */
+    public FSUnknownAction(FSUnknownAction obj)
+    {
+        super(obj);
+        
+        if (obj.data != null)
+            data = Transform.clone(obj.data);
+        else
+            data = null;
+    }    
 
     /** Gets the encoded data for the action.
 

Modified: trunk/src/com/flagstone/transform/FSUnknownObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSUnknownObject.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSUnknownObject.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -57,12 +57,17 @@
 {
     private byte[] data = null;
     
-    FSUnknownObject(FSCoder coder)
+    /**
+     * Construct an FSUnknownObject object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSUnknownObject(FSCoder coder)
     {
         super(0);
         decode(coder);
     }
-
     /** Constructs an FSUnknownObject object of the specified type with the encoded Flash data.
 
         @param aType the code identifying the tag type.
@@ -73,6 +78,21 @@
         super(aType);
         setData(bytes);
     }
+    /**
+     * Constructs an FSUnknownObject object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSUnknownObject object.
+     */
+    public FSUnknownObject(FSUnknownObject obj)
+    {
+        super(obj);
+        
+        if (obj.data != null)
+            data = Transform.clone(obj.data);
+        else
+            data = null;
+    }    
 
     /** Gets the encoded data for the tag.
 

Modified: trunk/src/com/flagstone/transform/FSVideoFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSVideoFrame.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSVideoFrame.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -72,12 +72,17 @@
     
     private byte[] data = null;
 
-    FSVideoFrame(FSCoder coder)
+    /**
+     * Construct an FSVideoFrame object, initalizing it with values decoded from
+     * an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSVideoFrame(FSCoder coder)
     {
         super(_VideoFrame);
         decode(coder);
     }
-
     /**
      * Constructs a new FSVideoFrame object which will display the specified frame of video data
      * in the FSDefineVideo object that matches the identifier. 
@@ -94,6 +99,20 @@
         setFrameNumber(frameNumber);
         setData(data);
     }
+    /**
+     * Constructs an FSVideoFrame object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSVideoFrame object.
+     */
+    public FSVideoFrame(FSVideoFrame obj)
+    {
+        super(obj);
+        identifier = obj.identifier;
+        frameNumber = obj.frameNumber;
+        
+        data = Transform.clone(obj.data);
+    }    
 
     /**
      * Get the identifier of the FSDefineVideo object where the frame will be displayed.

Modified: trunk/src/com/flagstone/transform/FSVoid.java
===================================================================
--- trunk/src/com/flagstone/transform/FSVoid.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSVoid.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -41,7 +41,9 @@
  */  
 public final class FSVoid extends FSTransformObject
 {
-    /** Constructs an FSVoid object. */     
+    /** 
+     * Constructs an FSVoid object. 
+     */     
     public FSVoid()
     {
     }

Modified: trunk/src/com/flagstone/transform/FSWaitForFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSWaitForFrame.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSWaitForFrame.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -89,12 +89,17 @@
     private int frameNumber = 1;
     private int actionCount = 0;
     
-    FSWaitForFrame(FSCoder coder)
+    /**
+     * Construct an FSWaitForFrame object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSWaitForFrame(FSCoder coder)
     {
         super(_WaitForFrame);
         decode(coder);
     }
-
     /** Constructs an FSWaitForFrame object with the specified frame number and the number of actions that will be executed when the frame is loaded.
 
         @param aFrameNumber the number of the frame to wait for.
@@ -106,6 +111,18 @@
         setFrameNumber(aFrameNumber);
         setActionCount(anActionCount);
     }
+    /**
+     * Constructs an FSWaitForFrame object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSWaitForFrame object.
+     */
+    public FSWaitForFrame(FSWaitForFrame obj)
+    {
+        super(obj);
+        frameNumber = obj.frameNumber;
+        actionCount = obj.actionCount;
+    }    
 
     /** Gets the frame number.
 

Modified: trunk/src/com/flagstone/transform/FSWaitForFrame2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSWaitForFrame2.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSWaitForFrame2.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -86,12 +86,17 @@
 {
     private int actionCount = 0;
     
-    FSWaitForFrame2(FSCoder coder)
+    /**
+     * Construct an FSWaitForFrame2 object, initalizing it with values decoded 
+     * from an encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSWaitForFrame2(FSCoder coder)
     {
         super(_WaitForFrame2);
         decode(coder);
     }
-
     /** Constructs an FSWaitForFrame2 object with the number of actions to execute if the frame has been loaded.
 
         @param aNumber the number of actions to execute.
@@ -101,6 +106,17 @@
         super(_WaitForFrame2);
         setActionCount(aNumber);
     }
+    /**
+     * Constructs an FSWaitForFrame2 object by copying values from an existing 
+     * object.
+     *
+     * @param obj an FSWaitForFrame2 object.
+     */
+    public FSWaitForFrame2(FSWaitForFrame2 obj)
+    {
+        super(obj);
+        actionCount = obj.actionCount;
+    }    
 
     /** Gets the number of actions to execute.
 

Modified: trunk/src/com/flagstone/transform/FSWith.java
===================================================================
--- trunk/src/com/flagstone/transform/FSWith.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/FSWith.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -86,14 +86,22 @@
 {
     private ArrayList actions = null;
     
+    /*
+     * Variables used when encoding.
+     */
     private int actionsLength = 0;
     
-    FSWith(FSCoder coder)
+    /**
+     * Construct an FSWith object, initalizing it with values decoded from an
+     * encoded object.
+     * 
+     * @param coder an FSCoder containing the binary data.
+     */
+    public FSWith(FSCoder coder)
     {
         super(_With);
         decode(coder);
     }
-
     /** Constructs an FSWith object with an array of actions.
 
         @param anArray the array of action objects.
@@ -103,7 +111,21 @@
         super(_With);
         setActions(anArray);
     }
+    /**
+     * Constructs an FSWith object by copying values from an existing object.
+     *
+     * @param obj an FSGotoFrame object.
+     */
+    public FSWith(FSWith obj)
+    {
+        super(obj);
 
+        actions = new ArrayList(obj.actions.size());
+        
+        for (Iterator i = obj.actions.iterator(); i.hasNext();)
+            actions.add(((FSActionObject)i.next()).clone());
+    }    
+
     /** Adds the action object to the array of actions.
 
         @param anAction an object belonging to a class derived from FSActionObject.

Modified: trunk/src/com/flagstone/transform/examples/FillStyles.java
===================================================================
--- trunk/src/com/flagstone/transform/examples/FillStyles.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/examples/FillStyles.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -173,7 +173,7 @@
     
             fillStyles.add(new FSBitmapFill(FSFillStyle.Clipped, image.getIdentifier(), transform));
     
-            movie.add(new FSJPEGEncodingTable(null)); // The image will still be displayed with a null table
+            movie.add(new FSJPEGEncodingTable()); // The image will still be displayed with a null table
             movie.add(image);
             movie.add(new FSDefineShape(identifier, bounds, fillStyles, lineStyles, new FSShape(rectangle)));
             movie.add(new FSPlaceObject(identifier, 3, 10000, 1600));

Modified: trunk/src/com/flagstone/transform/test/FSMovieTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSMovieTest.java	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/src/com/flagstone/transform/test/FSMovieTest.java	2006-03-03 18:00:33 UTC (rev 104)
@@ -123,7 +123,7 @@
     /**
      * @testng.test dataProvider="files"
      */
-    public void lazyDecoding(String file)
+    public void lazyDecode(String file)
     {
         try 
         {
@@ -145,7 +145,7 @@
     /**
      * @testng.test dataProvider="files"
      */
-    public void lazyEncoding(String file)
+    public void lazyEncode(String file)
     {
         try 
         {
@@ -247,6 +247,35 @@
     /**
      * @testng.test dataProvider="files"
      */
+    public void benchmarkEncode(String file)
+    {
+        try 
+        {
+            File srcFile = new File(sourceDir, file);
+           
+            FSMovie movie = new FSMovie(srcFile.getPath());
+
+            System.gc();
+            
+            double before = (double)System.currentTimeMillis();
+            
+            for (int i=0; i<iterations; i++)
+            {
+                movie.encode();
+            }
+            
+            double duration = (System.currentTimeMillis() - before)/(double)iterations;
+            
+            buffer.append(file).append('\t').append(duration).append(newline);
+        }
+        catch (Exception e)
+        {
+            assert false : file+": "+e.toString();
+        }
+    }
+    /**
+     * @testng.test dataProvider="files"
+     */
     public void benchmarkLazyDecode(String file)
     {
         try 
@@ -282,6 +311,41 @@
         }
     }
     /**
+     * @testng.test dataProvider="files"
+     */
+    public void benchmarkLazyEncode(String file)
+    {
+        try 
+        {
+            File srcFile = new File(sourceDir, file);
+            
+            FSMovie movie = new FSMovie();
+            
+            movie.setDecodeActions(false);
+            movie.setDecodeShapes(false);
+            movie.setDecodeGlyphs(false);
+            
+            movie.decodeFromFile(srcFile.getPath());            
+ 
+            System.gc();
+            
+            double before = (double)System.currentTimeMillis();
+            
+            for (int i=0; i<iterations; i++)
+            {
+                movie.encode();
+            }
+            
+            double duration = (System.currentTimeMillis() - before)/(double)iterations;
+            
+            buffer.append(file).append('\t').append(duration).append(newline);
+        }
+        catch (Exception e)
+        {
+            assert false : file+": "+e.toString();
+        }
+    }
+    /**
      * @testng.data-provider name="files"
      */
     public Object[][] findFiles()



From smackay at berlios.de  Fri Mar  3 19:05:37 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 3 Mar 2006 19:05:37 +0100
Subject: [Transform-svn] r105 - trunk/test/benchmarks
Message-ID: <200603031805.k23I5bvl007553@sheep.berlios.de>

Author: smackay
Date: 2006-03-03 19:04:48 +0100 (Fri, 03 Mar 2006)
New Revision: 105

Added:
   trunk/test/benchmarks/FSMovieDecode.xml
   trunk/test/benchmarks/FSMovieEncode.xml
Removed:
   trunk/test/benchmarks/FSMovie.xml
Log:
Split benchmark suite for FSMovie into separate suites for encoding 
and decoding files - they take a long time to run.

Deleted: trunk/test/benchmarks/FSMovie.xml
===================================================================
--- trunk/test/benchmarks/FSMovie.xml	2006-03-03 18:00:33 UTC (rev 104)
+++ trunk/test/benchmarks/FSMovie.xml	2006-03-03 18:04:48 UTC (rev 105)
@@ -1,118 +0,0 @@
-<!DOCTYPE suite SYSTEM "http://beust.com/testng/testng-1.0.dtd" >
-  
-<suite name="FSMovie Benchmarks">
- 	
-    <!--
-        Movie Decoding. 
-    -->
-
-    <test name="Decode SWF4">
-		<parameter name="srcDir" value="test/data/movies/swf4"/>
-		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
-		<parameter name="logFile" value="test/results/FSMovie/benchmark/decode-swf4.log"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="benchmarkDecode"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Decode SWF5">
-		<parameter name="srcDir" value="test/data/movies/swf5"/>
-		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
-		<parameter name="logFile" value="test/results/FSMovie/benchmark/decode-swf5.log"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="benchmarkDecode"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Decode SWF6">
-		<parameter name="srcDir" value="test/data/movies/swf6"/>
-		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
-		<parameter name="logFile" value="test/results/FSMovie/benchmark/decode-swf6.log"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="benchmarkDecode"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Decode SWF7">
-		<parameter name="srcDir" value="test/data/movies/swf7"/>
-		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
-		<parameter name="logFile" value="test/results/FSMovie/benchmark/decode-swf7.log"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="benchmarkDecode"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-  	
-    <!--
-        Lazy Movie Decoding. 
-    -->
-
-    <test name="Decode SWF4">
-		<parameter name="srcDir" value="test/data/movies/swf4"/>
-		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
-		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-decode-swf4.log"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="benchmarkLazyDecode"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Decode SWF5">
-		<parameter name="srcDir" value="test/data/movies/swf5"/>
-		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
-		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-decode-swf5.log"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="benchmarkLazyDecode"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Decode SWF6">
-		<parameter name="srcDir" value="test/data/movies/swf6"/>
-		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
-		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-decode-swf6.log"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="benchmarkLazyDecode"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-
-    <test name="Decode SWF7">
-		<parameter name="srcDir" value="test/data/movies/swf7"/>
-		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
-		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-decode-swf7.log"/>
-		<classes>
-      		<class name="com.flagstone.transform.test.FSMovieTest">
-      			<methods>
-      				<include name="benchmarkLazyDecode"/>
-      			</methods>
-      		</class>
-		</classes>
-  	</test>
-  	
-</suite>
-

Copied: trunk/test/benchmarks/FSMovieDecode.xml (from rev 103, trunk/test/benchmarks/FSMovie.xml)
===================================================================
--- trunk/test/benchmarks/FSMovie.xml	2006-03-03 09:54:21 UTC (rev 103)
+++ trunk/test/benchmarks/FSMovieDecode.xml	2006-03-03 18:04:48 UTC (rev 105)
@@ -0,0 +1,118 @@
+<!DOCTYPE suite SYSTEM "http://beust.com/testng/testng-1.0.dtd" >
+  
+<suite name="FSMovie Benchmarks">
+ 	
+    <!--
+        Movie Decoding. 
+    -->
+
+    <test name="Decode SWF4">
+		<parameter name="srcDir" value="test/data/movies/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/decode-swf4.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Decode SWF5">
+		<parameter name="srcDir" value="test/data/movies/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/decode-swf5.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Decode SWF6">
+		<parameter name="srcDir" value="test/data/movies/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/decode-swf6.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Decode SWF7">
+		<parameter name="srcDir" value="test/data/movies/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/decode-swf7.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+  	
+    <!--
+        Lazy Movie Decoding. 
+    -->
+
+    <test name="Decode SWF4">
+		<parameter name="srcDir" value="test/data/movies/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-decode-swf4.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkLazyDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Decode SWF5">
+		<parameter name="srcDir" value="test/data/movies/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-decode-swf5.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkLazyDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Decode SWF6">
+		<parameter name="srcDir" value="test/data/movies/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-decode-swf6.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkLazyDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Decode SWF7">
+		<parameter name="srcDir" value="test/data/movies/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-decode-swf7.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkLazyDecode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+  	 	
+</suite>
+

Added: trunk/test/benchmarks/FSMovieEncode.xml
===================================================================
--- trunk/test/benchmarks/FSMovieEncode.xml	2006-03-03 18:00:33 UTC (rev 104)
+++ trunk/test/benchmarks/FSMovieEncode.xml	2006-03-03 18:04:48 UTC (rev 105)
@@ -0,0 +1,118 @@
+<!DOCTYPE suite SYSTEM "http://beust.com/testng/testng-1.0.dtd" >
+  
+<suite name="FSMovie Benchmarks">
+ 	
+    <!--
+        Movie Encoding. 
+    -->
+
+    <test name="Encode SWF4">
+		<parameter name="srcDir" value="test/data/movies/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/encode-swf4.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkEncode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode SWF5">
+		<parameter name="srcDir" value="test/data/movies/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/encode-swf5.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkEncode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode SWF6">
+		<parameter name="srcDir" value="test/data/movies/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/encode-swf6.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkEncode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode SWF7">
+		<parameter name="srcDir" value="test/data/movies/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/encode-swf7.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkEncode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+  	
+    <!--
+        Lazy Movie Decoding. 
+    -->
+
+    <test name="Encode SWF4">
+		<parameter name="srcDir" value="test/data/movies/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-encode-swf4.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkLazyEncode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode SWF5">
+		<parameter name="srcDir" value="test/data/movies/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-encode-swf5.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkLazyEncode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode SWF6">
+		<parameter name="srcDir" value="test/data/movies/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-encode-swf6.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkLazyEncode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+
+    <test name="Encode SWF7">
+		<parameter name="srcDir" value="test/data/movies/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/benchmark"/>
+		<parameter name="logFile" value="test/results/FSMovie/benchmark/lazy-encode-swf7.log"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSMovieTest">
+      			<methods>
+      				<include name="benchmarkLazyEncode"/>
+      			</methods>
+      		</class>
+		</classes>
+  	</test>
+  	
+</suite>
+



From smackay at berlios.de  Fri Mar  3 19:06:51 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 3 Mar 2006 19:06:51 +0100
Subject: [Transform-svn] r106 - trunk
Message-ID: <200603031806.k23I6pLG007902@sheep.berlios.de>

Author: smackay
Date: 2006-03-03 19:06:01 +0100 (Fri, 03 Mar 2006)
New Revision: 106

Modified:
   trunk/test.xml
Log:
Added the benchmark target to test.xml to run specific benchmarks.

Modified: trunk/test.xml
===================================================================
--- trunk/test.xml	2006-03-03 18:04:48 UTC (rev 105)
+++ trunk/test.xml	2006-03-03 18:06:01 UTC (rev 106)
@@ -12,6 +12,9 @@
         
         test-class run the unit tests for an individual class. The target will
                    prompt for the name of the class to test.
+        
+        benchmark  run a benchmark suite. The target will prompt for the name of
+                   the suite to run.   
 
     </description>
         
@@ -20,6 +23,7 @@
     <property name="test.dir" location="test"/>
     <property name="test.data.dir" value="${test.dir}/data"/>
     <property name="test.suite.dir" value="${test.dir}/suites"/>
+    <property name="test.benchmark.dir" value="${test.dir}/benchmarks"/>
     <property name="test.result.dir" value="${test.dir}/results"/>
     <property name="test.report.dir" value="${test.dir}/reports"/>
     
@@ -78,4 +82,25 @@
         
     </target>
         
+    <target name="benchmark" description="Run a benchmark suite">
+    
+        <input message="Enter the name of the benchmark to run:"
+            addProperty="benchmark.suite"/>
+
+        <mkdir dir="${test.report.dir}/${benchmark.suite}"/>
+        
+        <delete failonerror="false" includeemptydirs="true">
+            <fileset dir="${test.report.dir}/${benchmark.suite}" includes="**/*"/>
+        </delete>
+
+        <testng classpath="${build.dir}" 
+                outputDir="${test.report.dir}/${benchmark.suite}"
+                sourceDir = "src/${package.test.dir}"
+                haltOnFailure = "true">
+            <jvmarg value="-ea" />
+            <xmlfileset dir="${test.benchmark.dir}" includes="${benchmark.suite}.xml"/>
+        </testng>
+        
+    </target>
+        
 </project>



From smackay at berlios.de  Fri Mar  3 19:07:17 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 3 Mar 2006 19:07:17 +0100
Subject: [Transform-svn] r107 - trunk/doc
Message-ID: <200603031807.k23I7HSG007997@sheep.berlios.de>

Author: smackay
Date: 2006-03-03 19:07:11 +0100 (Fri, 03 Mar 2006)
New Revision: 107

Modified:
   trunk/doc/CHANGES.txt
Log:
Updated.

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-03 18:06:01 UTC (rev 106)
+++ trunk/doc/CHANGES.txt	2006-03-03 18:07:11 UTC (rev 107)
@@ -2,6 +2,18 @@
 
     * Updated FSMovieText.java and added a new test folder, benchmarks, for 
       holding TestNG files to run performance test on Transform classes.
+      
+    * Split benchmark suite for FSMovie into separate suites for encoding and 
+      decoding files - they take a long time to run.
+      
+    * FSMovieTest added methods to benchmark encoding movies (regular and lazy).
+    
+    * Added the benchmark target to test.xml to run specific benchmarks.
+    
+    * Made constructors that initialize attributes from an FSCoder public. These
+      methods will be used for testing. All classes.
+      
+    * Added copy constructors to all classes.
 
 2006-03-01 - smackay at flagstonesoftware.com
 



From smackay at berlios.de  Fri Mar  3 19:31:36 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 3 Mar 2006 19:31:36 +0100
Subject: [Transform-svn] r108 - in trunk: doc src/com/flagstone/transform
Message-ID: <200603031831.k23IVaQs019942@sheep.berlios.de>

Author: smackay
Date: 2006-03-03 19:30:42 +0100 (Fri, 03 Mar 2006)
New Revision: 108

Modified:
   trunk/doc/CHANGES.txt
   trunk/src/com/flagstone/transform/FSActionObject.java
   trunk/src/com/flagstone/transform/FSButtonColorTransform.java
   trunk/src/com/flagstone/transform/FSButtonSound.java
   trunk/src/com/flagstone/transform/FSCall.java
   trunk/src/com/flagstone/transform/FSDefineButton2.java
   trunk/src/com/flagstone/transform/FSDefineFont2.java
   trunk/src/com/flagstone/transform/FSDefineImage.java
   trunk/src/com/flagstone/transform/FSDefineImage2.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
   trunk/src/com/flagstone/transform/FSDefineMorphShape.java
   trunk/src/com/flagstone/transform/FSDefineMovieClip.java
   trunk/src/com/flagstone/transform/FSDefineShape2.java
   trunk/src/com/flagstone/transform/FSDefineShape3.java
   trunk/src/com/flagstone/transform/FSDefineText2.java
   trunk/src/com/flagstone/transform/FSDefineTextField.java
   trunk/src/com/flagstone/transform/FSDefineVideo.java
   trunk/src/com/flagstone/transform/FSEnableDebugger.java
   trunk/src/com/flagstone/transform/FSEnableDebugger2.java
   trunk/src/com/flagstone/transform/FSExceptionHandler.java
   trunk/src/com/flagstone/transform/FSExport.java
   trunk/src/com/flagstone/transform/FSFontInfo2.java
   trunk/src/com/flagstone/transform/FSFrameLabel.java
   trunk/src/com/flagstone/transform/FSFree.java
   trunk/src/com/flagstone/transform/FSGetUrl2.java
   trunk/src/com/flagstone/transform/FSGotoFrame.java
   trunk/src/com/flagstone/transform/FSGotoFrame2.java
   trunk/src/com/flagstone/transform/FSGotoLabel.java
   trunk/src/com/flagstone/transform/FSIf.java
   trunk/src/com/flagstone/transform/FSImport.java
   trunk/src/com/flagstone/transform/FSInitialize.java
   trunk/src/com/flagstone/transform/FSJump.java
   trunk/src/com/flagstone/transform/FSLimitScript.java
   trunk/src/com/flagstone/transform/FSMovieObject.java
   trunk/src/com/flagstone/transform/FSNewFunction.java
   trunk/src/com/flagstone/transform/FSNewFunction2.java
   trunk/src/com/flagstone/transform/FSPathsArePostscript.java
   trunk/src/com/flagstone/transform/FSPlaceObject2.java
   trunk/src/com/flagstone/transform/FSPointer.java
   trunk/src/com/flagstone/transform/FSProtect.java
   trunk/src/com/flagstone/transform/FSPush.java
   trunk/src/com/flagstone/transform/FSQuicktimeMovie.java
   trunk/src/com/flagstone/transform/FSRegisterCopy.java
   trunk/src/com/flagstone/transform/FSRemoveObject2.java
   trunk/src/com/flagstone/transform/FSSerialNumber.java
   trunk/src/com/flagstone/transform/FSSetTarget.java
   trunk/src/com/flagstone/transform/FSSoundStreamHead2.java
   trunk/src/com/flagstone/transform/FSTabOrder.java
   trunk/src/com/flagstone/transform/FSTable.java
   trunk/src/com/flagstone/transform/FSVideoFrame.java
   trunk/src/com/flagstone/transform/FSWaitForFrame.java
   trunk/src/com/flagstone/transform/FSWaitForFrame2.java
   trunk/src/com/flagstone/transform/FSWith.java
Log:
Removed private copies of constants used to identify different 
types of object. This was left over from supporting different 
versions of Flash.

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/doc/CHANGES.txt	2006-03-03 18:30:42 UTC (rev 108)
@@ -14,6 +14,9 @@
       methods will be used for testing. All classes.
       
     * Added copy constructors to all classes.
+    
+    * Removed private copies of constants used to identify different types of 
+      object. This was left over from supporting different versions of Flash.
 
 2006-03-01 - smackay at flagstonesoftware.com
 

Modified: trunk/src/com/flagstone/transform/FSActionObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSActionObject.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSActionObject.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -85,26 +85,6 @@
     /// Type identifying a ExceptionHandler action.
     public static final int ExceptionHandler = 143;
 
-
-    static final int _GotoFrame        = 129;
-    static final int _GetUrl           = 131;
-    static final int _WaitForFrame     = 138;
-    static final int _SetTarget        = 139;
-    static final int _GotoLabel        = 140;
-    static final int _WaitForFrame2    = 141;
-    static final int _Push             = 150;
-    static final int _Jump             = 153;
-    static final int _GetUrl2          = 154;
-    static final int _If               = 157;
-    static final int _Call             = 158;
-    static final int _GotoFrame2       = 159;
-    static final int _RegisterCopy     = 135;
-    static final int _Table            = 136;
-    static final int _With             = 148;
-    static final int _NewFunction      = 155;
-    static final int _NewFunction2     = 142;
-    static final int _ExceptionHandler = 143;
-
     protected int type = 0;
     protected int size = 0;
     protected int length = 0;

Modified: trunk/src/com/flagstone/transform/FSButtonColorTransform.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonColorTransform.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSButtonColorTransform.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -74,7 +74,7 @@
      */
     public FSButtonColorTransform(FSCoder coder)
     {
-        super(_ButtonColorTransform);
+        super(ButtonColorTransform);
         decode(coder);
     }
 
@@ -85,7 +85,7 @@
         */
     public FSButtonColorTransform(int anIdentifier, FSColorTransform aColorTransform)
     {
-        super(_ButtonColorTransform);
+        super(ButtonColorTransform);
         setIdentifier(anIdentifier);
         setColorTransform(aColorTransform);
     }

Modified: trunk/src/com/flagstone/transform/FSButtonSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonSound.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSButtonSound.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -97,7 +97,7 @@
      */
     public FSButtonSound(FSCoder coder)
     {
-        super(_ButtonSound);
+        super(ButtonSound);
         decode(coder);
     }
     /**  Constructs an FSButtonSound object that defines the sound played for a single button event.
@@ -108,7 +108,7 @@
         */
     public FSButtonSound(int anIdentifier, int eventCode, FSSound aSound)
     {
-        super(_ButtonSound);
+        super(ButtonSound);
         
         setIdentifier(anIdentifier);
         setSoundForEvent(eventCode, aSound);

Modified: trunk/src/com/flagstone/transform/FSCall.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCall.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSCall.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -76,7 +76,7 @@
      */
     public FSCall(FSCoder coder)
     {
-        super(_Call);
+        super(Call);
         decode(coder);
     }
     /** 
@@ -84,7 +84,7 @@
      */
     public FSCall()
     {
-        super(_Call);
+        super(Call);
     }
     /**
      * Constructs an FSCall object by copying values from an existing object.

Modified: trunk/src/com/flagstone/transform/FSDefineButton2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineButton2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -138,7 +138,7 @@
      */
     public FSDefineButton2(FSCoder coder)
     {
-        super(_DefineButton2, 0);
+        super(DefineButton2, 0);
         decode(coder);
     }
     /** Constructs an FSDefineButton object, specifying the unique identifier, the type of button to be created, the button records that describe the button's appearance and the actions that are performed in response to each button event.
@@ -150,7 +150,7 @@
         */
     public FSDefineButton2(int anIdentifier, int buttonType, ArrayList buttonRecordArray, ArrayList buttonEventArray)
     {
-        super(_DefineButton2, anIdentifier);
+        super(DefineButton2, anIdentifier);
         setButtonType(buttonType);
         setButtonRecords(buttonRecordArray);
         setButtonEvents(buttonEventArray);
@@ -169,7 +169,7 @@
      */
     public FSDefineButton2(int anIdentifier, int buttonType, ArrayList buttonRecordArray, byte[] bytes)
     {
-        super(_DefineButton2, anIdentifier);
+        super(DefineButton2, anIdentifier);
         setButtonType(buttonType);
         setButtonRecords(buttonRecordArray);
         setEncodedEvents(bytes);

Modified: trunk/src/com/flagstone/transform/FSDefineFont2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineFont2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineFont2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -176,7 +176,7 @@
      */
     public FSDefineFont2(FSCoder coder)
     {
-        super(_DefineFont2, 0);
+        super(DefineFont2, 0);
         decode(coder);
     }
     /** 
@@ -197,7 +197,7 @@
      */
     public FSDefineFont2(int anIdentifier, String name)
     {
-        super(_DefineFont2, anIdentifier);
+        super(DefineFont2, anIdentifier);
         setName(name);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSDefineImage.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineImage.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineImage.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -114,7 +114,7 @@
      */
     public FSDefineImage(FSCoder coder)
     {
-        super(_DefineImage, 0);
+        super(DefineImage, 0);
         extendLength = true;
         decode(coder);
     }
@@ -128,7 +128,7 @@
         */
     public FSDefineImage(int anIdentifier, int width, int height, int tableSize, byte[] compressedBytes)
     {
-        super(_DefineImage, anIdentifier);
+        super(DefineImage, anIdentifier);
         extendLength = true;
         setWidth(width);
         setHeight(height);
@@ -147,7 +147,7 @@
         */
     public FSDefineImage(int anIdentifier, int width, int height, byte[] compressedBytes, int aPixelSize)
     {
-        super(_DefineImage, anIdentifier);
+        super(DefineImage, anIdentifier);
         extendLength = true;
         setWidth(width);
         setHeight(height);

Modified: trunk/src/com/flagstone/transform/FSDefineImage2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineImage2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineImage2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -104,7 +104,7 @@
      */
     public FSDefineImage2(FSCoder coder)
     {
-        super(_DefineImage2, 0);
+        super(DefineImage2, 0);
         decode(coder);
     }
     /** Constructs an FSDefineImage2 object defining a colour-mapped image.
@@ -117,7 +117,7 @@
     */
     public FSDefineImage2(int anIdentifier, int width, int height, int tableSize, byte[] compressedBytes)
     {
-        super(_DefineImage2, anIdentifier);
+        super(DefineImage2, anIdentifier);
         setWidth(width);
         setHeight(height);
         setPixelSize(8);
@@ -134,7 +134,7 @@
     */
     public FSDefineImage2(int anIdentifier, int width, int height, byte[] compressedBytes)
     { 
-        super(_DefineImage2, anIdentifier);
+        super(DefineImage2, anIdentifier);
         setWidth(width);
         setHeight(height);
         setPixelSize(32);

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -105,7 +105,7 @@
      */
     public FSDefineJPEGImage2(FSCoder coder)
     {
-        super(_DefineJPEGImage2, 0);
+        super(DefineJPEGImage2, 0);
         decode(coder);
     }
     /** Constructs an FSDefineJPEGImage2 object with the identifier, JPEG image data and JPEG encoding table data.
@@ -116,7 +116,7 @@
         */
     public FSDefineJPEGImage2(int anIdentifier, byte[] imageBytes, byte[] encodingBytes)
     {
-        super(_DefineJPEGImage2, anIdentifier);
+        super(DefineJPEGImage2, anIdentifier);
         setImage(imageBytes);
         setEncodingTable(encodingBytes);
     }
@@ -127,7 +127,7 @@
         */
     public FSDefineJPEGImage2(int anIdentifier, byte[] imageBytes)
     {
-        super(_DefineJPEGImage2, anIdentifier);
+        super(DefineJPEGImage2, anIdentifier);
         setImage(imageBytes);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -130,7 +130,7 @@
      */
     public FSDefineJPEGImage3(FSCoder coder)
     {
-        super(_DefineJPEGImage3, 0);
+        super(DefineJPEGImage3, 0);
         decode(coder);
     }
     /** Constructs an FSDefineJPEGImage3 object with the specified image data, encoding table and
@@ -143,7 +143,7 @@
         */
     public FSDefineJPEGImage3(int anIdentifier, byte[] imageBytes, byte[] encodingBytes, byte[] alphaBytes)
     {
-        super(_DefineJPEGImage3, anIdentifier);
+        super(DefineJPEGImage3, anIdentifier);
         setImage(imageBytes);
         setEncodingTable(encodingBytes);
         setCompressedAlpha(alphaBytes);

Modified: trunk/src/com/flagstone/transform/FSDefineMorphShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineMorphShape.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineMorphShape.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -172,7 +172,7 @@
      */
     public FSDefineMorphShape(FSCoder coder)
     {
-        super(_DefineMorphShape, 0);
+        super(DefineMorphShape, 0);
         decode(coder);
     }
     /** Constructs an FSDefineMorphShape object.
@@ -187,7 +187,7 @@
         */
     public FSDefineMorphShape(int anIdentifier, FSBounds startBounds, FSBounds endBounds, ArrayList fillStyleArray, ArrayList lineStyleArray, FSShape startShape, FSShape endShape)
     {
-        super(_DefineMorphShape, anIdentifier);
+        super(DefineMorphShape, anIdentifier);
         setStartBounds(startBounds);
         setEndBounds(endBounds);
         setFillStyles(fillStyleArray);

Modified: trunk/src/com/flagstone/transform/FSDefineMovieClip.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineMovieClip.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineMovieClip.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -77,7 +77,7 @@
      */
     public FSDefineMovieClip(FSCoder coder)
     {
-        super(_DefineMovieClip, 0);
+        super(DefineMovieClip, 0);
         decode(coder);
     }
     /** 
@@ -88,7 +88,7 @@
      */
     public FSDefineMovieClip(int anIdentifier)
     {
-        super(_DefineMovieClip, anIdentifier);
+        super(DefineMovieClip, anIdentifier);
         setObjects(new ArrayList());
     }
     /** Constructs an FSDefineMovieClip object with the unique identifier and array of movie objects.
@@ -98,7 +98,7 @@
         */
     public FSDefineMovieClip(int anIdentifier, ArrayList anArray)
     {
-        super(_DefineMovieClip, anIdentifier);
+        super(DefineMovieClip, anIdentifier);
         setObjects(anArray);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSDefineShape2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineShape2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -132,7 +132,7 @@
      */
     public FSDefineShape2(FSCoder coder)
     {
-        super(_DefineShape2, 0);
+        super(DefineShape2, 0);
         decode(coder);
     }
     /** Constructs an FSDefineShape2 object.
@@ -145,7 +145,7 @@
     */
     public FSDefineShape2(int anIdentifier, FSBounds aBounds, ArrayList fillStyleArray, ArrayList lineStyleArray, FSShape aShape)
     {
-        super(_DefineShape2, anIdentifier);
+        super(DefineShape2, anIdentifier);
         setBounds(aBounds);
         setFillStyles(fillStyleArray);
         setLineStyles(lineStyleArray);

Modified: trunk/src/com/flagstone/transform/FSDefineShape3.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape3.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineShape3.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -125,7 +125,7 @@
      */
     public FSDefineShape3(FSCoder coder)
     {
-        super(_DefineShape3, 0);
+        super(DefineShape3, 0);
         decode(coder);
     }
     /** Constructs an FSDefineShape3 object.
@@ -138,7 +138,7 @@
         */
     public FSDefineShape3(int anIdentifier, FSBounds aBounds, ArrayList fillStyleArray, ArrayList lineStyleArray, FSShape aShape)
     {
-        super(_DefineShape3, anIdentifier);
+        super(DefineShape3, anIdentifier);
         setBounds(aBounds);
         setFillStyles(fillStyleArray);
         setLineStyles(lineStyleArray);

Modified: trunk/src/com/flagstone/transform/FSDefineText2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineText2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineText2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -131,7 +131,7 @@
      */
     public FSDefineText2(FSCoder coder)
     {
-        super(_DefineText2, 0);
+        super(DefineText2, 0);
         decode(coder);
     }
     /** Constructs an FSDefineText2 object with the specified bounding rectangle, coordinate transform and text records.
@@ -143,7 +143,7 @@
     */
     public FSDefineText2(int anIdentifier, FSBounds aBounds, FSCoordTransform aTransform, ArrayList textRecordArray)
     {
-        super(_DefineText2, anIdentifier);
+        super(DefineText2, anIdentifier);
         setBounds(aBounds);
         setTransform(aTransform);
         setObjects(textRecordArray);

Modified: trunk/src/com/flagstone/transform/FSDefineTextField.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineTextField.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineTextField.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -309,7 +309,7 @@
      */
     public FSDefineTextField(FSCoder coder)
     {
-        super(_DefineTextField, 0);
+        super(DefineTextField, 0);
         decode(coder);
     }
     /** Constructs an FSDefineTextField object with the specified identifier and with the size defined by the bounding rectangle. All other attributes are set to their default values which will result in a blank, single-line, editable text field. Any values entered will not be assigned to a variable. Since no font is specified the text will be displayed in a non-spaced font 20 twips in height.
@@ -319,7 +319,7 @@
         */
     public FSDefineTextField(int anIdentifier, FSBounds aBounds)
     {
-        super(_DefineTextField, anIdentifier);
+        super(DefineTextField, anIdentifier);
         setBounds(aBounds);
     }
     /** Constructs an FSDefineTextField object setting the attributes added to the Hashtable. Each entry consists of a key-value pair. The key is one of the pre-defined attribute names while the value is an instance of a wrapper class (Boolean, Integer or String) that will be assigned to the specified attribute.
@@ -330,7 +330,7 @@
         */
     public FSDefineTextField(int anIdentifier, FSBounds aBounds, Hashtable attributes)
     {
-        super(_DefineTextField, anIdentifier);
+        super(DefineTextField, anIdentifier);
         setBounds(aBounds);
         setAttributes(attributes);
     }

Modified: trunk/src/com/flagstone/transform/FSDefineVideo.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineVideo.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSDefineVideo.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -132,7 +132,7 @@
      */
     public FSDefineVideo(FSCoder coder)
     {
-        super(_DefineVideo, 0);
+        super(DefineVideo, 0);
         decode(coder);
     }
     /**
@@ -149,7 +149,7 @@
      */
     public FSDefineVideo(int anIdentifier, int count, int width, int height, int deblocking, boolean smoothing, int codec)
     {
-        super(_DefineVideo, anIdentifier);
+        super(DefineVideo, anIdentifier);
         setFrameCount(count);
         setWidth(width);
         setHeight(height);

Modified: trunk/src/com/flagstone/transform/FSEnableDebugger.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnableDebugger.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSEnableDebugger.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -71,7 +71,7 @@
      */
     public FSEnableDebugger(FSCoder coder)
     {
-        super(_EnableDebugger);
+        super(EnableDebugger);
         decode(coder);
     }
     /** 
@@ -81,7 +81,7 @@
      */
     public FSEnableDebugger(String password)
     {
-        super(_EnableDebugger);
+        super(EnableDebugger);
         setPassword(password);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSEnableDebugger2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnableDebugger2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSEnableDebugger2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -68,7 +68,7 @@
      */
     public FSEnableDebugger2(FSCoder coder)
     {
-        super(_EnableDebugger2);
+        super(EnableDebugger2);
         decode(coder);
     }
     /** 
@@ -78,7 +78,7 @@
      */
     public FSEnableDebugger2(String password)
     {
-        super(_EnableDebugger2);
+        super(EnableDebugger2);
         setPassword(password);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSExceptionHandler.java
===================================================================
--- trunk/src/com/flagstone/transform/FSExceptionHandler.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSExceptionHandler.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -101,7 +101,7 @@
      */
     public FSExceptionHandler(FSCoder coder)
     {
-        super(_ExceptionHandler);
+        super(ExceptionHandler);
         decode(coder);
     }
     /**
@@ -114,7 +114,7 @@
      */
     public FSExceptionHandler(String name, ArrayList tryArray, ArrayList catchArray, ArrayList finallyArray)
     {
-        super(_ExceptionHandler);
+        super(ExceptionHandler);
     
         register = 0;
         variable = name;
@@ -133,7 +133,7 @@
      */
     public FSExceptionHandler(int index, ArrayList tryArray, ArrayList catchArray, ArrayList finallyArray)
     {
-        super(_ExceptionHandler);
+        super(ExceptionHandler);
     
         register = index;
         variable = null;

Modified: trunk/src/com/flagstone/transform/FSExport.java
===================================================================
--- trunk/src/com/flagstone/transform/FSExport.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSExport.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -80,7 +80,7 @@
         
     FSExport()
     {
-        super(_Export);
+        super(Export);
     }
     /**
      * Construct an FSExport object, initalizing it with values decoded from an
@@ -90,7 +90,7 @@
      */
     public FSExport(FSCoder coder)
     {
-        super(_Export);
+        super(Export);
         decode(coder);
     }
     /** Constructs an FSExport object that exports the object with the specified identifier. The exported object is assigned the specified name to allow it to be referenced in files importing the object. 
@@ -100,7 +100,7 @@
         */
     public FSExport(int anIdentifier, String aString)
     {
-        super(_Export);
+        super(Export);
         add(anIdentifier, aString);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSFontInfo2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFontInfo2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSFontInfo2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -87,7 +87,7 @@
      */
     public FSFontInfo2(FSCoder coder)
     {
-        super(_FontInfo2);
+        super(FontInfo2);
         decode(coder);
     }
     /**  Constructs a basic FSFontInfo2 object specifying only the name of the font.
@@ -97,7 +97,7 @@
         */
     public FSFontInfo2(int anIdentifier, String aName)
     {
-        super(_FontInfo2);
+        super(FontInfo2);
         setIdentifier(anIdentifier);
         setName(aName);
     }

Modified: trunk/src/com/flagstone/transform/FSFrameLabel.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFrameLabel.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSFrameLabel.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -159,7 +159,7 @@
         
     FSFrameLabel()
     {
-        super(_FrameLabel);
+        super(FrameLabel);
     }
 
     /**
@@ -170,7 +170,7 @@
      */
     public FSFrameLabel(FSCoder coder)
     {
-        super(_FrameLabel);
+        super(FrameLabel);
         decode(coder);
     }
     /** Constructs an FSFrameLabel object with the specified name. 
@@ -179,7 +179,7 @@
         */
     public FSFrameLabel(String aString)
     {
-        super(_FrameLabel);
+        super(FrameLabel);
         setLabel(aString);
     }
 // Flash 6
@@ -192,7 +192,7 @@
      */
     public FSFrameLabel(String aString, boolean isAnchor)
     {
-        super(_FrameLabel);
+        super(FrameLabel);
         setLabel(aString);
         setAnchor(isAnchor);
     }

Modified: trunk/src/com/flagstone/transform/FSFree.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFree.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSFree.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -65,7 +65,7 @@
      */
     public FSFree(FSCoder coder)
     {
-        super(_Free);
+        super(Free);
         decode(coder);
     }
     /** Constructs an FSFree object with the specified identifier. The identifier must be in the range 1..65535.
@@ -74,7 +74,7 @@
         */
     public FSFree(int anIdentifier)
     {
-        super(_Free);
+        super(Free);
         setIdentifier(anIdentifier);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSGetUrl2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGetUrl2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSGetUrl2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -184,7 +184,7 @@
      */
     public FSGetUrl2(FSCoder coder)
     {
-        super(_GetUrl2);
+        super(GetUrl2);
         decode(coder);
     }
     /** Constructs an FSGetUrl2 using the specified request type. 
@@ -193,7 +193,7 @@
         */
     public FSGetUrl2(int aType)
     {
-        super(_GetUrl2);
+        super(GetUrl2);
         setRequestType(aType);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSGotoFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGotoFrame.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSGotoFrame.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -91,7 +91,7 @@
      */
     public FSGotoFrame(FSCoder coder)
     {
-        super(_GotoFrame);
+        super(GotoFrame);
         decode(coder);
     }
     /** Constructs an FSGotoFrame with the specified frame number. The frame number must be in the range 1..65535.
@@ -100,7 +100,7 @@
         */
     public FSGotoFrame(int aNumber)
     {
-        super(_GotoFrame);
+        super(GotoFrame);
         setFrameNumber(aNumber);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSGotoFrame2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGotoFrame2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSGotoFrame2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -152,7 +152,7 @@
      */
     public FSGotoFrame2(FSCoder coder)
     {
-        super(_GotoFrame2);
+        super(GotoFrame2);
         decode(coder);
     }
     /** Constructs an FSGotoFrame2 object with the specified play flag setting. 
@@ -162,7 +162,7 @@
         */
     public FSGotoFrame2(boolean aBool)
     {
-        super(_GotoFrame2);
+        super(GotoFrame2);
         setPlayFrame(aBool);
     }
 // Flash 5
@@ -176,7 +176,7 @@
      */
     public FSGotoFrame2(int offset, boolean aBool)
     {
-        super(_GotoFrame2);
+        super(GotoFrame2);
         setPlayFrame(aBool);
         setFrameOffset(offset);
     }

Modified: trunk/src/com/flagstone/transform/FSGotoLabel.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGotoLabel.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSGotoLabel.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -87,7 +87,7 @@
     
     FSGotoLabel()
     {
-        super(_GotoLabel);
+        super(GotoLabel);
     }
     /**
      * Construct an FSGotoLabel object, initalizing it with values decoded from
@@ -97,7 +97,7 @@
      */
     public FSGotoLabel(FSCoder coder)
     {
-        super(_GotoLabel);
+        super(GotoLabel);
         decode(coder);
     }
     /** Constructs an FSGotoLabel action with the specified frame label. 
@@ -106,7 +106,7 @@
         */
     public FSGotoLabel(String aString)
     {
-        super(_GotoLabel);
+        super(GotoLabel);
         setLabel(aString);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSIf.java
===================================================================
--- trunk/src/com/flagstone/transform/FSIf.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSIf.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -83,7 +83,7 @@
      */
     public FSIf(FSCoder coder)
     {
-        super(_If);
+        super(If);
         decode(coder);
     }
     /** Constructs an if action with the specified offset. The offset must be in the range  -32768..32767.
@@ -92,7 +92,7 @@
         */    
     public FSIf(int anOffset)
     {
-        super(_If);
+        super(If);
         setOffset(anOffset);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSImport.java
===================================================================
--- trunk/src/com/flagstone/transform/FSImport.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSImport.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -91,7 +91,7 @@
         
     FSImport()
     {
-        super(_Import);
+        super(Import);
     }
     /**
      * Construct an FSImport object, initalizing it with values decoded from
@@ -101,7 +101,7 @@
      */
     public FSImport(FSCoder coder)
     {
-        super(_Import);
+        super(Import);
         decode(coder);
     }
     /** Constructs an FSImport object that imports an object from the specified file. The exported object is referenced by a name assigned to it when it was exported. The newly imported object must be assigned an identifier that is unique within the movie the object is imported into. Limited security is provided by requiring that the URL must be in the same domain or sub-domain as the URL of the movie which contains this object.
@@ -112,7 +112,7 @@
         */
     public FSImport(String aUrl, int anIdentifier, String aString)
     {
-        super(_Import);
+        super(Import);
         setUrl(aUrl);
         add(anIdentifier, aString);
     }

Modified: trunk/src/com/flagstone/transform/FSInitialize.java
===================================================================
--- trunk/src/com/flagstone/transform/FSInitialize.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSInitialize.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -99,7 +99,7 @@
      */
     public FSInitialize(FSCoder coder)
     {
-        super(_Initialize);
+        super(Initialize);
         decode(coder);
     }
     /**  
@@ -111,7 +111,7 @@
      */
     public FSInitialize(int anIdentifier, ArrayList anArray)
     {
-        super(_Initialize);
+        super(Initialize);
         setIdentifier(anIdentifier);
         setActions(anArray);
     }
@@ -124,7 +124,7 @@
      */
     public FSInitialize(int anIdentifier, byte[] bytes)
     {
-        super(_Initialize);
+        super(Initialize);
         setIdentifier(anIdentifier);
         setEncodedActions(bytes);
     }

Modified: trunk/src/com/flagstone/transform/FSJump.java
===================================================================
--- trunk/src/com/flagstone/transform/FSJump.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSJump.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -76,7 +76,7 @@
      */
     public FSJump(FSCoder coder)
     {
-        super(_Jump);
+        super(Jump);
         decode(coder);
     }
     /** Constructs an FSJump action with the specified offset. The offset must be in the range -32768..32767.
@@ -85,7 +85,7 @@
         */
     public FSJump(int anOffset)
     {
-        super(_Jump);
+        super(Jump);
         setOffset(anOffset);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSLimitScript.java
===================================================================
--- trunk/src/com/flagstone/transform/FSLimitScript.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSLimitScript.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -74,7 +74,7 @@
      */
     public FSLimitScript(FSCoder coder)
     {
-        super(_LimitScript);
+        super(LimitScript);
         decode(coder);
     }
     /**
@@ -86,7 +86,7 @@
      */
     public FSLimitScript(int depth, int timeout)
     {
-        super(_LimitScript);
+        super(LimitScript);
         setDepth(depth);
         setTimeout(timeout);
     }

Modified: trunk/src/com/flagstone/transform/FSMovieObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovieObject.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSMovieObject.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -155,57 +155,6 @@
     /// Type used to identify TabOrder objects.
     public static final int TabOrder             = 66;
 
-    static final int _ShowFrame            = 1;
-    static final int _DefineShape          = 2;
-    static final int _Free                 = 3;
-    static final int _PlaceObject          = 4;
-    static final int _RemoveObject         = 5;
-    static final int _DefineJPEGImage      = 6;
-    static final int _DefineButton         = 7;
-    static final int _JPEGTables           = 8;
-    static final int _SetBackgroundColor   = 9;
-    static final int _DefineFont           = 10;
-    static final int _DefineText           = 11;
-    static final int _DoAction             = 12;
-    static final int _FontInfo             = 13;
-    static final int _DefineSound          = 14;
-    static final int _StartSound           = 15;
-    static final int _SoundStreamHead      = 18;
-    static final int _SoundStreamBlock     = 19;
-    static final int _ButtonSound          = 17;
-    static final int _DefineImage          = 20;
-    static final int _DefineJPEGImage2     = 21;
-    static final int _DefineShape2         = 22;
-    static final int _ButtonColorTransform = 23;
-    static final int _Protect              = 24;
-    static final int _PlaceObject2         = 26;
-    static final int _RemoveObject2        = 28;
-    static final int _DefineShape3         = 32;
-    static final int _DefineText2          = 33;
-    static final int _DefineButton2        = 34;
-    static final int _DefineJPEGImage3     = 35;
-    static final int _DefineImage2         = 36;
-    static final int _DefineMovieClip      = 39;
-    static final int _FrameLabel           = 43;
-    static final int _SoundStreamHead2     = 45;
-    static final int _DefineMorphShape     = 46;
-    static final int _DefineFont2          = 48;
-    static final int _PathsArePostscript   = 25;
-    static final int _DefineTextField      = 37;
-    static final int _QuicktimeMovie       = 38;
-    static final int _SerialNumber         = 41;
-    static final int _Export               = 56;
-    static final int _Import               = 57;
-    static final int _EnableDebugger       = 58;
-    static final int _Initialize           = 59;
-    static final int _DefineVideo          = 60;
-    static final int _VideoFrame           = 61;
-    static final int _FontInfo2            = 62;
-    static final int _EnableDebugger2      = 64;
-    static final int _LimitScript          = 65;
-    static final int _TabOrder             = 66;
-    static final int _DefineBitsPtr        = 1023;
-
     protected int type = 0;
     protected int length = 0;
     protected boolean extendLength = false;

Modified: trunk/src/com/flagstone/transform/FSNewFunction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNewFunction.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSNewFunction.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -151,7 +151,7 @@
     
     FSNewFunction()
     {
-        super(_NewFunction);
+        super(NewFunction);
     }
     /**
      * Construct an FSNewFunction object, initalizing it with values decoded 
@@ -161,7 +161,7 @@
      */
     public FSNewFunction(FSCoder coder)
     {
-        super(_NewFunction);
+        super(NewFunction);
         decode(coder);
     }
     /** Constructs an FSNewFunction with the specified name, argument names and actions to be executed. The order of the Strings in the argument array indicate the order in which the values will be popped off the stack when the function is executed. The fist argument is popped from the stack first.
@@ -172,7 +172,7 @@
         */
     public FSNewFunction(String aString, ArrayList argumentArray, ArrayList actionArray)
     {
-        super(_NewFunction);
+        super(NewFunction);
         setName(aString);
         setArguments(argumentArray);
         setActions(actionArray);
@@ -184,7 +184,7 @@
         */
     public FSNewFunction(ArrayList argumentArray, ArrayList actionArray)
     {
-        super(_NewFunction);
+        super(NewFunction);
         setArguments(argumentArray);
         setActions(actionArray);
     }

Modified: trunk/src/com/flagstone/transform/FSNewFunction2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNewFunction2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSNewFunction2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -243,7 +243,7 @@
      */
     public FSNewFunction2(FSCoder coder)
     {
-        super(_NewFunction2);
+        super(NewFunction2);
         decode(coder);
     }
     /** 
@@ -258,7 +258,7 @@
         */
     public FSNewFunction2(String name, ArrayList arguments, ArrayList actions)
     {
-        super(_NewFunction2);
+        super(NewFunction2);
         setName(name);
         setArguments(arguments);
         setActions(actions);
@@ -273,7 +273,7 @@
         */
     public FSNewFunction2(ArrayList arguments, ArrayList actions)
     {
-        super(_NewFunction2);
+        super(NewFunction2);
         setArguments(arguments);
         setActions(actions);
     }

Modified: trunk/src/com/flagstone/transform/FSPathsArePostscript.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPathsArePostscript.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSPathsArePostscript.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -71,13 +71,13 @@
      */
     public FSPathsArePostscript(FSCoder coder)
     {
-        super(_PathsArePostscript);
+        super(PathsArePostscript);
         decode(coder);
     }
     /** Constructs an FSPathsArePostscript object. */
     public FSPathsArePostscript()
     {
-        super(_PathsArePostscript);
+        super(PathsArePostscript);
     }
     /**
      * Constructs an FSPathsArePostscript object by copying values from an 

Modified: trunk/src/com/flagstone/transform/FSPlaceObject2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPlaceObject2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSPlaceObject2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -279,7 +279,7 @@
      */
     public FSPlaceObject2(FSCoder coder)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         decode(coder);
     }
     /** Constructs an FSPlaceObject2 object to place a new object on the display list at the coordinates on the screen.
@@ -291,7 +291,7 @@
         */
     public FSPlaceObject2(int anIdentifier, int aLayer, int xLocation, int yLocation)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.New);
         setIdentifier(anIdentifier);
         setLayer(aLayer);
@@ -308,7 +308,7 @@
         */
     public FSPlaceObject2(int anIdentifier, int aLayer, float aRatio, int xLocation, int yLocation)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.New);
         setIdentifier(anIdentifier);
         setLayer(aLayer);
@@ -324,7 +324,7 @@
         */
     public FSPlaceObject2(int anIdentifier, int aLayer, FSCoordTransform aTransform)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.New);
         setIdentifier(anIdentifier);
         setLayer(aLayer);
@@ -340,7 +340,7 @@
         */
     public FSPlaceObject2(int anIdentifier, int aLayer, FSCoordTransform aTransform, FSColorTransform aColorTransform)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.New);
         setIdentifier(anIdentifier);
         setLayer(aLayer);
@@ -358,7 +358,7 @@
         */
     public FSPlaceObject2(int anIdentifier, int aLayer, int aDepth, int xLocation, int yLocation)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.New);
         setIdentifier(anIdentifier);
         setLayer(aLayer);
@@ -377,7 +377,7 @@
         */
     public FSPlaceObject2(int anIdentifier, int aLayer, ArrayList anArray, String aName, int xLocation, int yLocation)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.New);
         setIdentifier(anIdentifier);
         setLayer(aLayer);
@@ -401,7 +401,7 @@
      */
     public FSPlaceObject2(int anIdentifier, int aLayer, byte[] bytes, String aName, int xLocation, int yLocation)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.New);
         setIdentifier(anIdentifier);
         setLayer(aLayer);
@@ -417,7 +417,7 @@
         */
     public FSPlaceObject2(int anIdentifier, int aLayer)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.Replace);
         setIdentifier(anIdentifier);
         setLayer(aLayer);
@@ -431,7 +431,7 @@
         */
     public FSPlaceObject2(int aLayer, int xLocation, int yLocation)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.Modify);
         setLayer(aLayer);
         setTransform(new FSCoordTransform(xLocation, yLocation));
@@ -444,7 +444,7 @@
         */
     public FSPlaceObject2(int aLayer, FSCoordTransform transform)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.Modify);
         setLayer(aLayer);
         setTransform(transform);
@@ -457,7 +457,7 @@
         */
     public FSPlaceObject2(int aLayer, FSColorTransform colorTransform)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.Modify);
         setLayer(aLayer);
         setColorTransform(colorTransform);
@@ -471,7 +471,7 @@
         */
     public FSPlaceObject2(int aLayer, FSCoordTransform transform, FSColorTransform colorTransform)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.Modify);
         setLayer(aLayer);
         setTransform(transform);
@@ -487,7 +487,7 @@
         */
     public FSPlaceObject2(int aLayer, float aRatio, int xLocation, int yLocation)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.Modify);
         setLayer(aLayer);
         setRatio(aRatio);
@@ -502,7 +502,7 @@
         */
     public FSPlaceObject2(int aLayer, float aRatio, FSCoordTransform transform)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(FSPlaceObject2.Modify);
         setLayer(aLayer);
         setRatio(aRatio);
@@ -519,7 +519,7 @@
      */
     public FSPlaceObject2(int aPlace, int anIdentifier, int aLayer, FSCoordTransform transform, FSColorTransform colorTransform)
     {
-        super(_PlaceObject2);
+        super(PlaceObject2);
         setPlaceType(aPlace);
         setIdentifier(anIdentifier);
         setLayer(aLayer);

Modified: trunk/src/com/flagstone/transform/FSPointer.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPointer.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSPointer.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -69,7 +69,7 @@
      */
     public FSPointer(FSCoder coder)
     {
-        super(_DefineBitsPtr);
+        super(DefineBitsPtr);
         decode(coder);
     }
     /** Constructs an FSPointer object, specifying the pointer.
@@ -78,7 +78,7 @@
         */
     public FSPointer(int aPointer)
     {
-        super(_DefineBitsPtr);
+        super(DefineBitsPtr);
         setPointer(aPointer);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSProtect.java
===================================================================
--- trunk/src/com/flagstone/transform/FSProtect.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSProtect.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -71,19 +71,19 @@
      */
     public FSProtect(FSCoder coder)
     {
-        super(_Protect);
+        super(Protect);
         decode(coder);
     }
     /** Constructs an Protect object. */
     public FSProtect()
     {
-        super(_Protect);
+        super(Protect);
     }
 
     /** Constructs an Protect object. */
     public FSProtect(String password)
     {
-        super(_Protect);
+        super(Protect);
         setPassword(password);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSPush.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPush.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSPush.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -234,13 +234,13 @@
      */
     public FSPush(FSCoder coder)
     {
-        super(_Push);
+        super(Push);
         decode(coder);
     }
     /** Constructs an FSPush action object with no values added. */
     public FSPush()
     {
-        super(_Push);
+        super(Push);
     }
 
     /** Constructs an FSPush action that will place the specified boolean value on the stack.
@@ -249,7 +249,7 @@
         */
     public FSPush(boolean aBoolean)
     {
-        super(_Push);
+        super(Push);
         add(aBoolean);
     }
 
@@ -259,7 +259,7 @@
         */
     public FSPush(int aNumber)
     {
-        super(_Push);
+        super(Push);
         add(aNumber);
     }
 
@@ -269,7 +269,7 @@
         */
     public FSPush(double aNumber)
     {
-        super(_Push);
+        super(Push);
         add(aNumber);
     }
 
@@ -279,7 +279,7 @@
         */
     public FSPush(FSNull nullValue)
     {
-        super(_Push);
+        super(Push);
         add(nullValue);
     }
 
@@ -289,7 +289,7 @@
         */    
     public FSPush(FSVoid voidValue)
     {
-        super(_Push);
+        super(Push);
         add(voidValue);
     }
 
@@ -299,7 +299,7 @@
         */    
     public FSPush(String aString)
     {
-        super(_Push);
+        super(Push);
         add(aString);
     }
 
@@ -309,7 +309,7 @@
         */    
     public FSPush(FSTableIndex anIndex)
     {
-        super(_Push);
+        super(Push);
         add(anIndex);
     }
 
@@ -319,7 +319,7 @@
         */
     public FSPush(FSRegisterIndex anIndex)
     {
-        super(_Push);
+        super(Push);
         add(anIndex);
     }
 
@@ -329,7 +329,7 @@
         */    
     public FSPush(ArrayList anArray)
     {
-        super(_Push);
+        super(Push);
         setValues(anArray);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSQuicktimeMovie.java
===================================================================
--- trunk/src/com/flagstone/transform/FSQuicktimeMovie.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSQuicktimeMovie.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -67,7 +67,7 @@
      */
     public FSQuicktimeMovie(FSCoder coder)
     {
-        super(_QuicktimeMovie);
+        super(QuicktimeMovie);
         decode(coder);
     }
     /** Constructs an FSQuicktimeMovie object referencing the specified file.
@@ -76,7 +76,7 @@
         */
     public FSQuicktimeMovie(String aString)
     {
-        super(_QuicktimeMovie);
+        super(QuicktimeMovie);
         setName(aString);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSRegisterCopy.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRegisterCopy.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSRegisterCopy.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -80,7 +80,7 @@
      */
     public FSRegisterCopy(FSCoder coder)
     {
-        super(_RegisterCopy);
+        super(RegisterCopy);
         decode(coder);
     }
     /** Constructs an FSRegisterCopy object with the register number.
@@ -89,7 +89,7 @@
         */
     public FSRegisterCopy(int anIndex)
     {
-        super(_RegisterCopy);
+        super(RegisterCopy);
         setRegisterNumber(anIndex);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSRemoveObject2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRemoveObject2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSRemoveObject2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -67,7 +67,7 @@
      */
     public FSRemoveObject2(FSCoder coder)
     {
-        super(_RemoveObject2);
+        super(RemoveObject2);
         decode(coder);
     }
     /** Constructs an FSRemoveObject2, specifying the layer in the display list where the object to be removed is currently displayed.
@@ -76,7 +76,7 @@
         */
     public FSRemoveObject2(int layer)
     {
-        super(_RemoveObject2);
+        super(RemoveObject2);
         setLayer(layer);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSSerialNumber.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSerialNumber.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSSerialNumber.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -72,7 +72,7 @@
      */
     public FSSerialNumber(FSCoder coder)
     {
-        super(_SerialNumber);
+        super(SerialNumber);
         decode(coder);
     }
     /** Constructs an FSSerialNumber action with the specified string. 
@@ -81,7 +81,7 @@
         */
     public FSSerialNumber(String aString)
     {
-        super(_SerialNumber);
+        super(SerialNumber);
         setSerialNumber(aString);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSSetTarget.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSetTarget.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSSetTarget.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -83,7 +83,7 @@
      */
     public FSSetTarget(FSCoder coder)
     {
-        super(_SetTarget);
+        super(SetTarget);
         decode(coder);
     }
     /** Constructs an FSSetTarget action that changes the context to the specified target.
@@ -92,7 +92,7 @@
         */
     public FSSetTarget(String aString)
     {
-        super(_SetTarget);
+        super(SetTarget);
         setTarget(aString);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSSoundStreamHead2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSoundStreamHead2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSSoundStreamHead2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -146,7 +146,7 @@
      */
     public FSSoundStreamHead2(FSCoder coder)
     {
-        super(_SoundStreamHead2);
+        super(SoundStreamHead2);
         decode(coder);
     }
     /** Constructs an FSSoundStreamHead2 object specifying all the parameters required to define the sound.
@@ -163,7 +163,7 @@
     */
     public FSSoundStreamHead2(int encoding, int playRate, int playChannels, int playSize, int streamingRate, int streamingChannels, int streamingSize, int streamingCount, int latency)
     {
-        super(_SoundStreamHead2);
+        super(SoundStreamHead2);
 
         setFormat(encoding);
 

Modified: trunk/src/com/flagstone/transform/FSTabOrder.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTabOrder.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSTabOrder.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -72,7 +72,7 @@
      */
     public FSTabOrder(FSCoder coder)
     {
-        super(_TabOrder);
+        super(TabOrder);
         decode(coder);
     }
 
@@ -85,7 +85,7 @@
      */
     public FSTabOrder(int layer, int index)
     {
-        super(_TabOrder);
+        super(TabOrder);
         setLayer(layer);
         setIndex(index);
     }

Modified: trunk/src/com/flagstone/transform/FSTable.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTable.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSTable.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -113,13 +113,13 @@
      */
     public FSTable(FSCoder coder)
     {
-        super(_Table);
+        super(Table);
         decode(coder);
     }
     /** Constructs an empty table. */
     public FSTable()
     {
-        super(_Table);
+        super(Table);
     }
     /** Constructs an FSTable object using the array of strings.
 
@@ -127,7 +127,7 @@
         */
     public FSTable(ArrayList anArray)
     {
-        super(_Table);
+        super(Table);
         setValues(anArray);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSVideoFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSVideoFrame.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSVideoFrame.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -80,7 +80,7 @@
      */
     public FSVideoFrame(FSCoder coder)
     {
-        super(_VideoFrame);
+        super(VideoFrame);
         decode(coder);
     }
     /**
@@ -94,7 +94,7 @@
      */
     public FSVideoFrame(int anIdentifier, int frameNumber, byte[] data)
     {
-        super(_VideoFrame);
+        super(VideoFrame);
         setIdentifier(identifier);
         setFrameNumber(frameNumber);
         setData(data);

Modified: trunk/src/com/flagstone/transform/FSWaitForFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSWaitForFrame.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSWaitForFrame.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -97,7 +97,7 @@
      */
     public FSWaitForFrame(FSCoder coder)
     {
-        super(_WaitForFrame);
+        super(WaitForFrame);
         decode(coder);
     }
     /** Constructs an FSWaitForFrame object with the specified frame number and the number of actions that will be executed when the frame is loaded.
@@ -107,7 +107,7 @@
         */
     public FSWaitForFrame(int aFrameNumber, int anActionCount)
     {
-        super(_WaitForFrame);
+        super(WaitForFrame);
         setFrameNumber(aFrameNumber);
         setActionCount(anActionCount);
     }

Modified: trunk/src/com/flagstone/transform/FSWaitForFrame2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSWaitForFrame2.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSWaitForFrame2.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -94,7 +94,7 @@
      */
     public FSWaitForFrame2(FSCoder coder)
     {
-        super(_WaitForFrame2);
+        super(WaitForFrame2);
         decode(coder);
     }
     /** Constructs an FSWaitForFrame2 object with the number of actions to execute if the frame has been loaded.
@@ -103,7 +103,7 @@
         */
     public FSWaitForFrame2(int aNumber)
     {
-        super(_WaitForFrame2);
+        super(WaitForFrame2);
         setActionCount(aNumber);
     }
     /**

Modified: trunk/src/com/flagstone/transform/FSWith.java
===================================================================
--- trunk/src/com/flagstone/transform/FSWith.java	2006-03-03 18:07:11 UTC (rev 107)
+++ trunk/src/com/flagstone/transform/FSWith.java	2006-03-03 18:30:42 UTC (rev 108)
@@ -99,7 +99,7 @@
      */
     public FSWith(FSCoder coder)
     {
-        super(_With);
+        super(With);
         decode(coder);
     }
     /** Constructs an FSWith object with an array of actions.
@@ -108,7 +108,7 @@
         */
     public FSWith(ArrayList anArray)
     {
-        super(_With);
+        super(With);
         setActions(anArray);
     }
     /**



From smackay at berlios.de  Fri Mar  3 19:52:11 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 3 Mar 2006 19:52:11 +0100
Subject: [Transform-svn] r109 - trunk/src/com/flagstone/transform
Message-ID: <200603031852.k23IqBeE029274@sheep.berlios.de>

Author: smackay
Date: 2006-03-03 19:51:55 +0100 (Fri, 03 Mar 2006)
New Revision: 109

Modified:
   trunk/src/com/flagstone/transform/FSBitmapFill.java
   trunk/src/com/flagstone/transform/FSButton.java
   trunk/src/com/flagstone/transform/FSButtonEvent.java
   trunk/src/com/flagstone/transform/FSButtonSound.java
   trunk/src/com/flagstone/transform/FSClipEvent.java
   trunk/src/com/flagstone/transform/FSColor.java
   trunk/src/com/flagstone/transform/FSDefineButton.java
   trunk/src/com/flagstone/transform/FSDefineButton2.java
   trunk/src/com/flagstone/transform/FSDefineFont2.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
   trunk/src/com/flagstone/transform/FSDoAction.java
   trunk/src/com/flagstone/transform/FSExceptionHandler.java
   trunk/src/com/flagstone/transform/FSGetUrl.java
   trunk/src/com/flagstone/transform/FSGradientFill.java
   trunk/src/com/flagstone/transform/FSInitialize.java
   trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java
   trunk/src/com/flagstone/transform/FSNewFunction.java
   trunk/src/com/flagstone/transform/FSNewFunction2.java
   trunk/src/com/flagstone/transform/FSPlaceObject2.java
   trunk/src/com/flagstone/transform/FSShapeStyle.java
   trunk/src/com/flagstone/transform/FSUnknownAction.java
   trunk/src/com/flagstone/transform/FSUnknownObject.java
Log:
cleaned up initialization of attributes.

Modified: trunk/src/com/flagstone/transform/FSBitmapFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSBitmapFill.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSBitmapFill.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -114,7 +114,7 @@
 public final class FSBitmapFill extends FSFillStyle
 {
     private int identifier = 0;
-    private FSCoordTransform transform = new FSCoordTransform(0,0);
+    private FSCoordTransform transform = null;
     
     /**
      * Construct an FSBitmapFill object an initialize it with values decoded 
@@ -257,6 +257,6 @@
         super.decode(coder);
 
         identifier = coder.readWord(2, false);
-        transform.decode(coder);
+        transform = new FSCoordTransform(coder);
     }
 }

Modified: trunk/src/com/flagstone/transform/FSButton.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButton.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSButton.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -174,8 +174,6 @@
         
         if (obj.colorTransform != null)
             colorTransform = new FSColorTransform(obj.colorTransform);
-        else
-            colorTransform = null;
     }
 
     /** Get the state(s) of the button when the shape is drawn.

Modified: trunk/src/com/flagstone/transform/FSButtonEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonEvent.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSButtonEvent.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -301,9 +301,7 @@
     public void setActions(ArrayList anArray)
     {
         actions = anArray;
-
-        if (encodedActions != null)
-            encodedActions = null;
+        encodedActions = null;
     }
 
     /** 
@@ -316,9 +314,7 @@
     public void setEncodedActions(byte[] bytes)
     {
         encodedActions = bytes;
-         
-        if (actions != null)
-            actions = null;
+        actions = null;
    }
 
     public Object clone()

Modified: trunk/src/com/flagstone/transform/FSButtonSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonSound.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSButtonSound.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -129,8 +129,6 @@
         {
             if (obj.sound[i] != null)
                 sound[i] = new FSSound(obj.sound[i]);
-            else
-                sound[i] = null;
         }
     }
 

Modified: trunk/src/com/flagstone/transform/FSClipEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSClipEvent.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSClipEvent.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -214,9 +214,7 @@
 
 
     private int event = 0;
-// Flash 6
-    private int keyCode = 0;
-// End Flash 6
+    private int keyCode = 0; // Flash 6+
     private ArrayList actions = null;
     private byte[] encodedActions = null;
     
@@ -369,9 +367,7 @@
     public void setActions(ArrayList anArray)
     {
         actions = anArray;
-
-        if (encodedActions != null)
-            encodedActions = null;
+        encodedActions = null;
     }
 
     /** Gets the array of actions that are executed by the movie clip in response to specified event(s).
@@ -398,9 +394,7 @@
     public void setEncodedActions(byte[] bytes)
     {
         encodedActions = bytes;
-         
-        if (actions != null)
-            actions = null;
+        actions = null;
    }
 
     public Object clone()

Modified: trunk/src/com/flagstone/transform/FSColor.java
===================================================================
--- trunk/src/com/flagstone/transform/FSColor.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSColor.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -87,9 +87,9 @@
  */
 public final class FSColor extends FSTransformObject
 {
-    private int red = 255;
-    private int green = 255;
-    private int blue = 255;
+    private int red = 0;
+    private int green = 0;
+    private int blue = 0;
     private int alpha = 255;
 
     /**

Modified: trunk/src/com/flagstone/transform/FSDefineButton.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSDefineButton.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -272,9 +272,7 @@
     public void setActions(ArrayList anArray)
     {
         actions = anArray;
-
-        if (encodedActions != null)
-            encodedActions = null;
+        encodedActions = null;
     }
 
     /** 
@@ -288,9 +286,7 @@
     public void setEncodedActions(byte[] bytes)
     {
         encodedActions = bytes;
-         
-        if (actions != null)
-            actions = null;
+        actions = null;
    }
 
     public Object clone()

Modified: trunk/src/com/flagstone/transform/FSDefineButton2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton2.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSDefineButton2.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -218,10 +218,8 @@
         if (buttonEvents == null)
             buttonEvents = new ArrayList();
             
-        if (encodedEvents != null)
-            encodedEvents = null;
-            
         buttonEvents.add(aButtonEvent); 
+        encodedEvents = null;
     }
 
     /** Gets the button type - push or menu.
@@ -284,9 +282,7 @@
     public void setEncodedEvents(byte[] bytes)
     {
         encodedEvents = bytes;
-         
-        if (buttonEvents != null)
-            buttonEvents = null;
+        buttonEvents = null;
     }
 
     public Object clone()

Modified: trunk/src/com/flagstone/transform/FSDefineFont2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineFont2.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSDefineFont2.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -237,10 +237,6 @@
             for (Iterator i = obj.advances.iterator(); i.hasNext();)
                 advances.add(new Integer(((Integer)i.next()).intValue()));
         }
-        else
-        {
-            advances = null;
-        }
 
         if (bounds != null)
         {
@@ -249,10 +245,6 @@
             for (Iterator i = obj.bounds.iterator(); i.hasNext();)
                 bounds.add(((FSBounds)i.next()).clone());
         }
-        else
-        {
-            bounds = null;
-        }
 
         if (kernings != null)
         {
@@ -261,10 +253,6 @@
             for (Iterator i = obj.kernings.iterator(); i.hasNext();)
                 kernings.add(((FSKerning)i.next()).clone());
         }
-        else
-        {
-            kernings = null;
-        }
     }
 
     /** Add a shape to the array of shapes.

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -94,7 +94,7 @@
 {
     private byte[] image = null;
     private byte[] encodingTable = new byte[] { 
-        (byte)0xFF, (byte)0xD9, (byte)0xFF, (byte)0xD8 
+        (byte)0xFF, (byte)0xD8, (byte)0xFF, (byte)0xD9 
     };
 
     /**

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -118,7 +118,7 @@
 {
     private byte[] image = null;
     private byte[] encodingTable = new byte[] { 
-        (byte)0xFF, (byte)0xD9, (byte)0xFF, (byte)0xD8 
+        (byte)0xFF, (byte)0xD8, (byte)0xFF, (byte)0xD9 
     };
     private byte[] alpha = null;
 

Modified: trunk/src/com/flagstone/transform/FSDoAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDoAction.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSDoAction.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -176,9 +176,7 @@
     public void setActions(ArrayList anArray)
     {
         actions = anArray;
-
-        if (encodedActions != null)
-            encodedActions = null;
+        encodedActions = null;
     }
 
     /** 
@@ -191,9 +189,7 @@
     public void setEncodedActions(byte[] bytes)
     {
         encodedActions = bytes;
-        
-        if (actions != null)
-            actions = null;
+        actions = null;
     }
 
     public Object clone()

Modified: trunk/src/com/flagstone/transform/FSExceptionHandler.java
===================================================================
--- trunk/src/com/flagstone/transform/FSExceptionHandler.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSExceptionHandler.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -154,8 +154,6 @@
         
         if (obj.variable != null)
             variable = new String(obj.variable);
-        else
-            variable = null;
         
         tryActions = new ArrayList(obj.tryActions.size());
         
@@ -169,10 +167,6 @@
             for (Iterator i = obj.catchActions.iterator(); i.hasNext();)
                 catchActions.add(((FSActionObject)i.next()).clone());
         }
-        else
-        {
-            catchActions = null;
-        }
         
         if (obj.finalActions != null)
         {
@@ -181,10 +175,6 @@
             for (Iterator i = obj.finalActions.iterator(); i.hasNext();)
                 finalActions.add(((FSActionObject)i.next()).clone());
         }
-        else
-        {
-            finalActions = null;
-        }
     }    
 
     /** Adds the action object to the array of actions for the try block.

Modified: trunk/src/com/flagstone/transform/FSGetUrl.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGetUrl.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSGetUrl.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -176,11 +176,7 @@
     {
         super(obj);
         url = new String(obj.url);
-        
-        if (obj.target != null)
-            target = new String(obj.target);
-        else
-            target = null;
+        target = new String(obj.target);
     }    
 
     /** Gets the URL. 

Modified: trunk/src/com/flagstone/transform/FSGradientFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGradientFill.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSGradientFill.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -122,7 +122,7 @@
 public final class FSGradientFill extends FSFillStyle
 {
     private FSCoordTransform transform = null;
-    private ArrayList gradients = new ArrayList();
+    private ArrayList gradients = null;
     
     /**
      * Construct an FSGradientFill object, initalizing it with values decoded 
@@ -283,6 +283,8 @@
 
         transform = new FSCoordTransform(coder);
         count = coder.readWord(1, false);
+        
+        gradients = new ArrayList(count);
 
         for (int i=0; i<count; i++)
             gradients.add(new FSGradient(coder));

Modified: trunk/src/com/flagstone/transform/FSInitialize.java
===================================================================
--- trunk/src/com/flagstone/transform/FSInitialize.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSInitialize.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -207,9 +207,7 @@
     public void setActions(ArrayList anArray)
     {
         actions = anArray;
-
-        if (encodedActions != null)
-            encodedActions = null;
+        encodedActions = null;
     }
 
     /** 
@@ -222,9 +220,7 @@
     public void setEncodedActions(byte[] bytes)
     {
         encodedActions = bytes;
-         
-        if (actions != null)
-            actions = null;
+        actions = null;
     }
 
     public Object clone()

Modified: trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java
===================================================================
--- trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -123,8 +123,6 @@
         
         if (obj.encodingTable != null)
             encodingTable = Transform.clone(obj.encodingTable);
-        else
-            encodingTable = null;
     }    
 
     /** Gets the encoding table.

Modified: trunk/src/com/flagstone/transform/FSNewFunction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNewFunction.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSNewFunction.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -200,8 +200,6 @@
 
         if (obj.name != null)
             name = new String(obj.name);
-        else
-            name = null;
         
         if (obj.arguments != null)
         {

Modified: trunk/src/com/flagstone/transform/FSNewFunction2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNewFunction2.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSNewFunction2.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -289,8 +289,6 @@
 
         if (obj.name != null)
             name = new String(obj.name);
-        else
-            name = null;
         
         registerCount = obj.registerCount;
         optimizations = obj.optimizations;

Modified: trunk/src/com/flagstone/transform/FSPlaceObject2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPlaceObject2.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSPlaceObject2.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -574,12 +574,9 @@
         if (clipEvents == null)
             clipEvents = new ArrayList();
             
-        if (encodedEvents != null)
-            encodedEvents = null;
-            
         clipEvents.add(aClipEvent);
+        encodedEvents = null;
     }
-
     /** 
      * Gets the array of FSClipEvent object that define the actions that will be 
      * executed in response to events that occur in the FSDefineMovieClip being placed.
@@ -618,9 +615,7 @@
     public void setEncodedEvents(byte[] bytes)
     {
         encodedEvents = bytes;
-         
-        if (clipEvents != null)
-           clipEvents = null;
+        clipEvents = null;
     }
 
     /** Gets the type of place operation being performed.

Modified: trunk/src/com/flagstone/transform/FSShapeStyle.java
===================================================================
--- trunk/src/com/flagstone/transform/FSShapeStyle.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSShapeStyle.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -339,10 +339,6 @@
             for (Iterator i = obj.fillStyles.iterator(); i.hasNext();)
                 fillStyles.add(((FSFillStyle)i.next()).clone());
         }
-        else
-        {
-            fillStyles = null;
-        }
 
         if (obj.lineStyles != null)
         {
@@ -351,10 +347,6 @@
             for (Iterator i = obj.lineStyles.iterator(); i.hasNext();)
                 lineStyles.add(((FSLineStyle)i.next()).clone());
         }
-        else
-        {
-            fillStyles = null;
-        }
     }    
 
     /** Add a FSSolidLine object to the array of line styles.

Modified: trunk/src/com/flagstone/transform/FSUnknownAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSUnknownAction.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSUnknownAction.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -90,8 +90,6 @@
         
         if (obj.data != null)
             data = Transform.clone(obj.data);
-        else
-            data = null;
     }    
 
     /** Gets the encoded data for the action.

Modified: trunk/src/com/flagstone/transform/FSUnknownObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSUnknownObject.java	2006-03-03 18:30:42 UTC (rev 108)
+++ trunk/src/com/flagstone/transform/FSUnknownObject.java	2006-03-03 18:51:55 UTC (rev 109)
@@ -90,8 +90,6 @@
         
         if (obj.data != null)
             data = Transform.clone(obj.data);
-        else
-            data = null;
     }    
 
     /** Gets the encoded data for the tag.



From smackay at berlios.de  Fri Mar  3 20:01:19 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 3 Mar 2006 20:01:19 +0100
Subject: [Transform-svn] r110 - in trunk: doc src/com/flagstone/transform
Message-ID: <200603031901.k23J1Jr3000864@sheep.berlios.de>

Author: smackay
Date: 2006-03-03 19:59:51 +0100 (Fri, 03 Mar 2006)
New Revision: 110

Modified:
   trunk/doc/CHANGES.txt
   trunk/src/com/flagstone/transform/FSAction.java
   trunk/src/com/flagstone/transform/FSActionObject.java
   trunk/src/com/flagstone/transform/FSBitmapFill.java
   trunk/src/com/flagstone/transform/FSBounds.java
   trunk/src/com/flagstone/transform/FSButton.java
   trunk/src/com/flagstone/transform/FSButtonColorTransform.java
   trunk/src/com/flagstone/transform/FSButtonEvent.java
   trunk/src/com/flagstone/transform/FSButtonSound.java
   trunk/src/com/flagstone/transform/FSCall.java
   trunk/src/com/flagstone/transform/FSCharacter.java
   trunk/src/com/flagstone/transform/FSClipEvent.java
   trunk/src/com/flagstone/transform/FSColorTransform.java
   trunk/src/com/flagstone/transform/FSCoordTransform.java
   trunk/src/com/flagstone/transform/FSCurve.java
   trunk/src/com/flagstone/transform/FSDefineButton.java
   trunk/src/com/flagstone/transform/FSDefineButton2.java
   trunk/src/com/flagstone/transform/FSDefineFont.java
   trunk/src/com/flagstone/transform/FSDefineFont2.java
   trunk/src/com/flagstone/transform/FSDefineImage.java
   trunk/src/com/flagstone/transform/FSDefineImage2.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
   trunk/src/com/flagstone/transform/FSDefineMorphShape.java
   trunk/src/com/flagstone/transform/FSDefineMovieClip.java
   trunk/src/com/flagstone/transform/FSDefineObject.java
   trunk/src/com/flagstone/transform/FSDefineShape.java
   trunk/src/com/flagstone/transform/FSDefineShape2.java
   trunk/src/com/flagstone/transform/FSDefineShape3.java
   trunk/src/com/flagstone/transform/FSDefineSound.java
   trunk/src/com/flagstone/transform/FSDefineText.java
   trunk/src/com/flagstone/transform/FSDefineText2.java
   trunk/src/com/flagstone/transform/FSDefineTextField.java
   trunk/src/com/flagstone/transform/FSDefineVideo.java
   trunk/src/com/flagstone/transform/FSDoAction.java
   trunk/src/com/flagstone/transform/FSEnableDebugger.java
   trunk/src/com/flagstone/transform/FSEnableDebugger2.java
   trunk/src/com/flagstone/transform/FSEnvelope.java
   trunk/src/com/flagstone/transform/FSExceptionHandler.java
   trunk/src/com/flagstone/transform/FSExport.java
   trunk/src/com/flagstone/transform/FSFillStyle.java
   trunk/src/com/flagstone/transform/FSFontInfo.java
   trunk/src/com/flagstone/transform/FSFontInfo2.java
   trunk/src/com/flagstone/transform/FSFrameLabel.java
   trunk/src/com/flagstone/transform/FSFree.java
   trunk/src/com/flagstone/transform/FSGetUrl.java
   trunk/src/com/flagstone/transform/FSGetUrl2.java
   trunk/src/com/flagstone/transform/FSGotoFrame.java
   trunk/src/com/flagstone/transform/FSGotoFrame2.java
   trunk/src/com/flagstone/transform/FSGotoLabel.java
   trunk/src/com/flagstone/transform/FSGradient.java
   trunk/src/com/flagstone/transform/FSGradientFill.java
   trunk/src/com/flagstone/transform/FSIf.java
   trunk/src/com/flagstone/transform/FSImport.java
   trunk/src/com/flagstone/transform/FSInitialize.java
   trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java
   trunk/src/com/flagstone/transform/FSJump.java
   trunk/src/com/flagstone/transform/FSKerning.java
   trunk/src/com/flagstone/transform/FSLimitScript.java
   trunk/src/com/flagstone/transform/FSLine.java
   trunk/src/com/flagstone/transform/FSMorphBitmapFill.java
   trunk/src/com/flagstone/transform/FSMorphGradient.java
   trunk/src/com/flagstone/transform/FSMorphGradientFill.java
   trunk/src/com/flagstone/transform/FSMorphSolidFill.java
   trunk/src/com/flagstone/transform/FSMorphSolidLine.java
   trunk/src/com/flagstone/transform/FSMovie.java
   trunk/src/com/flagstone/transform/FSMovieObject.java
   trunk/src/com/flagstone/transform/FSNewFunction.java
   trunk/src/com/flagstone/transform/FSNewFunction2.java
   trunk/src/com/flagstone/transform/FSNull.java
   trunk/src/com/flagstone/transform/FSPathsArePostscript.java
   trunk/src/com/flagstone/transform/FSPlaceObject.java
   trunk/src/com/flagstone/transform/FSPlaceObject2.java
   trunk/src/com/flagstone/transform/FSPointer.java
   trunk/src/com/flagstone/transform/FSProperty.java
   trunk/src/com/flagstone/transform/FSProtect.java
   trunk/src/com/flagstone/transform/FSPush.java
   trunk/src/com/flagstone/transform/FSQuicktimeMovie.java
   trunk/src/com/flagstone/transform/FSRegisterCopy.java
   trunk/src/com/flagstone/transform/FSRegisterIndex.java
   trunk/src/com/flagstone/transform/FSRegisterVariable.java
   trunk/src/com/flagstone/transform/FSRemoveObject.java
   trunk/src/com/flagstone/transform/FSRemoveObject2.java
   trunk/src/com/flagstone/transform/FSSerialNumber.java
   trunk/src/com/flagstone/transform/FSSetBackgroundColor.java
   trunk/src/com/flagstone/transform/FSSetTarget.java
   trunk/src/com/flagstone/transform/FSShape.java
   trunk/src/com/flagstone/transform/FSShapeStyle.java
   trunk/src/com/flagstone/transform/FSShowFrame.java
   trunk/src/com/flagstone/transform/FSSolidFill.java
   trunk/src/com/flagstone/transform/FSSolidLine.java
   trunk/src/com/flagstone/transform/FSSound.java
   trunk/src/com/flagstone/transform/FSSoundStreamBlock.java
   trunk/src/com/flagstone/transform/FSSoundStreamHead.java
   trunk/src/com/flagstone/transform/FSSoundStreamHead2.java
   trunk/src/com/flagstone/transform/FSStartSound.java
   trunk/src/com/flagstone/transform/FSTabOrder.java
   trunk/src/com/flagstone/transform/FSTable.java
   trunk/src/com/flagstone/transform/FSTableIndex.java
   trunk/src/com/flagstone/transform/FSText.java
   trunk/src/com/flagstone/transform/FSTransformObject.java
   trunk/src/com/flagstone/transform/FSUnknownAction.java
   trunk/src/com/flagstone/transform/FSUnknownObject.java
   trunk/src/com/flagstone/transform/FSVideoFrame.java
   trunk/src/com/flagstone/transform/FSVoid.java
   trunk/src/com/flagstone/transform/FSWaitForFrame.java
   trunk/src/com/flagstone/transform/FSWaitForFrame2.java
   trunk/src/com/flagstone/transform/FSWith.java
Log:
Methods used to encode and decode objects:
   
    int length(FSCoder)
    void decode(FSCoder)
    void encode(FSCoder)
          
along with the construtor <class>(FSCoder) are all "upgraded" to 
public to support testing.


Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/doc/CHANGES.txt	2006-03-03 18:59:51 UTC (rev 110)
@@ -17,6 +17,17 @@
     
     * Removed private copies of constants used to identify different types of 
       object. This was left over from supporting different versions of Flash.
+      
+    * cleaned up initialization of attributes.
+    
+    * Methods used to encode and decode objects:
+   
+          int length(FSCoder)
+          void decode(FSCoder)
+          void encode(FSCoder)
+          
+      along with the construtor <class>(FSCoder) are all "upgraded" to public
+      to support testing.
 
 2006-03-01 - smackay at flagstonesoftware.com
 

Modified: trunk/src/com/flagstone/transform/FSAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSAction.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSAction.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -1056,13 +1056,13 @@
         buffer.append(name());
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         coder.endObject(name());

Modified: trunk/src/com/flagstone/transform/FSActionObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSActionObject.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSActionObject.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -147,14 +147,14 @@
         return result;
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         length = 0;
         
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.beginObject(name());
         coder.writeWord(type, 1);
@@ -163,7 +163,7 @@
             coder.writeWord(length, 2);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         coder.beginObject(name());
         

Modified: trunk/src/com/flagstone/transform/FSBitmapFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSBitmapFill.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSBitmapFill.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -234,7 +234,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = super.length(coder);
 
@@ -244,7 +244,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
 
@@ -252,7 +252,7 @@
         transform.encode(coder);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
 

Modified: trunk/src/com/flagstone/transform/FSBounds.java
===================================================================
--- trunk/src/com/flagstone/transform/FSBounds.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSBounds.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -311,7 +311,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int numberOfBits = 0;
         int fieldSize = FSCoder.size(new int[]{minX, maxX, minY, maxY}, true);
@@ -322,7 +322,7 @@
         return numberOfBits>>3; 
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         int numberOfBits = FSCoder.size(new int[]{minX, maxX, minY, maxY}, true);
         
@@ -335,7 +335,7 @@
         coder.alignToByte();
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         coder.alignToByte();
         

Modified: trunk/src/com/flagstone/transform/FSButton.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButton.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSButton.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -331,7 +331,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = 0;
     
@@ -344,7 +344,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.writeBits(0, 4);
         coder.writeBits(state, 4);
@@ -357,7 +357,7 @@
 // End Flash 3
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         coder.readBits(4, false);
         

Modified: trunk/src/com/flagstone/transform/FSButtonColorTransform.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonColorTransform.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSButtonColorTransform.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -173,7 +173,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -183,7 +183,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -192,7 +192,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSButtonEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonEvent.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSButtonEvent.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -378,7 +378,7 @@
         }
     }
     
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = 2;
     
@@ -401,7 +401,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.writeWord(event, 2);
 
@@ -438,7 +438,7 @@
         coder.writeWord(0, 1);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         event = coder.readWord(2, false);
         

Modified: trunk/src/com/flagstone/transform/FSButtonSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonSound.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSButtonSound.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -255,7 +255,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
     
@@ -272,7 +272,7 @@
         return length;
     }
 
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -288,7 +288,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
 

Modified: trunk/src/com/flagstone/transform/FSCall.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCall.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSCall.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -101,18 +101,18 @@
         buffer.append(name());
     }
     
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         return super.length(coder);
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         coder.endObject(name());

Modified: trunk/src/com/flagstone/transform/FSCharacter.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCharacter.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSCharacter.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -215,7 +215,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int numberOfGlyphBits = coder.context[FSCoder.NumberOfGlyphBits];
         int numberOfAdvanceBits = coder.context[FSCoder.NumberOfAdvanceBits];
@@ -223,13 +223,13 @@
         return numberOfGlyphBits + numberOfAdvanceBits;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.writeBits(glyphIndex, coder.context[FSCoder.NumberOfGlyphBits]);
         coder.writeBits(advance, coder.context[FSCoder.NumberOfAdvanceBits]);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int numberOfGlyphBits = coder.context[FSCoder.NumberOfGlyphBits];
         int numberOfAdvanceBits = coder.context[FSCoder.NumberOfAdvanceBits];

Modified: trunk/src/com/flagstone/transform/FSClipEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSClipEvent.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSClipEvent.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -462,7 +462,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = 4 + ((coder.context[FSCoder.Version] > 5) ? 4 : 2);
     
@@ -489,7 +489,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         int eventSize = (coder.context[FSCoder.Version] > 5) ? 4 : 2;
         
@@ -555,7 +555,7 @@
         coder.writeWord(0, 1);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int eventSize = (coder.context[FSCoder.Version] > 5) ? 4 : 2;
 

Modified: trunk/src/com/flagstone/transform/FSColorTransform.java
===================================================================
--- trunk/src/com/flagstone/transform/FSColorTransform.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSColorTransform.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -592,7 +592,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int numberOfBits = 6;
         int fieldSize = fieldSize(coder);
@@ -610,7 +610,7 @@
         return numberOfBits>>3;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         int numberOfBits = fieldSize(coder);
         boolean containsMultiplyTerms = containsMultiplyTerms(coder);
@@ -643,7 +643,7 @@
         coder.alignToByte();
     }
      
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         boolean containsAddTerms = false;
         boolean containsMultiplyTerms = false;

Modified: trunk/src/com/flagstone/transform/FSCoordTransform.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCoordTransform.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSCoordTransform.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -384,7 +384,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int numberOfBits = 7 + translateFieldSize()*2;
     
@@ -399,7 +399,7 @@
         return numberOfBits>>3;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         int translateBits = translateFieldSize();
         
@@ -433,7 +433,7 @@
         coder.alignToByte();
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int scaleFieldSize = 0;
         int rotateFieldSize = 0;

Modified: trunk/src/com/flagstone/transform/FSCurve.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCurve.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSCurve.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -278,7 +278,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int numberOfBits = 6;
 
@@ -291,7 +291,7 @@
         return numberOfBits;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         int _fieldSize = FSCoder.size(new int[]{controlX, controlY, anchorX, anchorY, 1}, true);
         
@@ -304,7 +304,7 @@
         coder.writeBits(anchorY, _fieldSize);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int fieldSize = 0;
         

Modified: trunk/src/com/flagstone/transform/FSDefineButton.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineButton.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -352,7 +352,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
     
@@ -380,7 +380,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -422,7 +422,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSDefineButton2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineButton2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -349,7 +349,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {    
         super.length(coder);
     
@@ -379,7 +379,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         int offsetStart = 0;
         int offsetEnd = 0;
@@ -432,7 +432,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int actionsOffset = 0;
         

Modified: trunk/src/com/flagstone/transform/FSDefineFont.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineFont.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineFont.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -168,7 +168,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
     
@@ -186,7 +186,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
 
@@ -220,7 +220,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         shapes = new ArrayList();
         

Modified: trunk/src/com/flagstone/transform/FSDefineFont2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineFont2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineFont2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -676,7 +676,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         boolean wideOffsets = wideOffsetsForIndexedArray(shapes, coder);
         int wideCodes = 0;
@@ -721,7 +721,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         boolean wideOffsets = wideOffsetsForIndexedArray(shapes, coder);
         int wideCodes = 0;
@@ -817,7 +817,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         boolean containsWideOffsets = false;
         boolean containsWideCodes = false;

Modified: trunk/src/com/flagstone/transform/FSDefineImage.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineImage.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineImage.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -303,7 +303,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -314,7 +314,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.beginObject(name());
 
@@ -343,7 +343,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSDefineImage2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineImage2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineImage2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -289,7 +289,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -300,7 +300,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.beginObject(name());
 
@@ -326,7 +326,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -177,7 +177,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
     
@@ -186,14 +186,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeBytes(image);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);    
         byte[] data = new byte[length-2];    

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -210,7 +210,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -220,7 +220,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeBytes(encodingTable);
@@ -228,7 +228,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {        
         super.decode(coder);
         setEncodingTable(readJPEGStream(coder));

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -247,7 +247,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
     
@@ -260,7 +260,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -274,7 +274,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSDefineMorphShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineMorphShape.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineMorphShape.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -410,7 +410,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int numberOfFillBits = FSCoder.size(fillStyles.size(), false);
         int numberOfLineBits = FSCoder.size(lineStyles.size(), false);
@@ -451,7 +451,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         int numberOfFillBits = FSCoder.size(fillStyles.size(), false);
         int numberOfLineBits = FSCoder.size(lineStyles.size(), false);
@@ -518,7 +518,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int fillStyleCount = 0;
         int lineStyleCount = 0;

Modified: trunk/src/com/flagstone/transform/FSDefineMovieClip.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineMovieClip.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineMovieClip.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -190,7 +190,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
             
@@ -207,7 +207,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -217,7 +217,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
 

Modified: trunk/src/com/flagstone/transform/FSDefineObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineObject.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineObject.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -82,7 +82,7 @@
         Transform.append(buffer, "identifier", identifier);
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -91,14 +91,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
         coder.writeWord(identifier, 2);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSDefineShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineShape.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -319,7 +319,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int numberOfFillBits = FSCoder.size(fillStyles.size(), false);
         int numberOfLineBits = FSCoder.size(lineStyles.size(), false);
@@ -348,7 +348,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         int numberOfFillBits = FSCoder.size(fillStyles.size(), false);
         int numberOfLineBits = FSCoder.size(lineStyles.size(), false);
@@ -378,7 +378,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int fillStyleCount = 0;
         int lineStyleCount = 0;

Modified: trunk/src/com/flagstone/transform/FSDefineShape2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineShape2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -321,7 +321,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int numberOfFillBits = FSCoder.size(fillStyles.size(), false);
         int numberOfLineBits = FSCoder.size(lineStyles.size(), false);
@@ -352,7 +352,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         int numberOfFillBits = FSCoder.size(fillStyles.size(), false);
         int numberOfLineBits = FSCoder.size(lineStyles.size(), false);
@@ -400,7 +400,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int fillStyleCount = 0;
         int lineStyleCount = 0;

Modified: trunk/src/com/flagstone/transform/FSDefineShape3.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape3.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineShape3.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -314,7 +314,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int numberOfFillBits = FSCoder.size(fillStyles.size(), false);
         int numberOfLineBits = FSCoder.size(lineStyles.size(), false);
@@ -350,7 +350,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         int numberOfFillBits = FSCoder.size(fillStyles.size(), false);
         int numberOfLineBits = FSCoder.size(lineStyles.size(), false);
@@ -401,7 +401,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int fillStyleCount = 0;
         int lineStyleCount = 0;

Modified: trunk/src/com/flagstone/transform/FSDefineSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineSound.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineSound.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -326,7 +326,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
     
@@ -336,7 +336,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -365,7 +365,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSDefineText.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineText.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineText.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -279,7 +279,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -301,7 +301,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
 
@@ -324,7 +324,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int glyphBits = 0;
         int advanceBits = 0;

Modified: trunk/src/com/flagstone/transform/FSDefineText2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineText2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineText2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -276,7 +276,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -300,7 +300,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
 
@@ -325,7 +325,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int glyphBits = 0;
         int advanceBits = 0;

Modified: trunk/src/com/flagstone/transform/FSDefineTextField.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineTextField.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineTextField.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -938,7 +938,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         boolean _containsFont = containsFont();
         boolean _containsColor = containsColor();
@@ -963,7 +963,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         boolean _containsFont = containsFont();
         boolean _containsColor = containsColor();
@@ -1025,7 +1025,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         boolean _containsFont = false;
         boolean _containsColor = false;

Modified: trunk/src/com/flagstone/transform/FSDefineVideo.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineVideo.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDefineVideo.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -345,7 +345,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
     
@@ -354,7 +354,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -369,7 +369,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSDoAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDoAction.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSDoAction.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -247,7 +247,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -269,7 +269,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -306,7 +306,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSEnableDebugger.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnableDebugger.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSEnableDebugger.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -139,7 +139,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -148,7 +148,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -159,7 +159,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
 

Modified: trunk/src/com/flagstone/transform/FSEnableDebugger2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnableDebugger2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSEnableDebugger2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -136,7 +136,7 @@
         }
     }
 
-     int length(FSCoder coder)
+     public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -145,7 +145,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -156,7 +156,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
 

Modified: trunk/src/com/flagstone/transform/FSEnvelope.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnvelope.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSEnvelope.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -189,20 +189,20 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = 8;
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.writeWord(mark, 4);
         coder.writeWord(left, 2);
         coder.writeWord(right, 2);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         mark = coder.readWord(4, false);
         left = coder.readWord(2, false);

Modified: trunk/src/com/flagstone/transform/FSExceptionHandler.java
===================================================================
--- trunk/src/com/flagstone/transform/FSExceptionHandler.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSExceptionHandler.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -378,7 +378,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     { 
         super.length(coder);
         
@@ -417,7 +417,7 @@
         return length;
     }
         
-    void encode(FSCoder coder) 
+    public void encode(FSCoder coder) 
     {
         super.encode(coder);
 
@@ -551,7 +551,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         boolean containsVariable = false;
         boolean containsCatch = false;

Modified: trunk/src/com/flagstone/transform/FSExport.java
===================================================================
--- trunk/src/com/flagstone/transform/FSExport.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSExport.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -172,7 +172,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -188,7 +188,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
 
@@ -206,7 +206,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
 

Modified: trunk/src/com/flagstone/transform/FSFillStyle.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFillStyle.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSFillStyle.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -112,19 +112,19 @@
         return result;
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = 1;
     
          return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.writeWord(type, 1);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         type = coder.readWord(1, false);
     }

Modified: trunk/src/com/flagstone/transform/FSFontInfo.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFontInfo.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSFontInfo.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -355,7 +355,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -375,7 +375,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {    
         super.encode(coder);
         
@@ -395,7 +395,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int nameLength = 0;
        

Modified: trunk/src/com/flagstone/transform/FSFontInfo2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFontInfo2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSFontInfo2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -337,7 +337,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -349,7 +349,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {    
         super.encode(coder);
         
@@ -370,7 +370,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int nameLength = 0;
         

Modified: trunk/src/com/flagstone/transform/FSFrameLabel.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFrameLabel.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSFrameLabel.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -290,7 +290,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -303,7 +303,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeString(label);
@@ -316,7 +316,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
 

Modified: trunk/src/com/flagstone/transform/FSFree.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFree.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSFree.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -126,7 +126,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -135,14 +135,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeWord(identifier, 2);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);        
         identifier = coder.readWord(2, false);

Modified: trunk/src/com/flagstone/transform/FSGetUrl.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGetUrl.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSGetUrl.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -236,7 +236,7 @@
         }
     }
     
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -246,7 +246,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
 
@@ -258,7 +258,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         url = coder.readString();

Modified: trunk/src/com/flagstone/transform/FSGetUrl2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGetUrl2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSGetUrl2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -245,7 +245,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -254,14 +254,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeWord(requestType, 1);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         requestType = coder.readWord(1, false);

Modified: trunk/src/com/flagstone/transform/FSGotoFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGotoFrame.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSGotoFrame.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -152,7 +152,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -161,14 +161,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeWord(frameNumber, 2);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
 

Modified: trunk/src/com/flagstone/transform/FSGotoFrame2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGotoFrame2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSGotoFrame2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -259,7 +259,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -268,7 +268,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
 
@@ -284,7 +284,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         boolean containsOffset = false; 
         

Modified: trunk/src/com/flagstone/transform/FSGotoLabel.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGotoLabel.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSGotoLabel.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -158,7 +158,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -167,7 +167,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
 
@@ -176,7 +176,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         label = coder.readString();

Modified: trunk/src/com/flagstone/transform/FSGradient.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGradient.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSGradient.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -176,7 +176,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = 1;
     
@@ -185,13 +185,13 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.writeWord(ratio, 1);
         color.encode(coder);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         ratio = coder.readWord(1, false);
         color = new FSColor(coder);

Modified: trunk/src/com/flagstone/transform/FSGradientFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGradientFill.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSGradientFill.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -251,7 +251,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = super.length(coder);
     
@@ -264,7 +264,7 @@
          return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -275,7 +275,7 @@
             ((FSTransformObject)gradientIterator.next()).encode(coder);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int count = 0;
         

Modified: trunk/src/com/flagstone/transform/FSIf.java
===================================================================
--- trunk/src/com/flagstone/transform/FSIf.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSIf.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -143,7 +143,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -152,14 +152,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeWord(offset, 2);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         offset = coder.readWord(2, true);

Modified: trunk/src/com/flagstone/transform/FSImport.java
===================================================================
--- trunk/src/com/flagstone/transform/FSImport.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSImport.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -211,7 +211,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -229,7 +229,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
            
@@ -250,7 +250,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSInitialize.java
===================================================================
--- trunk/src/com/flagstone/transform/FSInitialize.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSInitialize.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -277,7 +277,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -302,7 +302,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -343,7 +343,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
 

Modified: trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java
===================================================================
--- trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -174,7 +174,7 @@
         }        
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
     
@@ -183,7 +183,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -199,7 +199,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSJump.java
===================================================================
--- trunk/src/com/flagstone/transform/FSJump.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSJump.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -136,7 +136,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -145,14 +145,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeWord(offset, 2);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         offset = coder.readWord(2, true);

Modified: trunk/src/com/flagstone/transform/FSKerning.java
===================================================================
--- trunk/src/com/flagstone/transform/FSKerning.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSKerning.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -184,7 +184,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = (coder.context[FSCoder.WideCodes] != 0) ? 4 : 2;
     
@@ -193,7 +193,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         int numberOfBytes = (coder.context[FSCoder.WideCodes] != 0) ? 2 : 1;
     
@@ -202,7 +202,7 @@
         coder.writeWord(adjustment, 2);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int numberOfBytes = (coder.context[FSCoder.WideCodes] != 0) ? 2 : 1;
 

Modified: trunk/src/com/flagstone/transform/FSLimitScript.java
===================================================================
--- trunk/src/com/flagstone/transform/FSLimitScript.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSLimitScript.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -170,7 +170,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -179,7 +179,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -188,7 +188,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSLine.java
===================================================================
--- trunk/src/com/flagstone/transform/FSLine.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSLine.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -173,7 +173,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int numberOfBits = 7;
     
@@ -191,7 +191,7 @@
         return numberOfBits;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         boolean _containsGeneralLine = containsGeneralLine();
         boolean _containsVerticalLine = containsVerticalLine();
@@ -215,7 +215,7 @@
         } 
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         /* shapeType */ coder.readBits(1, false);
         /* edgeType */ coder.readBits(1, false);

Modified: trunk/src/com/flagstone/transform/FSMorphBitmapFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphBitmapFill.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSMorphBitmapFill.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -212,7 +212,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = super.length(coder);
 
@@ -223,7 +223,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeWord(identifier, 2);
@@ -231,7 +231,7 @@
         endTransform.encode(coder);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         identifier= coder.readWord(2, false);

Modified: trunk/src/com/flagstone/transform/FSMorphGradient.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphGradient.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSMorphGradient.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -232,7 +232,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = 2;
     
@@ -242,7 +242,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.writeWord(startRatio, 1);
         startColor.encode(coder);
@@ -250,7 +250,7 @@
         endColor.encode(coder);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         startRatio = coder.readWord(1, false);
         startColor = new FSColor(coder);

Modified: trunk/src/com/flagstone/transform/FSMorphGradientFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphGradientFill.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSMorphGradientFill.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -285,7 +285,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = super.length(coder);
     
@@ -299,7 +299,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         startTransform.encode(coder);
@@ -310,7 +310,7 @@
             ((FSTransformObject)gradientIterator.next()).encode(coder);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
 

Modified: trunk/src/com/flagstone/transform/FSMorphSolidFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphSolidFill.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSMorphSolidFill.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -182,7 +182,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = super.length(coder);
     
@@ -192,14 +192,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         startColor.encode(coder);
         endColor.encode(coder);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         startColor = new FSColor(coder);

Modified: trunk/src/com/flagstone/transform/FSMorphSolidLine.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphSolidLine.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSMorphSolidLine.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -233,7 +233,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = 4;
     
@@ -243,7 +243,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.writeWord(startWidth, 2);
         coder.writeWord(endWidth, 2);
@@ -251,7 +251,7 @@
         endColor.encode(coder);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         startWidth = coder.readWord(2, false);
         endWidth = coder.readWord(2, false);

Modified: trunk/src/com/flagstone/transform/FSMovie.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovie.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSMovie.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -1525,7 +1525,7 @@
         return len;
     }
 
-    private    int numberOfFrames()
+    private int numberOfFrames()
     {
         int numberOfFrames = 0;
 

Modified: trunk/src/com/flagstone/transform/FSMovieObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovieObject.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSMovieObject.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -223,7 +223,7 @@
         buffer.append(name());
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         coder.context[FSCoder.Type] = type;
         
@@ -232,7 +232,7 @@
         return length;
     }
 
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.beginObject(name());
 
@@ -249,7 +249,7 @@
         }
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         coder.beginObject(name());
 

Modified: trunk/src/com/flagstone/transform/FSNewFunction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNewFunction.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSNewFunction.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -347,7 +347,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     { 
         super.length(coder);
         
@@ -376,7 +376,7 @@
         return length;
     }
         
-    void encode(FSCoder coder) 
+    public void encode(FSCoder coder) 
     {
         coder.beginObject(name());
 
@@ -426,7 +426,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int argumentCount = 0;
         int bytesRead = 0;

Modified: trunk/src/com/flagstone/transform/FSNewFunction2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNewFunction2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSNewFunction2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -492,7 +492,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     { 
         super.length(coder);
         
@@ -518,7 +518,7 @@
         return length;
     }
         
-    void encode(FSCoder coder) 
+    public void encode(FSCoder coder) 
     {
         coder.beginObject(name());
 
@@ -565,7 +565,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int argumentCount = 0;
         int bytesRead = 0;

Modified: trunk/src/com/flagstone/transform/FSNull.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNull.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSNull.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -51,16 +51,16 @@
         buffer.append(name());
     }
 
-    int length(FSCoder coder) 
+    public int length(FSCoder coder) 
     { 
         return 0; 
     }
     
-    void encode(FSCoder coder) 
+    public void encode(FSCoder coder) 
     {
     }
     
-    void decode(FSCoder coder) 
+    public void decode(FSCoder coder) 
     {
     }
 }
\ No newline at end of file

Modified: trunk/src/com/flagstone/transform/FSPathsArePostscript.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPathsArePostscript.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSPathsArePostscript.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -95,14 +95,14 @@
         buffer.append(name());
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
             
         return length;
     }    
 
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.context[FSCoder.Empty] = 1;
         
@@ -112,7 +112,7 @@
         coder.endObject(name());
     }
 
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         coder.endObject(name());

Modified: trunk/src/com/flagstone/transform/FSPlaceObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPlaceObject.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSPlaceObject.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -304,7 +304,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         length += 4;
@@ -314,7 +314,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
 
@@ -328,7 +328,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int lengthRead = coder.getPointer();
         

Modified: trunk/src/com/flagstone/transform/FSPlaceObject2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPlaceObject2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSPlaceObject2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -853,7 +853,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -891,7 +891,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -966,7 +966,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         boolean containsClipEvents = false;
         boolean containsClippingDepth = false;

Modified: trunk/src/com/flagstone/transform/FSPointer.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPointer.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSPointer.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -133,7 +133,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         length += 4;
@@ -141,14 +141,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeWord(pointer, 4);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         pointer = coder.readWord(4, false);

Modified: trunk/src/com/flagstone/transform/FSProperty.java
===================================================================
--- trunk/src/com/flagstone/transform/FSProperty.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSProperty.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -96,18 +96,18 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     { 
         return 5;
     }
         
-    void encode(FSCoder coder) 
+    public void encode(FSCoder coder) 
     {
         coder.writeWord(1, 1);
         coder.writeWord(value, 4);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         /* type */ coder.readWord(1, false);
         value = coder.readWord(4, false);

Modified: trunk/src/com/flagstone/transform/FSProtect.java
===================================================================
--- trunk/src/com/flagstone/transform/FSProtect.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSProtect.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -139,7 +139,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -149,7 +149,7 @@
         return length;
     }    
 
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -163,7 +163,7 @@
          coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSPush.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPush.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSPush.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -510,7 +510,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -546,7 +546,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
 
@@ -611,7 +611,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSQuicktimeMovie.java
===================================================================
--- trunk/src/com/flagstone/transform/FSQuicktimeMovie.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSQuicktimeMovie.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -134,7 +134,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -143,7 +143,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeString(name);
@@ -151,7 +151,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         name = coder.readString();

Modified: trunk/src/com/flagstone/transform/FSRegisterCopy.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRegisterCopy.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSRegisterCopy.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -144,7 +144,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -153,13 +153,13 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeWord(registerNumber, 1);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         registerNumber = coder.readWord(1, false);

Modified: trunk/src/com/flagstone/transform/FSRegisterIndex.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRegisterIndex.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSRegisterIndex.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -134,18 +134,18 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     { 
         return 2;
     }
         
-    void encode(FSCoder coder) 
+    public void encode(FSCoder coder) 
     {
         coder.writeWord(4, 1);
         coder.writeWord(index, 1);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         /* type */ coder.readWord(1, false);
         index = coder.readWord(1, false);

Modified: trunk/src/com/flagstone/transform/FSRegisterVariable.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRegisterVariable.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSRegisterVariable.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -145,7 +145,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = 1;
         
@@ -154,14 +154,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.writeWord(index, 1);
         coder.writeString(name);
         coder.writeWord(0, 1);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         index = coder.readWord(1, false);
         name = coder.readString();

Modified: trunk/src/com/flagstone/transform/FSRemoveObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRemoveObject.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSRemoveObject.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -187,7 +187,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         length += 4;
@@ -195,7 +195,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeWord(identifier, 2);
@@ -203,7 +203,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         identifier = coder.readWord(2, false);

Modified: trunk/src/com/flagstone/transform/FSRemoveObject2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRemoveObject2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSRemoveObject2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -131,7 +131,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         length += 2;
@@ -139,14 +139,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeWord(layer, 2);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         layer = coder.readWord(2, false);

Modified: trunk/src/com/flagstone/transform/FSSerialNumber.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSerialNumber.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSSerialNumber.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -139,7 +139,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
@@ -148,7 +148,7 @@
         return length;
     }    
 
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
            coder.writeString(serialNumber);
@@ -156,7 +156,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         serialNumber = coder.readString();

Modified: trunk/src/com/flagstone/transform/FSSetBackgroundColor.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSetBackgroundColor.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSSetBackgroundColor.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -152,7 +152,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -161,14 +161,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         color.encode(coder);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         color = new FSColor(coder);

Modified: trunk/src/com/flagstone/transform/FSSetTarget.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSetTarget.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSSetTarget.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -144,7 +144,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -153,7 +153,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
 
@@ -162,7 +162,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         target = coder.readString();

Modified: trunk/src/com/flagstone/transform/FSShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSShape.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSShape.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -203,7 +203,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int numberOfBits = 0;
         
@@ -227,7 +227,7 @@
         return numberOfBits>>3;
     }
 
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         if (objects != null)
         {      
@@ -246,7 +246,7 @@
         }
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         if (coder.context[FSCoder.DecodeShapes] == 1)
         {

Modified: trunk/src/com/flagstone/transform/FSShapeStyle.java
===================================================================
--- trunk/src/com/flagstone/transform/FSShapeStyle.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSShapeStyle.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -564,7 +564,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         boolean _containsStyles = containsStyles();
         boolean _containsLineStyle = containsLineStyle();
@@ -621,7 +621,7 @@
         return numberOfBits;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         boolean _containsStyles = containsStyles();
         boolean _containsLineStyle = containsLineStyle();
@@ -701,7 +701,7 @@
         }
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         boolean containsStyles = false;
         boolean containsLineStyle = false;

Modified: trunk/src/com/flagstone/transform/FSShowFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSShowFrame.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSShowFrame.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -127,14 +127,14 @@
         buffer.append(name());
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
 
         return length;
     }    
 
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.context[FSCoder.Empty] = 1;
         super.encode(coder);
@@ -142,7 +142,7 @@
         coder.endObject(name());
     }
 
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         coder.endObject(name());

Modified: trunk/src/com/flagstone/transform/FSSolidFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSolidFill.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSSolidFill.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -182,7 +182,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = super.length(coder);
     
@@ -191,13 +191,13 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         color.encode(coder);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         color = new FSColor(coder);

Modified: trunk/src/com/flagstone/transform/FSSolidLine.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSolidLine.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSSolidLine.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -199,7 +199,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         int length = 2;
     
@@ -208,13 +208,13 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         coder.writeWord(width, 2);
         color.encode(coder);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         width = coder.readWord(2, false);
         color = new FSColor(coder);

Modified: trunk/src/com/flagstone/transform/FSSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSound.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSSound.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -366,7 +366,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         boolean _containsInPoint = containsInPoint();
         boolean _containsOutPoint = containsOutPoint();
@@ -384,7 +384,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         boolean _containsInPoint = containsInPoint();
         boolean _containsOutPoint = containsOutPoint();
@@ -413,7 +413,7 @@
         }
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         boolean _containsInPoint = false;
         boolean _containsOutPoint = false;

Modified: trunk/src/com/flagstone/transform/FSSoundStreamBlock.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSoundStreamBlock.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSSoundStreamBlock.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -151,7 +151,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -160,14 +160,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeBytes(soundData);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         soundData = new byte[length];

Modified: trunk/src/com/flagstone/transform/FSSoundStreamHead.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSoundStreamHead.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSSoundStreamHead.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -373,7 +373,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
     
@@ -385,7 +385,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -436,7 +436,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSSoundStreamHead2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSoundStreamHead2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSSoundStreamHead2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -386,7 +386,7 @@
          }
      }
 
-     int length(FSCoder coder)
+     public int length(FSCoder coder)
      {
          super.length(coder);
     
@@ -398,7 +398,7 @@
          return length;
      }
     
-     void encode(FSCoder coder)
+     public void encode(FSCoder coder)
      {
          super.encode(coder);
         
@@ -449,7 +449,7 @@
          coder.endObject(name());
      }
     
-     void decode(FSCoder coder)
+     public void decode(FSCoder coder)
      {
          super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSStartSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSStartSound.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSStartSound.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -140,7 +140,7 @@
         }
     }
     
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         length += sound.length(coder);
@@ -148,14 +148,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         sound.encode(coder);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);        
         sound = new FSSound(coder);

Modified: trunk/src/com/flagstone/transform/FSTabOrder.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTabOrder.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSTabOrder.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -168,7 +168,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -177,7 +177,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -186,7 +186,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSTable.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTable.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSTable.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -207,7 +207,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -219,7 +219,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
 
@@ -236,7 +236,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
 

Modified: trunk/src/com/flagstone/transform/FSTableIndex.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTableIndex.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSTableIndex.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -148,12 +148,12 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     { 
         return index < 256 ? 2 : 3;
     }
         
-    void encode(FSCoder coder) 
+    public void encode(FSCoder coder) 
     {
         int type = index < 256 ? 8 : 9;
         
@@ -161,7 +161,7 @@
         coder.writeWord(index, type == 8 ? 1 : 2);
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int type = coder.readWord(1, false);
         

Modified: trunk/src/com/flagstone/transform/FSText.java
===================================================================
--- trunk/src/com/flagstone/transform/FSText.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSText.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -465,7 +465,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         boolean _containsFont = containsFont();
         boolean _containsColor = containsColor();
@@ -498,7 +498,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         boolean _containsFont = containsFont();
         boolean _containsColor = containsColor();
@@ -541,7 +541,7 @@
         }
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         /* type */ coder.readBits(1, false);
         /* reserved */ coder.readBits(3, false);

Modified: trunk/src/com/flagstone/transform/FSTransformObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTransformObject.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSTransformObject.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -128,7 +128,7 @@
     */
     public abstract void appendDescription(StringBuffer buffer, int depth);
     
-    abstract int length(FSCoder coder);
-    abstract void encode(FSCoder coder);
-    abstract void decode(FSCoder coder);
+    abstract public int length(FSCoder coder);
+    abstract public void encode(FSCoder coder);
+    abstract public void decode(FSCoder coder);
 }
\ No newline at end of file

Modified: trunk/src/com/flagstone/transform/FSUnknownAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSUnknownAction.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSUnknownAction.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -137,7 +137,7 @@
         buffer.append(name());
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -146,14 +146,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeBytes(data);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSUnknownObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSUnknownObject.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSUnknownObject.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -137,7 +137,7 @@
         buffer.append(name());
     }
     
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -146,14 +146,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeBytes(data);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         data = new byte[length];

Modified: trunk/src/com/flagstone/transform/FSVideoFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSVideoFrame.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSVideoFrame.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -216,7 +216,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
     
@@ -225,7 +225,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         
@@ -236,7 +236,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         

Modified: trunk/src/com/flagstone/transform/FSVoid.java
===================================================================
--- trunk/src/com/flagstone/transform/FSVoid.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSVoid.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -53,16 +53,16 @@
         buffer.append(name());
     }
 
-    int length(FSCoder coder) 
+    public int length(FSCoder coder) 
     { 
         return 0; 
     }
     
-    void encode(FSCoder coder) 
+    public void encode(FSCoder coder) 
     {
     }
     
-    void decode(FSCoder coder) 
+    public void decode(FSCoder coder) 
     {
     }
 }
\ No newline at end of file

Modified: trunk/src/com/flagstone/transform/FSWaitForFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSWaitForFrame.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSWaitForFrame.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -181,7 +181,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -190,7 +190,7 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeWord(frameNumber, 2);
@@ -198,7 +198,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         frameNumber = coder.readWord(2, false);

Modified: trunk/src/com/flagstone/transform/FSWaitForFrame2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSWaitForFrame2.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSWaitForFrame2.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -155,7 +155,7 @@
         }
     }
 
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     {
         super.length(coder);
         
@@ -164,14 +164,14 @@
         return length;
     }
     
-    void encode(FSCoder coder)
+    public void encode(FSCoder coder)
     {
         super.encode(coder);
         coder.writeWord(actionCount, 1);
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         super.decode(coder);
         actionCount = coder.readWord(1, false);

Modified: trunk/src/com/flagstone/transform/FSWith.java
===================================================================
--- trunk/src/com/flagstone/transform/FSWith.java	2006-03-03 18:51:55 UTC (rev 109)
+++ trunk/src/com/flagstone/transform/FSWith.java	2006-03-03 18:59:51 UTC (rev 110)
@@ -184,7 +184,7 @@
         }
     }
     
-    int length(FSCoder coder)
+    public int length(FSCoder coder)
     { 
         super.length(coder);
         
@@ -204,7 +204,7 @@
         return length;
     }
         
-    void encode(FSCoder coder) 
+    public void encode(FSCoder coder) 
     {
         coder.beginObject(name());
      
@@ -238,7 +238,7 @@
         coder.endObject(name());
     }
     
-    void decode(FSCoder coder)
+    public void decode(FSCoder coder)
     {
         int bytesRead = 0;
         



From smackay at berlios.de  Sun Mar  5 11:56:10 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Sun, 5 Mar 2006 11:56:10 +0100
Subject: [Transform-svn] r111 - in trunk: doc src/com/flagstone/transform
Message-ID: <200603051056.k25AuArq028948@sheep.berlios.de>

Author: smackay
Date: 2006-03-05 11:55:58 +0100 (Sun, 05 Mar 2006)
New Revision: 111

Modified:
   trunk/doc/CHANGES.txt
   trunk/src/com/flagstone/transform/FSAction.java
   trunk/src/com/flagstone/transform/FSActionObject.java
   trunk/src/com/flagstone/transform/FSCall.java
   trunk/src/com/flagstone/transform/FSMovie.java
   trunk/src/com/flagstone/transform/FSNull.java
   trunk/src/com/flagstone/transform/FSPathsArePostscript.java
   trunk/src/com/flagstone/transform/FSPush.java
   trunk/src/com/flagstone/transform/FSShowFrame.java
   trunk/src/com/flagstone/transform/FSVoid.java
Log:
Added canonical version of objects that can be safely shared since 
they contain no editable attributes: FSNull, FSVoid, FSAction, 
FSCall, FSShowFrame, FSPathsArePostscript.

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-03 18:59:51 UTC (rev 110)
+++ trunk/doc/CHANGES.txt	2006-03-05 10:55:58 UTC (rev 111)
@@ -1,5 +1,11 @@
 2006-03-03 - smackay at flagstonesoftware.com
 
+    * Added canonical version of objects that can be safely shared since they
+      contain no editable attributes: FSNull, FSVoid, FSAction, FSCall, 
+      FSShowFrame, FSPathsArePostscript.
+
+2006-03-03 - smackay at flagstonesoftware.com
+
     * Updated FSMovieText.java and added a new test folder, benchmarks, for 
       holding TestNG files to run performance test on Transform classes.
       

Modified: trunk/src/com/flagstone/transform/FSAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSAction.java	2006-03-03 18:59:51 UTC (rev 110)
+++ trunk/src/com/flagstone/transform/FSAction.java	2006-03-05 10:55:58 UTC (rev 111)
@@ -849,166 +849,299 @@
         "",  // 127
     };
 
+    private static final FSAction[] actions = {
+        null,
+        null,
+        null,
+        null,
+        new FSAction(FSAction.NextFrame),        // 4;
+        new FSAction(FSAction.PrevFrame),        // 5;
+        new FSAction(FSAction.Play),             // 6;
+        new FSAction(FSAction.Stop),             // 7;
+        new FSAction(FSAction.ToggleQuality),    // 8;
+        new FSAction(FSAction.StopSounds),       // 9;
+        new FSAction(FSAction.IntegerAdd),       // 10;
+        new FSAction(FSAction.Subtract),         // 11;
+        new FSAction(FSAction.Multiply),         // 12;
+        new FSAction(FSAction.Divide),           // 13;
+        new FSAction(FSAction.IntegerEquals),    // 14;
+        new FSAction(FSAction.IntegerLess),      // 15;
+        new FSAction(FSAction.And),              // 16;
+        new FSAction(FSAction.Or),               // 17;
+        new FSAction(FSAction.Not),              // 18;
+        new FSAction(FSAction.StringEquals),     // 19;
+        new FSAction(FSAction.StringLength),     // 20;
+        new FSAction(FSAction.StringExtract),    // 21;
+        null, 
+        new FSAction(FSAction.Pop),              // 23;
+        new FSAction(FSAction.ToInteger),        // 24;
+        null,
+        null, 
+        null,
+        new FSAction(FSAction.GetVariable),      // 28;
+        new FSAction(FSAction.SetVariable),      // 29;
+        null,
+        null,
+        new FSAction(FSAction.SetTarget2),       // 32;
+        new FSAction(FSAction.StringAdd),        // 33;
+        new FSAction(FSAction.GetProperty),      // 34;
+        new FSAction(FSAction.SetProperty),      // 35;
+        new FSAction(FSAction.CloneSprite),      // 36;
+        new FSAction(FSAction.RemoveSprite),     // 37;
+        new FSAction(FSAction.Trace),            // 38;
+        new FSAction(FSAction.StartDrag),        // 39;
+        new FSAction(FSAction.EndDrag),          // 40;
+        new FSAction(FSAction.StringLess),       // 41;
+        new FSAction(FSAction.Throw),            // 42;
+        new FSAction(FSAction.Cast),             // 43;
+        new FSAction(FSAction.Implements),       // 44;
+        null,
+        null,
+        null,
+        new FSAction(FSAction.RandomNumber),     // 48;
+        new FSAction(FSAction.MBStringLength),   // 49;
+        new FSAction(FSAction.CharToAscii),      // 50;
+        new FSAction(FSAction.AsciiToChar),      // 51;
+        new FSAction(FSAction.GetTime),          // 52;
+        new FSAction(FSAction.MBStringExtract),  // 53;
+        new FSAction(FSAction.MBCharToAscii),    // 54;
+        new FSAction(FSAction.MBAsciiToChar),    // 55;
+        null,
+        null,
+        new FSAction(FSAction.DeleteVariable),   // 58;
+        new FSAction(FSAction.Delete),            // 59;
+        new FSAction(FSAction.InitVariable),     // 60;
+        new FSAction(FSAction.ExecuteFunction),  // 61;
+        new FSAction(FSAction.Return),           // 62;
+        new FSAction(FSAction.Modulo),           // 63;
+        new FSAction(FSAction.NamedObject),      // 64;
+        new FSAction(FSAction.NewVariable),      // 65;
+        new FSAction(FSAction.NewArray),         // 66;
+        new FSAction(FSAction.NewObject),        // 67;
+        new FSAction(FSAction.GetType),          // 68;
+        new FSAction(FSAction.GetTarget),        // 69;
+        new FSAction(FSAction.Enumerate),        // 70;
+        new FSAction(FSAction.Add),              // 71;
+        new FSAction(FSAction.Less),             // 72;
+        new FSAction(FSAction.Equals),           // 73;
+        new FSAction(FSAction.ToNumber),         // 74;
+        new FSAction(FSAction.ToString),         // 75;
+        new FSAction(FSAction.Duplicate),        // 76;
+        new FSAction(FSAction.Swap),             // 77;
+        new FSAction(FSAction.GetAttribute),     // 78;
+        new FSAction(FSAction.SetAttribute),     // 79;
+        new FSAction(FSAction.Increment),        // 80;
+        new FSAction(FSAction.Decrement),        // 81;
+        new FSAction(FSAction.ExecuteMethod),    // 82;
+        new FSAction(FSAction.NewMethod),        // 83;
+        new FSAction(FSAction.InstanceOf),       // 84;
+        new FSAction(FSAction.EnumerateObject),  // 85;
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        new FSAction(FSAction.BitwiseAnd),           // 96;
+        new FSAction(FSAction.BitwiseOr),            // 97;
+        new FSAction(FSAction.BitwiseXOr),           // 98;
+        new FSAction(FSAction.LogicalShiftLeft),     // 99;
+        new FSAction(FSAction.ArithmeticShiftRight), // 100;
+        new FSAction(FSAction.LogicalShiftRight),    // 101;
+        new FSAction(FSAction.StrictEquals),         // 102;
+        new FSAction(FSAction.Greater),              // 103;
+        new FSAction(FSAction.StringGreater),        // 104;
+        new FSAction(FSAction.Extends),              // 105;
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,
+        null,  // 127
+    };
+
+    static FSAction getInstance(int type) { return actions[type]; }
+
     /** Factory method for generating an FSAction object representing a NextFrame action. */
-    public static FSAction NextFrame() { return new FSAction(FSAction.NextFrame); }
+    public static FSAction NextFrame() { return actions[FSAction.NextFrame]; }
     /** Factory method for generating an FSAction object representing a PrevFrame action. */
-    public static FSAction PrevFrame() { return new FSAction(FSAction.PrevFrame); }
+    public static FSAction PrevFrame() { return actions[FSAction.PrevFrame]; }
     /** Factory method for generating an FSAction object representing a Play action. */
-    public static FSAction Play() { return new FSAction(FSAction.Play); }
+    public static FSAction Play() { return actions[FSAction.Play]; }
     /** Factory method for generating an FSAction object representing a Stop action. */
-    public static FSAction Stop() { return new FSAction(FSAction.Stop); }
+    public static FSAction Stop() { return actions[FSAction.Stop]; }
     /** Factory method for generating an FSAction object representing a ToggleQuality action. */
-    public static FSAction ToggleQuality() { return new FSAction(FSAction.ToggleQuality); }
+    public static FSAction ToggleQuality() { return actions[FSAction.ToggleQuality]; }
     /** Factory method for generating an FSAction object representing a StopSounds action. */
-    public static FSAction StopSounds() { return new FSAction(FSAction.StopSounds); }
+    public static FSAction StopSounds() { return actions[FSAction.StopSounds]; }
 // Flash 4    
     /// Factory method for generating an FSAction object representing a Subtract action.
-    public static FSAction Subtract() { return new FSAction(FSAction.Subtract); }
+    public static FSAction Subtract() { return actions[FSAction.Subtract]; }
     /// Factory method for generating an FSAction object representing a Multiply action.
-    public static FSAction Multiply() { return new FSAction(FSAction.Multiply); }
+    public static FSAction Multiply() { return actions[FSAction.Multiply]; }
     /// Factory method for generating an FSAction object representing a Divide action.
-    public static FSAction Divide() { return new FSAction(FSAction.Divide); }
+    public static FSAction Divide() { return actions[FSAction.Divide]; }
     /// Factory method for generating an FSAction object representing a And action.
-    public static FSAction And() { return new FSAction(FSAction.And); }
+    public static FSAction And() { return actions[FSAction.And]; }
     /// Factory method for generating an FSAction object representing a Or action.
-    public static FSAction Or() { return new FSAction(FSAction.Or); }
+    public static FSAction Or() { return actions[FSAction.Or]; }
     /// Factory method for generating an FSAction object representing a Not action.
-    public static FSAction Not() { return new FSAction(FSAction.Not); }
+    public static FSAction Not() { return actions[FSAction.Not]; }
     /// Factory method for generating an FSAction object representing a StringEquals action.
-    public static FSAction StringEquals() { return new FSAction(FSAction.StringEquals); }
+    public static FSAction StringEquals() { return actions[FSAction.StringEquals]; }
     /// Factory method for generating an FSAction object representing a StringLength action.
-    public static FSAction StringLength() { return new FSAction(FSAction.StringLength); }
+    public static FSAction StringLength() { return actions[FSAction.StringLength]; }
     /// Factory method for generating an FSAction object representing a StringExtract action.
-    public static FSAction StringExtract() { return new FSAction(FSAction.StringExtract); }
+    public static FSAction StringExtract() { return actions[FSAction.StringExtract]; }
     /// Factory method for generating an FSAction object representing a Pop action.
-    public static FSAction Pop() { return new FSAction(FSAction.Pop); }
+    public static FSAction Pop() { return actions[FSAction.Pop]; }
     /// Factory method for generating an FSAction object representing a ToInteger action.
-    public static FSAction ToInteger() { return new FSAction(FSAction.ToInteger); }
+    public static FSAction ToInteger() { return actions[FSAction.ToInteger]; }
     /// Factory method for generating an FSAction object representing a GetVariable action.
-    public static FSAction GetVariable() { return new FSAction(FSAction.GetVariable); }
+    public static FSAction GetVariable() { return actions[FSAction.GetVariable]; }
     /// Factory method for generating an FSAction object representing a SetVariable action.
-    public static FSAction SetVariable() { return new FSAction(FSAction.SetVariable); }
+    public static FSAction SetVariable() { return actions[FSAction.SetVariable]; }
     /// Factory method for generating an FSAction object representing a SetTarget2 action.
-    public static FSAction SetTarget2() { return new FSAction(FSAction.SetTarget2); }
+    public static FSAction SetTarget2() { return actions[FSAction.SetTarget2]; }
     /// Factory method for generating an FSAction object representing a StringAdd action.
-    public static FSAction StringAdd() { return new FSAction(FSAction.StringAdd); }
+    public static FSAction StringAdd() { return actions[FSAction.StringAdd]; }
     /// Factory method for generating an FSAction object representing a GetProperty action.
-    public static FSAction GetProperty() { return new FSAction(FSAction.GetProperty); }
+    public static FSAction GetProperty() { return actions[FSAction.GetProperty]; }
     /// Factory method for generating an FSAction object representing a SetProperty action.
-    public static FSAction SetProperty() { return new FSAction(FSAction.SetProperty); }
+    public static FSAction SetProperty() { return actions[FSAction.SetProperty]; }
     /// Factory method for generating an FSAction object representing a CloneSprite action.
-    public static FSAction CloneSprite() { return new FSAction(FSAction.CloneSprite); }
+    public static FSAction CloneSprite() { return actions[FSAction.CloneSprite]; }
     /// Factory method for generating an FSAction object representing a RemoveSprite action.
-    public static FSAction RemoveSprite() { return new FSAction(FSAction.RemoveSprite); }
+    public static FSAction RemoveSprite() { return actions[FSAction.RemoveSprite]; }
     /// Factory method for generating an FSAction object representing a Trace action.
-    public static FSAction Trace() { return new FSAction(FSAction.Trace); }
+    public static FSAction Trace() { return actions[FSAction.Trace]; }
     /// Factory method for generating an FSAction object representing a StartDrag action.
-    public static FSAction StartDrag() { return new FSAction(FSAction.StartDrag); }
+    public static FSAction StartDrag() { return actions[FSAction.StartDrag]; }
     /// Factory method for generating an FSAction object representing a EndDrag action.
-    public static FSAction EndDrag() { return new FSAction(FSAction.EndDrag); }
+    public static FSAction EndDrag() { return actions[FSAction.EndDrag]; }
     /// Factory method for generating an FSAction object representing a StringLess action.
-    public static FSAction StringLess() { return new FSAction(FSAction.StringLess); }
+    public static FSAction StringLess() { return actions[FSAction.StringLess]; }
     /// Factory method for generating an FSAction object representing a RandomNumber action.
-    public static FSAction RandomNumber() { return new FSAction(FSAction.RandomNumber); }
+    public static FSAction RandomNumber() { return actions[FSAction.RandomNumber]; }
     /// Factory method for generating an FSAction object representing a MBStringLength action.
-    public static FSAction MBStringLength() { return new FSAction(FSAction.MBStringLength); }
+    public static FSAction MBStringLength() { return actions[FSAction.MBStringLength]; }
     /// Factory method for generating an FSAction object representing a CharToAscii action.
-    public static FSAction CharToAscii() { return new FSAction(FSAction.CharToAscii); }
+    public static FSAction CharToAscii() { return actions[FSAction.CharToAscii]; }
     /// Factory method for generating an FSAction object representing a AsciiToChar action.
-    public static FSAction AsciiToChar() { return new FSAction(FSAction.AsciiToChar); }
+    public static FSAction AsciiToChar() { return actions[FSAction.AsciiToChar]; }
     /// Factory method for generating an FSAction object representing a GetTime action.
-    public static FSAction GetTime() { return new FSAction(FSAction.GetTime); }
+    public static FSAction GetTime() { return actions[FSAction.GetTime]; }
     /// Factory method for generating an FSAction object representing a MBStringExtract action.
-    public static FSAction MBStringExtract() { return new FSAction(FSAction.MBStringExtract); }
+    public static FSAction MBStringExtract() { return actions[FSAction.MBStringExtract]; }
     /// Factory method for generating an FSAction object representing a MBCharToAscii action.
-    public static FSAction MBCharToAscii() { return new FSAction(FSAction.MBCharToAscii); }
+    public static FSAction MBCharToAscii() { return actions[FSAction.MBCharToAscii]; }
     /// Factory method for generating an FSAction object representing a MBAsciiToChar action.
-    public static FSAction MBAsciiToChar() { return new FSAction(FSAction.MBAsciiToChar); }
+    public static FSAction MBAsciiToChar() { return actions[FSAction.MBAsciiToChar]; }
 // Flash 5
     /// Factory method for generating an FSAction object representing a DeleteVariable action.
-    public static FSAction DeleteVariable() { return new FSAction(FSAction.DeleteVariable); }
+    public static FSAction DeleteVariable() { return actions[FSAction.DeleteVariable]; }
     /// Factory method for generating an FSAction object representing a Delete action.
-    public static FSAction Delete() { return new FSAction(FSAction.Delete); }
+    public static FSAction Delete() { return actions[FSAction.Delete]; }
     /// Factory method for generating an FSAction object representing a InitVariable action.
-    public static FSAction InitVariable() { return new FSAction(FSAction.InitVariable); }
+    public static FSAction InitVariable() { return actions[FSAction.InitVariable]; }
     /// Factory method for generating an FSAction object representing a ExecuteFunction action.
-    public static FSAction ExecuteFunction() { return new FSAction(FSAction.ExecuteFunction); }
+    public static FSAction ExecuteFunction() { return actions[FSAction.ExecuteFunction]; }
     /// Factory method for generating an FSAction object representing a Return action.
-    public static FSAction Return() { return new FSAction(FSAction.Return); }
+    public static FSAction Return() { return actions[FSAction.Return]; }
     /// Factory method for generating an FSAction object representing a Modulo action.
-    public static FSAction Modulo() { return new FSAction(FSAction.Modulo); }
+    public static FSAction Modulo() { return actions[FSAction.Modulo]; }
     /// Factory method for generating an FSAction object representing a NamedObject action.
-    public static FSAction NamedObject() { return new FSAction(FSAction.NamedObject); }
+    public static FSAction NamedObject() { return actions[FSAction.NamedObject]; }
     /// Factory method for generating an FSAction object representing a NewVariable action.
-    public static FSAction NewVariable() { return new FSAction(FSAction.NewVariable); }
+    public static FSAction NewVariable() { return actions[FSAction.NewVariable]; }
     /// Factory method for generating an FSAction object representing a NewArray action.
-    public static FSAction NewArray() { return new FSAction(FSAction.NewArray); }
+    public static FSAction NewArray() { return actions[FSAction.NewArray]; }
     /// Factory method for generating an FSAction object representing a NewObject action.
-    public static FSAction NewObject() { return new FSAction(FSAction.NewObject); }
+    public static FSAction NewObject() { return actions[FSAction.NewObject]; }
     /// Factory method for generating an FSAction object representing a GetType action.
-    public static FSAction GetType() { return new FSAction(FSAction.GetType); }
+    public static FSAction GetType() { return actions[FSAction.GetType]; }
     /// Factory method for generating an FSAction object representing a GetTarget action.
-    public static FSAction GetTarget() { return new FSAction(FSAction.GetTarget); }
+    public static FSAction GetTarget() { return actions[FSAction.GetTarget]; }
     /// Factory method for generating an FSAction object representing a Enumerate action.
-    public static FSAction Enumerate() { return new FSAction(FSAction.Enumerate); }
+    public static FSAction Enumerate() { return actions[FSAction.Enumerate]; }
     /// Factory method for generating an FSAction object representing a Add action.
-    public static FSAction Add() { return new FSAction(FSAction.Add); }
+    public static FSAction Add() { return actions[FSAction.Add]; }
     /// Factory method for generating an FSAction object representing a Less action.
-    public static FSAction Less() { return new FSAction(FSAction.Less); }
+    public static FSAction Less() { return actions[FSAction.Less]; }
     /// Factory method for generating an FSAction object representing a Equals action.
-    public static FSAction Equals() { return new FSAction(FSAction.Equals); }
+    public static FSAction Equals() { return actions[FSAction.Equals]; }
     /// Factory method for generating an FSAction object representing a ToNumber action.
-    public static FSAction ToNumber() { return new FSAction(FSAction.ToNumber); }
+    public static FSAction ToNumber() { return actions[FSAction.ToNumber]; }
     /// Factory method for generating an FSAction object representing a ToString action.
-    public static FSAction ToString() { return new FSAction(FSAction.ToString); }
+    public static FSAction ToString() { return actions[FSAction.ToString]; }
     /// Factory method for generating an FSAction object representing a Duplicate action.
-    public static FSAction Duplicate() { return new FSAction(FSAction.Duplicate); }
+    public static FSAction Duplicate() { return actions[FSAction.Duplicate]; }
     /// Factory method for generating an FSAction object representing a Swap action.
-    public static FSAction Swap() { return new FSAction(FSAction.Swap); }
+    public static FSAction Swap() { return actions[FSAction.Swap]; }
     /// Factory method for generating an FSAction object representing a GetAttribute action.
-    public static FSAction GetAttribute() { return new FSAction(FSAction.GetAttribute); }
+    public static FSAction GetAttribute() { return actions[FSAction.GetAttribute]; }
     /// Factory method for generating an FSAction object representing a SetAttribute action.
-    public static FSAction SetAttribute() { return new FSAction(FSAction.SetAttribute); }
+    public static FSAction SetAttribute() { return actions[FSAction.SetAttribute]; }
     /// Factory method for generating an FSAction object representing a Increment action.
-    public static FSAction Increment() { return new FSAction(FSAction.Increment); }
+    public static FSAction Increment() { return actions[FSAction.Increment]; }
     /// Factory method for generating an FSAction object representing a Decrement action.
-    public static FSAction Decrement() { return new FSAction(FSAction.Decrement); }
+    public static FSAction Decrement() { return actions[FSAction.Decrement]; }
     /// Factory method for generating an FSAction object representing a ExecuteMethod action.
-    public static FSAction ExecuteMethod() { return new FSAction(FSAction.ExecuteMethod); }
+    public static FSAction ExecuteMethod() { return actions[FSAction.ExecuteMethod]; }
     /// Factory method for generating an FSAction object representing a NewMethod action.
-    public static FSAction NewMethod() { return new FSAction(FSAction.NewMethod); }
+    public static FSAction NewMethod() { return actions[FSAction.NewMethod]; }
     /// Factory method for generating an FSAction object representing a BitwiseAnd action.
-    public static FSAction BitwiseAnd() { return new FSAction(FSAction.BitwiseAnd); }
+    public static FSAction BitwiseAnd() { return actions[FSAction.BitwiseAnd]; }
     /// Factory method for generating an FSAction object representing a BitwiseOr action.
-    public static FSAction BitwiseOr() { return new FSAction(FSAction.BitwiseOr); }
+    public static FSAction BitwiseOr() { return actions[FSAction.BitwiseOr]; }
     /// Factory method for generating an FSAction object representing a BitwiseXOr action.
-    public static FSAction BitwiseXOr() { return new FSAction(FSAction.BitwiseXOr); }
+    public static FSAction BitwiseXOr() { return actions[FSAction.BitwiseXOr]; }
     /// Factory method for generating an FSAction object representing a LogicalShiftLeft action.
-    public static FSAction LogicalShiftLeft() { return new FSAction(FSAction.LogicalShiftLeft); }
+    public static FSAction LogicalShiftLeft() { return actions[FSAction.LogicalShiftLeft]; }
     /// Factory method for generating an FSAction object representing a ArithmeticShiftRight action.
-    public static FSAction ArithmeticShiftRight() { return new FSAction(FSAction.ArithmeticShiftRight); }
+    public static FSAction ArithmeticShiftRight() { return actions[FSAction.ArithmeticShiftRight]; }
     /// Factory method for generating an FSAction object representing a LogicalShiftRight action.
-    public static FSAction LogicalShiftRight() { return new FSAction(FSAction.LogicalShiftRight); }
+    public static FSAction LogicalShiftRight() { return actions[FSAction.LogicalShiftRight]; }
 // Flash 6
     /// Factory method for generating an FSAction object representing a InstanceOf action.
-    public static FSAction InstanceOf() { return new FSAction(FSAction.InstanceOf); }
+    public static FSAction InstanceOf() { return actions[FSAction.InstanceOf]; }
     /// Factory method for generating an FSAction object representing a EnumerateObject action.
-    public static FSAction EnumerateObject() { return new FSAction(FSAction.EnumerateObject); }
+    public static FSAction EnumerateObject() { return actions[FSAction.EnumerateObject]; }
     /// Factory method for generating an FSAction object representing a Greater action.
-    public static FSAction Greater() { return new FSAction(FSAction.Greater); }
+    public static FSAction Greater() { return actions[FSAction.Greater]; }
     /// Factory method for generating an FSAction object representing a StringGreater action.
-    public static FSAction StringGreater() { return new FSAction(FSAction.StringGreater); }
+    public static FSAction StringGreater() { return actions[FSAction.StringGreater]; }
     /// Factory method for generating an FSAction object representing a StrictEquals action.
-    public static FSAction StrictEquals() { return new FSAction(FSAction.StrictEquals); }
+    public static FSAction StrictEquals() { return actions[FSAction.StrictEquals]; }
 // Flash 7
     /// Factory method for generating an FSAction object representing a Cast action.
-    public static FSAction Cast() { return new FSAction(FSAction.Cast); }
+    public static FSAction Cast() { return actions[FSAction.Cast]; }
     /// Factory method for generating an FSAction object representing a Implements action.
-    public static FSAction Implements() { return new FSAction(FSAction.Implements); }
+    public static FSAction Implements() { return actions[FSAction.Implements]; }
     /// Factory method for generating an FSAction object representing a Throw action.
-    public static FSAction Throw() { return new FSAction(FSAction.Throw); }
+    public static FSAction Throw() { return actions[FSAction.Throw]; }
     /// Factory method for generating an FSAction object representing a Extends action.
-    public static FSAction Extends() { return new FSAction(FSAction.Extends); }
+    public static FSAction Extends() { return actions[FSAction.Extends]; }
     
     /**
      * Construct an FSAction object, initalizing it with values decoded from an

Modified: trunk/src/com/flagstone/transform/FSActionObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSActionObject.java	2006-03-03 18:59:51 UTC (rev 110)
+++ trunk/src/com/flagstone/transform/FSActionObject.java	2006-03-05 10:55:58 UTC (rev 111)
@@ -86,7 +86,6 @@
     public static final int ExceptionHandler = 143;
 
     protected int type = 0;
-    protected int size = 0;
     protected int length = 0;
     
     protected FSActionObject(int aType)
@@ -96,7 +95,6 @@
     protected FSActionObject(FSActionObject obj)
     {
         type = obj.type;
-        size = obj.size;
         length = obj.length;
     }  
     /** Gets the code used that identifies the type of the action when it is encoded. 

Modified: trunk/src/com/flagstone/transform/FSCall.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCall.java	2006-03-03 18:59:51 UTC (rev 110)
+++ trunk/src/com/flagstone/transform/FSCall.java	2006-03-05 10:55:58 UTC (rev 111)
@@ -68,7 +68,18 @@
  */  
 public final class FSCall extends FSActionObject
 {
+    private static final FSCall instance = new FSCall();
+    
     /**
+     * Returns a canonical FSCall object.
+     * 
+     * @return an object that can safely be shared among objects.
+     */
+    public static FSCall getInstance()
+    {
+        return instance;
+    }
+    /**
      * Construct an FSCall object, initalizing it with values decoded from an 
      * encoded object.
      * 

Modified: trunk/src/com/flagstone/transform/FSMovie.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovie.java	2006-03-03 18:59:51 UTC (rev 110)
+++ trunk/src/com/flagstone/transform/FSMovie.java	2006-03-05 10:55:58 UTC (rev 111)
@@ -216,7 +216,8 @@
         switch (type)
         {
             case FSMovieObject.ShowFrame:
-                currentObject = new FSShowFrame(coder);
+                currentObject = FSShowFrame.getInstance();
+                coder.setPointer(next);
                 break;
             case FSMovieObject.DefineShape:
                 currentObject = new FSDefineShape(coder);
@@ -341,7 +342,8 @@
                 break;
 // Flash 4
             case FSMovieObject.PathsArePostscript:
-                currentObject = new FSPathsArePostscript(coder);
+                currentObject = FSPathsArePostscript.getInstance();
+                coder.setPointer(next);
                 break;
             case FSMovieObject.DefineTextField:
                 currentObject = new FSDefineTextField(coder);
@@ -446,7 +448,8 @@
             case FSAction.Stop:
             case FSAction.ToggleQuality:
             case FSAction.StopSounds:
-                anAction = new FSAction(coder);
+                anAction = FSAction.getInstance(type);
+                coder.adjustPointer(8);
                 break;
             case FSActionObject.GetUrl:
                 anAction = new FSGetUrl(coder);
@@ -499,10 +502,12 @@
             case FSAction.MBStringExtract:
             case FSAction.MBCharToAscii:
             case FSAction.MBAsciiToChar:
-                anAction = new FSAction(coder);
+                anAction = FSAction.getInstance(type);
+                coder.adjustPointer(8);
                 break;
             case FSActionObject.Call:
-                anAction = new FSCall(coder);
+                anAction = FSCall.getInstance();
+                coder.setPointer(next);
                 break;
             case FSActionObject.Push:
                 anAction = new FSPush(coder);
@@ -555,7 +560,8 @@
             case FSAction.GetTarget:
             case FSAction.NewVariable:
             case FSAction.InitVariable:
-                anAction = new FSAction(coder);
+                anAction = FSAction.getInstance(type);
+                coder.adjustPointer(8);
                 break;
             case FSActionObject.Table:
                 anAction = new FSTable(coder);
@@ -581,14 +587,16 @@
             case FSAction.Greater:
             case FSAction.StringGreater:
             case FSAction.StrictEquals:
-                anAction = new FSAction(coder);
+                anAction = FSAction.getInstance(type);
+                coder.adjustPointer(8);
                 break;
 // Flash 7
             case FSAction.Cast:
             case FSAction.Extends:
             case FSAction.Implements:
             case FSAction.Throw:
-                anAction = new FSAction(coder);
+                anAction = FSAction.getInstance(type);
+                coder.adjustPointer(8);
                 break;
             case FSActionObject.ExceptionHandler:
                 anAction = new FSExceptionHandler(coder);

Modified: trunk/src/com/flagstone/transform/FSNull.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNull.java	2006-03-03 18:59:51 UTC (rev 110)
+++ trunk/src/com/flagstone/transform/FSNull.java	2006-03-05 10:55:58 UTC (rev 111)
@@ -41,6 +41,18 @@
  */  
 public final class FSNull extends FSTransformObject
 {
+    private static final FSNull instance = new FSNull();
+    
+    /**
+     * Returns a canonical FSNull object.
+     * 
+     * @return an object that can safely be shared among objects.
+     */
+    public static FSNull getInstance()
+    {
+        return instance;
+    }
+    
     /** Constructs an FSNull object. */     
     public FSNull()
     {

Modified: trunk/src/com/flagstone/transform/FSPathsArePostscript.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPathsArePostscript.java	2006-03-03 18:59:51 UTC (rev 110)
+++ trunk/src/com/flagstone/transform/FSPathsArePostscript.java	2006-03-05 10:55:58 UTC (rev 111)
@@ -63,7 +63,19 @@
  */  
 public final class FSPathsArePostscript extends FSMovieObject
 {
+    private static final FSPathsArePostscript instance = new FSPathsArePostscript();
+    
     /**
+     * Returns a canonical FSPathsArePostscript object.
+     * 
+     * @return an object that can safely be shared among objects.
+     */
+    public static FSPathsArePostscript getInstance()
+    {
+        return instance;
+    }
+    
+   /**
      * Construct an FSPathsArePostscript object, initalizing it with values 
      * decoded from an encoded object.
      * 

Modified: trunk/src/com/flagstone/transform/FSPush.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPush.java	2006-03-03 18:59:51 UTC (rev 110)
+++ trunk/src/com/flagstone/transform/FSPush.java	2006-03-05 10:55:58 UTC (rev 111)
@@ -642,11 +642,11 @@
                     valuesLength -= 5;
                     break;
                 case 2:
-                    values.add(new FSNull());
+                    values.add(FSNull.getInstance());
                     valuesLength -= 1;
                     break;
                 case 3:
-                    values.add(new FSVoid());
+                    values.add(FSVoid.getInstance());
                     valuesLength -= 1;
                     break;
                 case 4:

Modified: trunk/src/com/flagstone/transform/FSShowFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSShowFrame.java	2006-03-03 18:59:51 UTC (rev 110)
+++ trunk/src/com/flagstone/transform/FSShowFrame.java	2006-03-05 10:55:58 UTC (rev 111)
@@ -95,7 +95,18 @@
  */
 public final class FSShowFrame extends FSMovieObject
 {
+    private static final FSShowFrame instance = new FSShowFrame();
+    
     /**
+     * Returns a canonical FSShowFrame object.
+     * 
+     * @return an object that can safely be shared among objects.
+     */
+    public static FSShowFrame getInstance()
+    {
+        return instance;
+    }
+    /**
      * Construct an FSShowFrame object, initalizing it with values decoded from
      * an encoded object.
      * 

Modified: trunk/src/com/flagstone/transform/FSVoid.java
===================================================================
--- trunk/src/com/flagstone/transform/FSVoid.java	2006-03-03 18:59:51 UTC (rev 110)
+++ trunk/src/com/flagstone/transform/FSVoid.java	2006-03-05 10:55:58 UTC (rev 111)
@@ -41,6 +41,18 @@
  */  
 public final class FSVoid extends FSTransformObject
 {
+    private static final FSVoid instance = new FSVoid();
+    
+    /**
+     * Returns a canonical FSVoid object.
+     * 
+     * @return an object that can safely be shared among objects.
+     */
+    public static FSVoid getInstance()
+    {
+        return instance;
+    }
+
     /** 
      * Constructs an FSVoid object. 
      */     



From smackay at berlios.de  Sun Mar  5 14:52:42 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Sun, 5 Mar 2006 14:52:42 +0100
Subject: [Transform-svn] r112 - trunk/src/com/flagstone/transform
Message-ID: <200603051352.k25Dqg7U010074@sheep.berlios.de>

Author: smackay
Date: 2006-03-05 14:52:36 +0100 (Sun, 05 Mar 2006)
New Revision: 112

Modified:
   trunk/src/com/flagstone/transform/FSPush.java
Log:
Property values are now cloned when FSPush objects are cloned.

Modified: trunk/src/com/flagstone/transform/FSPush.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPush.java	2006-03-05 10:55:58 UTC (rev 111)
+++ trunk/src/com/flagstone/transform/FSPush.java	2006-03-05 13:52:36 UTC (rev 112)
@@ -357,6 +357,8 @@
                 values.add(new Double(((Double)value).doubleValue()));
             else if (value instanceof String)
                 values.add(new String((String)value));
+            else if (value instanceof FSProperty)
+                values.add(new FSProperty((FSProperty)value));
             else if (value instanceof FSNull)
                 values.add(((FSNull)value).clone());
             else if (value instanceof FSVoid)
@@ -475,6 +477,8 @@
                 anObject.values.add(new Double(((Double)obj).doubleValue()));
             else if (obj instanceof String)
                 anObject.values.add(new String((String)obj));
+            else if (obj instanceof FSProperty)
+                anObject.values.add(new FSProperty((FSProperty)obj));
             else if (obj instanceof FSNull)
                 anObject.values.add(((FSNull)obj).clone());
             else if (obj instanceof FSVoid)



From smackay at berlios.de  Sun Mar  5 14:56:46 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Sun, 5 Mar 2006 14:56:46 +0100
Subject: [Transform-svn] r113 - trunk/src/com/flagstone/transform
Message-ID: <200603051356.k25DukVk010503@sheep.berlios.de>

Author: smackay
Date: 2006-03-05 14:56:04 +0100 (Sun, 05 Mar 2006)
New Revision: 113

Modified:
   trunk/src/com/flagstone/transform/FSProperty.java
Log:
Added some documentation for FSProperty.

Modified: trunk/src/com/flagstone/transform/FSProperty.java
===================================================================
--- trunk/src/com/flagstone/transform/FSProperty.java	2006-03-05 13:52:36 UTC (rev 112)
+++ trunk/src/com/flagstone/transform/FSProperty.java	2006-03-05 13:56:04 UTC (rev 113)
@@ -30,6 +30,12 @@
 
 package com.flagstone.transform;
 
+/**
+ * FSProperty is a lightweigth class used to hold codes that specify movie clip 
+ * and movie properties that will be pushed onto the Flash Player stack.
+ * 
+ * See FSPush for a list of available properties.
+ */
 public final class FSProperty extends FSTransformObject
 {
     private int value = 0;



From smackay at berlios.de  Sun Mar  5 15:28:14 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Sun, 5 Mar 2006 15:28:14 +0100
Subject: [Transform-svn] r114 - trunk/test/data
Message-ID: <200603051428.k25ESEi5029263@sheep.berlios.de>

Author: smackay
Date: 2006-03-05 15:28:08 +0100 (Sun, 05 Mar 2006)
New Revision: 114

Added:
   trunk/test/data/readme.txt
Removed:
   trunk/test/data/fonts/
Log:
Removed test data from repository. Instead a readme is added with locations of where test suites may be downloaded.

Added: trunk/test/data/readme.txt
===================================================================
--- trunk/test/data/readme.txt	2006-03-05 13:56:04 UTC (rev 113)
+++ trunk/test/data/readme.txt	2006-03-05 14:28:08 UTC (rev 114)
@@ -0,0 +1,46 @@
+---------------------------------
+  Using Files For Testing
+---------------------------------
+This directory is designed to be the root directory for suites of files that 
+can be used to test the classes in the Transform SWF framework. Different 
+directories are listed for running tests using Flash files, images, sounds, etc.
+
+The directories are organized according to the type of file that is used in 
+testing: movies, fonts, images and sounds. Files for specific formats are then
+placed in sub-directories to allow tests to be run with a specific format or
+version - Please see the TestBG scripts included in the test\suites directory 
+for more information.
+
+-------------
+  IMPORTANT
+-------------
+The directories list here are distributed empty for several reasons. First is simply 
+one of size - there are potentially hundreds of files that could be used in testing
+and so providing a comprehensive list would make downloads prohibitively large.
+Other reasons include copyright or other licencing issues - many real-world Flash 
+files provide a great way for testing the way Transform SWF decodes and encodes 
+Flash files.
+
+--------------------------------
+  Useful Sources for Test Data
+--------------------------------
+Here are some of the suites/ lists of files that are currently used for testing 
+the classes in the Transform SWF framework. This list will be updated on a regular 
+basis:
+
+Flash Files
+www.flashKit.com is probably the most useful source of Flash files that can
+be included in testing.
+
+BMP Format Images
+A test suite can be downloaded from http://pobox.com/~jason1/bmpsuite/
+
+PNG Format Images 
+www.schaik.com/pngsuite/pngsuite.htmlwww.schaik.com/pngsuite/pngsuite.html
+
+Fonts
+Bitstream have released their Vera font with an Open Source license:
+http://gnome.org/fonts/
+
+DejaVu fonts add wide range of characters to the Vera fonts.
+http://dejavu.sourceforge.net/.
\ No newline at end of file



From smackay at berlios.de  Sun Mar  5 15:33:24 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Sun, 5 Mar 2006 15:33:24 +0100
Subject: [Transform-svn] r115 - in trunk/test/data/images: . bmp png
Message-ID: <200603051433.k25EXO8p001665@sheep.berlios.de>

Author: smackay
Date: 2006-03-05 15:31:56 +0100 (Sun, 05 Mar 2006)
New Revision: 115

Added:
   trunk/test/data/images/jpg/
Removed:
   trunk/test/data/images/bmp/bmpsuite-ref/
   trunk/test/data/images/bmp/g01bg.bmp
   trunk/test/data/images/bmp/g01bw.bmp
   trunk/test/data/images/bmp/g01p1.bmp
   trunk/test/data/images/bmp/g01wb.bmp
   trunk/test/data/images/bmp/g04.bmp
   trunk/test/data/images/bmp/g04p4.bmp
   trunk/test/data/images/bmp/g04rle.bmp
   trunk/test/data/images/bmp/g08.bmp
   trunk/test/data/images/bmp/g08offs.bmp
   trunk/test/data/images/bmp/g08os2.bmp
   trunk/test/data/images/bmp/g08p256.bmp
   trunk/test/data/images/bmp/g08p64.bmp
   trunk/test/data/images/bmp/g08pi256.bmp
   trunk/test/data/images/bmp/g08pi64.bmp
   trunk/test/data/images/bmp/g08res11.bmp
   trunk/test/data/images/bmp/g08res21.bmp
   trunk/test/data/images/bmp/g08res22.bmp
   trunk/test/data/images/bmp/g08rle.bmp
   trunk/test/data/images/bmp/g08s0.bmp
   trunk/test/data/images/bmp/g08w124.bmp
   trunk/test/data/images/bmp/g08w125.bmp
   trunk/test/data/images/bmp/g08w126.bmp
   trunk/test/data/images/bmp/g16bf555.bmp
   trunk/test/data/images/bmp/g16bf565.bmp
   trunk/test/data/images/bmp/g16def555.bmp
   trunk/test/data/images/bmp/g24.bmp
   trunk/test/data/images/bmp/g32bf.bmp
   trunk/test/data/images/bmp/g32def.bmp
   trunk/test/data/images/bmp/readme.txt
   trunk/test/data/images/png/basi0g01.png
   trunk/test/data/images/png/basi0g02.png
   trunk/test/data/images/png/basi0g04.png
   trunk/test/data/images/png/basi0g08.png
   trunk/test/data/images/png/basi0g16.png
   trunk/test/data/images/png/basi2c08.png
   trunk/test/data/images/png/basi2c16.png
   trunk/test/data/images/png/basi3p01.png
   trunk/test/data/images/png/basi3p02.png
   trunk/test/data/images/png/basi3p04.png
   trunk/test/data/images/png/basi3p08.png
   trunk/test/data/images/png/basi4a08.png
   trunk/test/data/images/png/basi4a16.png
   trunk/test/data/images/png/basi6a08.png
   trunk/test/data/images/png/basi6a16.png
   trunk/test/data/images/png/basn0g01.png
   trunk/test/data/images/png/basn0g02.png
   trunk/test/data/images/png/basn0g04.png
   trunk/test/data/images/png/basn0g08.png
   trunk/test/data/images/png/basn0g16.png
   trunk/test/data/images/png/basn2c08.png
   trunk/test/data/images/png/basn2c16.png
   trunk/test/data/images/png/basn3p01.png
   trunk/test/data/images/png/basn3p02.png
   trunk/test/data/images/png/basn3p04.png
   trunk/test/data/images/png/basn3p08.png
   trunk/test/data/images/png/basn4a08.png
   trunk/test/data/images/png/basn4a16.png
   trunk/test/data/images/png/basn6a08.png
   trunk/test/data/images/png/basn6a16.png
   trunk/test/data/images/png/bgai4a08.png
   trunk/test/data/images/png/bgai4a16.png
   trunk/test/data/images/png/bgan6a08.png
   trunk/test/data/images/png/bgan6a16.png
   trunk/test/data/images/png/bgbn4a08.png
   trunk/test/data/images/png/bggn4a16.png
   trunk/test/data/images/png/bgwn6a08.png
   trunk/test/data/images/png/bgyn6a16.png
   trunk/test/data/images/png/ccwn2c08.png
   trunk/test/data/images/png/ccwn3p08.png
   trunk/test/data/images/png/cdfn2c08.png
   trunk/test/data/images/png/cdhn2c08.png
   trunk/test/data/images/png/cdsn2c08.png
   trunk/test/data/images/png/cdun2c08.png
   trunk/test/data/images/png/ch1n3p04.png
   trunk/test/data/images/png/ch2n3p08.png
   trunk/test/data/images/png/cm0n0g04.png
   trunk/test/data/images/png/cm7n0g04.png
   trunk/test/data/images/png/cm9n0g04.png
   trunk/test/data/images/png/cs3n2c16.png
   trunk/test/data/images/png/cs3n3p08.png
   trunk/test/data/images/png/cs5n2c08.png
   trunk/test/data/images/png/cs5n3p08.png
   trunk/test/data/images/png/cs8n2c08.png
   trunk/test/data/images/png/cs8n3p08.png
   trunk/test/data/images/png/ct0n0g04.png
   trunk/test/data/images/png/ct1n0g04.png
   trunk/test/data/images/png/ctzn0g04.png
   trunk/test/data/images/png/f00n0g08.png
   trunk/test/data/images/png/f00n2c08.png
   trunk/test/data/images/png/f01n0g08.png
   trunk/test/data/images/png/f01n2c08.png
   trunk/test/data/images/png/f02n0g08.png
   trunk/test/data/images/png/f02n2c08.png
   trunk/test/data/images/png/f03n0g08.png
   trunk/test/data/images/png/f03n2c08.png
   trunk/test/data/images/png/f04n0g08.png
   trunk/test/data/images/png/f04n2c08.png
   trunk/test/data/images/png/g03n0g16.png
   trunk/test/data/images/png/g03n2c08.png
   trunk/test/data/images/png/g03n3p04.png
   trunk/test/data/images/png/g04n0g16.png
   trunk/test/data/images/png/g04n2c08.png
   trunk/test/data/images/png/g04n3p04.png
   trunk/test/data/images/png/g05n0g16.png
   trunk/test/data/images/png/g05n2c08.png
   trunk/test/data/images/png/g05n3p04.png
   trunk/test/data/images/png/g07n0g16.png
   trunk/test/data/images/png/g07n2c08.png
   trunk/test/data/images/png/g07n3p04.png
   trunk/test/data/images/png/g10n0g16.png
   trunk/test/data/images/png/g10n2c08.png
   trunk/test/data/images/png/g10n3p04.png
   trunk/test/data/images/png/g25n0g16.png
   trunk/test/data/images/png/g25n2c08.png
   trunk/test/data/images/png/g25n3p04.png
   trunk/test/data/images/png/oi1n0g16.png
   trunk/test/data/images/png/oi1n2c16.png
   trunk/test/data/images/png/oi2n0g16.png
   trunk/test/data/images/png/oi2n2c16.png
   trunk/test/data/images/png/oi4n0g16.png
   trunk/test/data/images/png/oi4n2c16.png
   trunk/test/data/images/png/oi9n0g16.png
   trunk/test/data/images/png/oi9n2c16.png
   trunk/test/data/images/png/pngsuite.doc
   trunk/test/data/images/png/pngsuite_logo.png
   trunk/test/data/images/png/pp0n2c16.png
   trunk/test/data/images/png/pp0n6a08.png
   trunk/test/data/images/png/ps1n0g08.png
   trunk/test/data/images/png/ps1n2c16.png
   trunk/test/data/images/png/ps2n0g08.png
   trunk/test/data/images/png/ps2n2c16.png
   trunk/test/data/images/png/s01i3p01.png
   trunk/test/data/images/png/s01n3p01.png
   trunk/test/data/images/png/s02i3p01.png
   trunk/test/data/images/png/s02n3p01.png
   trunk/test/data/images/png/s03i3p01.png
   trunk/test/data/images/png/s03n3p01.png
   trunk/test/data/images/png/s04i3p01.png
   trunk/test/data/images/png/s04n3p01.png
   trunk/test/data/images/png/s05i3p02.png
   trunk/test/data/images/png/s05n3p02.png
   trunk/test/data/images/png/s06i3p02.png
   trunk/test/data/images/png/s06n3p02.png
   trunk/test/data/images/png/s07i3p02.png
   trunk/test/data/images/png/s07n3p02.png
   trunk/test/data/images/png/s08i3p02.png
   trunk/test/data/images/png/s08n3p02.png
   trunk/test/data/images/png/s09i3p02.png
   trunk/test/data/images/png/s09n3p02.png
   trunk/test/data/images/png/s32i3p04.png
   trunk/test/data/images/png/s32n3p04.png
   trunk/test/data/images/png/s33i3p04.png
   trunk/test/data/images/png/s33n3p04.png
   trunk/test/data/images/png/s34i3p04.png
   trunk/test/data/images/png/s34n3p04.png
   trunk/test/data/images/png/s35i3p04.png
   trunk/test/data/images/png/s35n3p04.png
   trunk/test/data/images/png/s36i3p04.png
   trunk/test/data/images/png/s36n3p04.png
   trunk/test/data/images/png/s37i3p04.png
   trunk/test/data/images/png/s37n3p04.png
   trunk/test/data/images/png/s38i3p04.png
   trunk/test/data/images/png/s38n3p04.png
   trunk/test/data/images/png/s39i3p04.png
   trunk/test/data/images/png/s39n3p04.png
   trunk/test/data/images/png/s40i3p04.png
   trunk/test/data/images/png/s40n3p04.png
   trunk/test/data/images/png/tbbn1g04.png
   trunk/test/data/images/png/tbbn2c16.png
   trunk/test/data/images/png/tbbn3p08.png
   trunk/test/data/images/png/tbgn2c16.png
   trunk/test/data/images/png/tbgn3p08.png
   trunk/test/data/images/png/tbrn2c08.png
   trunk/test/data/images/png/tbwn1g16.png
   trunk/test/data/images/png/tbwn3p08.png
   trunk/test/data/images/png/tbyn3p08.png
   trunk/test/data/images/png/tp0n1g08.png
   trunk/test/data/images/png/tp0n2c08.png
   trunk/test/data/images/png/tp0n3p08.png
   trunk/test/data/images/png/tp1n3p08.png
   trunk/test/data/images/png/x00n0g01.png
   trunk/test/data/images/png/xcrn0g04.png
   trunk/test/data/images/png/xlfn0g04.png
   trunk/test/data/images/png/z00n2c08.png
   trunk/test/data/images/png/z03n2c08.png
   trunk/test/data/images/png/z06n2c08.png
   trunk/test/data/images/png/z09n2c08.png
Log:
Removed images from repository.

Deleted: trunk/test/data/images/bmp/g01bg.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g01bw.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g01p1.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g01wb.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g04.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g04p4.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g04rle.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08offs.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08os2.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08p256.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08p64.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08pi256.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08pi64.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08res11.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08res21.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08res22.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08rle.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08s0.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08w124.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08w125.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g08w126.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g16bf555.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g16bf565.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g16def555.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g24.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g32bf.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/g32def.bmp
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/bmp/readme.txt
===================================================================
--- trunk/test/data/images/bmp/readme.txt	2006-03-05 14:28:08 UTC (rev 114)
+++ trunk/test/data/images/bmp/readme.txt	2006-03-05 14:31:56 UTC (rev 115)
@@ -1,38 +0,0 @@
-BMP Suite - sample BMP image files
-By Jason Summers <jason1 at pobox.com>
-
-Version: 2001.04.27
-
-For more information: http://pobox.com/~jason1/bmpsuite/
-
-Contents
---------
-
-g01bw.bmp
-g01wb.bmp
-g01bg.bmp
-g01p1.bmp
-g04.bmp
-g04p4.bmp
-g08.bmp
-g08offs.bmp
-g08os2.bmp
-g08w126.bmp
-g08w125.bmp
-g08w124.bmp
-g08p256.bmp
-g08pi256.bmp
-g08pi64.bmp
-g08res22.bmp
-g08res21.bmp
-g08res11.bmp
-g08p64.bmp
-g08s0.bmp
-g16def555.bmp
-g16bf555.bmp
-g16bf565.bmp
-g024.bmp
-g32def.bmp
-g32bf.bmp
-
--- end --

Deleted: trunk/test/data/images/png/basi0g01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi0g02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi0g04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi0g08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi0g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi2c16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi3p01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi3p02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi4a08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi4a16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi6a08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basi6a16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn0g01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn0g02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn0g04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn0g08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn0g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn2c16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn3p01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn3p02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn4a08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn4a16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn6a08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/basn6a16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/bgai4a08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/bgai4a16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/bgan6a08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/bgan6a16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/bgbn4a08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/bggn4a16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/bgwn6a08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/bgyn6a16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/ccwn2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/ccwn3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cdfn2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cdhn2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cdsn2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cdun2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/ch1n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/ch2n3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cm0n0g04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cm7n0g04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cm9n0g04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cs3n2c16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cs3n3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cs5n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cs5n3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cs8n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/cs8n3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/ct0n0g04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/ct1n0g04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/ctzn0g04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/f00n0g08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/f00n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/f01n0g08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/f01n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/f02n0g08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/f02n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/f03n0g08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/f03n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/f04n0g08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/f04n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g03n0g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g03n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g03n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g04n0g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g04n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g04n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g05n0g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g05n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g05n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g07n0g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g07n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g07n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g10n0g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g10n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g10n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g25n0g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g25n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/g25n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/oi1n0g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/oi1n2c16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/oi2n0g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/oi2n2c16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/oi4n0g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/oi4n2c16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/oi9n0g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/oi9n2c16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/pngsuite.doc
===================================================================
--- trunk/test/data/images/png/pngsuite.doc	2006-03-05 14:28:08 UTC (rev 114)
+++ trunk/test/data/images/png/pngsuite.doc	2006-03-05 14:31:56 UTC (rev 115)
@@ -1,520 +0,0 @@
-        PNGSUITE
-----------------
-
-        testset for PNG-(de)coders
-        created by Willem van Schaik
-------------------------------------
-
-This is a collection of graphics images created to test the png applications
-like viewers, converters and editors. All (as far as that is possible)
-formats supported by the PNG standard are represented.
-
-
-1.      INTRODUCTION
---------------------
-
-1.1     PNG capabilities
-------------------------
-
-Supported color-types are:
-
-        -   grayscale
-        -   grayscale + alpha-channel
-        -   color palettes
-        -   rgb
-        -   rgb + alpha-channel
-
-Allowed bitdepths are depending on the color-type, but are in the range
-of 1-bit (grayscale, which is b&w) upto 16-bits.
-
-Special features are:
-
-        -   interlacing (Adam-7)
-        -   gamma-support
-        -   transparency (a poor-man's alpha solution)
-
-
-1.2     File naming
--------------------
-
-Where possible, the testfiles are 32x32 bits icons. This results in a still
-reasonable size of the suite even with a large number of tests. The name
-of each test-file reflects thetype in the following way:
-
-        g04i2c08.png
-        || |||+---- bit-depth
-        || ||+----- color-type (descriptive)
-        || |+------ color-type (numerical)
-        || +------- interlaced or non-interlaced
-        |+--------- parameter of test (in this case gamma-value)
-        +---------- test feature (in this case gamma)
-
-
-1.3     PNG formats
--------------------
-
-color-type:
-        0g          -   grayscale
-        2c          -   rgb color
-        3p          -   paletted
-        4a          -   grayscale + alpha channel
-        6a          -   rgb color + alpha channel
-
-bit-depth:
-        01          -   with color-type 0, 3
-        02          -   with color-type 0, 3
-        04          -   with color-type 0, 3
-        08          -   with color-type 0, 2, 3, 4, 6
-        16          -   with color-type 0, 2, 4, 6
-
-interlacing:
-        n           -   non-interlaced
-        i           -   interlaced
-
-
-2.      THE TESTS
------------------
-
-2.1     Sizes
--------------
-
-These tests are there to check if your software handles pictures well, with
-picture sizes that are not a multiple of 8. This is particularly important
-with Adam-7 type interlacing. In the same way these tests check if pictures
-size 1x1 and similar are ok.
-
-        s01         -   1x1 pixel picture
-        s02         -   2x2 pixel picture
-        s03         -   3x3 pixel picture
-        s04         -   4x4 pixel picture
-        s05         -   5x5 pixel picture
-        s06         -   6x6 pixel picture
-        s07         -   7x7 pixel picture
-        s08         -   8x8 pixel picture
-        s09         -   9x9 pixel picture
-        s32         -   32x32 pixel picture
-        s33         -   33x33 pixel picture
-        s34         -   34x34 pixel picture
-        s35         -   35x35 pixel picture
-        s36         -   36x36 pixel picture
-        s37         -   37x37 pixel picture
-        s38         -   38x38 pixel picture
-        s39         -   39x39 pixel picture
-        s40         -   40x40 pixel picture
-
-
-2.2     Background
-------------------
-
-When the PNG file contains a background chunck, this should be used for
-pictures with alpha-channel or pictures with a transparency chunck. For
-pictures without this background-chunk, but with alpha, this testset
-assumes a black background.
-
-For the images in this test, the left-side should be 100% the background
-color, where moving to the right the color should gradually become the
-image pattern.
-
-        bga         -   alpha + no background
-        bgw         -   alpha + white background
-        bgg         -   alpha + gray background
-        bgb         -   alpha + black background
-        bgy         -   alpha + yellow background
-
-
-2.3     Transparency
---------------------
-
-Transparency should be used together with a background chunk. To test the
-combination of the two the latter 4 tests are there. How to handle pictures
-with transparancy, but without a background, opinions can differ. Here we
-use black, but especially in the case of paletted images, the normal color
-would maybe even be better.
-
-        tp0         -   not transparent for reference
-        tp1         -   transparent, but no background chunk
-        tbw         -   transparent + white background
-        tbg         -   transparent + gray background
-        tbb         -   transparent + black background
-        tby         -   transparent + yellow background
-
-
-2.4     Gamma
--------------
-
-To test if your viewer handles gamma-correction, 6 testfiles are available.
-They contain corrected color-ramps and a corresponding gamma-chunk with the
-file-gamma value. These are created in such a way that when the viewer does
-the gamma correction right, all 6 should be displayed identical.
-
-If they are different, probably the gamma correction is omitted. In that
-case, have a look at the two right coloumns in the 6 pictures. The image
-where those two look the same (when looked from far) reflects the gamma of
-your system. However, because of the limited size of the image, you should
-do more elaborate tests to determine your display gamma.
-
-        g03         -   file-gamma = 0.35, for display with gamma = 2.8
-        g04         -   file-gamma = 0.45, for display with gamma = 2.2 (PC)
-        g05         -   file-gamma = 0.55, for display with gamma = 1.8 (Mac)
-        g07         -   file-gamma = 0.70, for display with gamma = 1.4
-        g10         -   file-gamma = 1.00, for display with gamma = 1.0 (NeXT)
-        g25         -   file-gamma = 2.50, for display with gamma = 0.4
-
-
-2.5     Filtering
------------------
-
-PNG uses file-filtering, for optimal compression. Normally the type is of
-filtering is adjusted to the contents of the picture, but here each file
-has the same picture, with a different filtering.
-
-        f0          -   no filtering
-        f1          -   sub filtering
-        f2          -   up filtering
-        f3          -   average filtering
-        f4          -   paeth filtering
-
-
-2.6     Additional palettes
----------------------------
-
-Besides the normal use of paletted images, palette chunks can in combination
-with true-color (and other) images also be used to select color lookup-tables
-when the video system is of limited capabilities. The suggested palette chunk
-is specially created for this purpose.
-
-        pp          -   normal palette chunk
-        ps          -   suggested palette chunk
-
-
-2.7     Ancillary chunks (under construction)
-------------------------
-
-To test the correct decoding of ancillary chunks, these test-files contain
-one or more examples of these chunkcs. Depending on the type of chunk, a
-number of typical values are selected to test. Unluckily, the testset can
-not contain all combinations, because that would be an endless set.
-
-The significant bits are used in files with the next higher bit-depth. They
-indicate howmany bits are valid.
-
-        cs3         -   3 significant bits
-        cs5         -   5 significant bits
-        cs8         -   8 significant bits (reference)
-        cs3         -   13 significant bits
-
-For the physical pixel dimensions, the result of each decoding should be
-a sqare picture. The first (cdf) image is an example of flat (horizontal)
-pixels, where the pHYS chunk (x is 1 per unit, y = 4 per unit) must take
-care of the correction. The second is just the other way round. The last
-example uses the unit specifier, for 1000 pixels per meter. This should
-result in a picture of 3.2 cm square.
-
-        cdf         -   physical pixel dimensions, 8x32 flat pixels
-        cdh         -   physical pixel dimensions, 32x8 high pixels
-        cds         -   physical pixel dimensions, 8x8 square pixels
-        cdu         -   physical pixel dimensions, with unit-specifier
-
-        ccw         -   primary chromaticities and white point
-
-        ch1         -   histogram 15 colors
-        ch2         -   histogram 256 colors
-
-        cm7         -   modification time, 01-jan-1970
-        cm9         -   modification time, 31-dec-1999
-        cm0         -   modification time, 01-jan-2000
-
-In the textual chunk, a number of the standard, and some non-standard
-text items are included.
-
-        ct0         -   no textual data
-        ct1         -   with textual data
-        ctz         -   with compressed textual data
-
-
-2.8     Chunk ordering (still under construction)
-----------------------
-
-These testfiles will test the obligatory ordering relations between various
-chunk types (not yet) as well as the number of data chunks used for the image.
-
-        oi1         -   mother image with 1 idat-chunk
-        oi2         -   image with 2 idat-chunks
-        oi4         -   image with 4 unequal sized idat-chunks
-        oi9         -   all idat-chunks of length one
-
-
-2.9     Compression level
--------------------------
-
-Here you will find a set of images compressed by zlib, ranging from level 0 
-for no compression at maximum speed upto level 9 for maximum compression.
-
-        z00         -   zlib compression level 0 - none
-        z03         -   zlib compression level 3
-        z06         -   zlib compression level 6 - default
-        z09         -   zlib compression level 9 - maximum
-
-
-2.10     Corrupted files (under construction)
------------------------
-
-All these files are illegal. When decoding they should generate appropriate
-error-messages.
-
-        x00         -   empty IDAT chunk
-        xcr         -   added cr bytes
-        xlf         -   added lf bytes
-        xc0         -   color type 0
-        xc9         -   color type 9
-        xd0         -   bit-depth 0
-        xd3         -   bit-depth 3
-        xd9         -   bit-depth 99
-        xcs         -   incorrect IDAT checksum
-
-
-3.      TEST FILES
-------------------
-
-For each of the tests listed above, one or more test-files are created. A
-selection is made (for each test) for the color-type and bitdepth to be used
-for the tests. Further for a number of tests, both a non-interlaced as well
-as an interlaced version is available.
-
-
-3.1     Basic format test files (non-interlaced)
-------------------------------------------------
-
-        basn0g01    -   black & white
-        basn0g02    -   2 bit (4 level) grayscale
-        basn0g04    -   4 bit (16 level) grayscale
-        basn0g08    -   8 bit (256 level) grayscale
-        basn0g16    -   16 bit (64k level) grayscale
-        basn2c08    -   3x8 bits rgb color
-        basn2c16    -   3x16 bits rgb color
-        basn3p01    -   1 bit (2 color) paletted
-        basn3p02    -   2 bit (4 color) paletted
-        basn3p04    -   4 bit (16 color) paletted
-        basn3p08    -   8 bit (256 color) paletted
-        basn4a08    -   8 bit grayscale + 8 bit alpha-channel
-        basn4a16    -   16 bit grayscale + 16 bit alpha-channel
-        basn6a08    -   3x8 bits rgb color + 8 bit alpha-channel
-        basn6a16    -   3x16 bits rgb color + 16 bit alpha-channel
-
-
-3.2     Basic format test files (Adam-7 interlaced)
----------------------------------------------------
-
-        basi0g01    -   black & white
-        basi0g02    -   2 bit (4 level) grayscale
-        basi0g04    -   4 bit (16 level) grayscale
-        basi0g08    -   8 bit (256 level) grayscale
-        basi0g16    -   16 bit (64k level) grayscale
-        basi2c08    -   3x8 bits rgb color
-        basi2c16    -   3x16 bits rgb color
-        basi3p01    -   1 bit (2 color) paletted
-        basi3p02    -   2 bit (4 color) paletted
-        basi3p04    -   4 bit (16 color) paletted
-        basi3p08    -   8 bit (256 color) paletted
-        basi4a08    -   8 bit grayscale + 8 bit alpha-channel
-        basi4a16    -   16 bit grayscale + 16 bit alpha-channel
-        basi6a08    -   3x8 bits rgb color + 8 bit alpha-channel
-        basi6a16    -   3x16 bits rgb color + 16 bit alpha-channel
-
-
-3.3     Sizes test files
------------------------
-
-        s01n3p01    -   1x1 paletted file, no interlacing
-        s02n3p01    -   2x2 paletted file, no interlacing
-        s03n3p01    -   3x3 paletted file, no interlacing
-        s04n3p01    -   4x4 paletted file, no interlacing
-        s05n3p02    -   5x5 paletted file, no interlacing
-        s06n3p02    -   6x6 paletted file, no interlacing
-        s07n3p02    -   7x7 paletted file, no interlacing
-        s08n3p02    -   8x8 paletted file, no interlacing
-        s09n3p02    -   9x9 paletted file, no interlacing
-        s32n3p04    -   32x32 paletted file, no interlacing
-        s33n3p04    -   33x33 paletted file, no interlacing
-        s34n3p04    -   34x34 paletted file, no interlacing
-        s35n3p04    -   35x35 paletted file, no interlacing
-        s36n3p04    -   36x36 paletted file, no interlacing
-        s37n3p04    -   37x37 paletted file, no interlacing
-        s38n3p04    -   38x38 paletted file, no interlacing
-        s39n3p04    -   39x39 paletted file, no interlacing
-        s40n3p04    -   40x40 paletted file, no interlacing
-
-        s01i3p01    -   1x1 paletted file, interlaced
-        s02i3p01    -   2x2 paletted file, interlaced
-        s03i3p01    -   3x3 paletted file, interlaced
-        s04i3p01    -   4x4 paletted file, interlaced
-        s05i3p02    -   5x5 paletted file, interlaced
-        s06i3p02    -   6x6 paletted file, interlaced
-        s07i3p02    -   7x7 paletted file, interlaced
-        s08i3p02    -   8x8 paletted file, interlaced
-        s09i3p02    -   9x9 paletted file, interlaced
-        s32i3p04    -   32x32 paletted file, interlaced
-        s33i3p04    -   33x33 paletted file, interlaced
-        s34i3p04    -   34x34 paletted file, interlaced
-        s35i3p04    -   35x35 paletted file, interlaced
-        s36i3p04    -   36x36 paletted file, interlaced
-        s37i3p04    -   37x37 paletted file, interlaced
-        s38i3p04    -   38x38 paletted file, interlaced
-        s39i3p04    -   39x39 paletted file, interlaced
-        s40i3p04    -   40x40 paletted file, interlaced
-
-
-3.4     Background test files (with alpha)
-------------------------------------------
-
-        bgai4a08    -   8 bit grayscale, alpha, no background chunk, interlaced
-        bgai4a16    -   16 bit grayscale, alpha, no background chunk, interlaced
-        bgan6a08    -   3x8 bits rgb color, alpha, no background chunk
-        bgan6a16    -   3x16 bits rgb color, alpha, no background chunk
-
-        bgbn4a08    -   8 bit grayscale, alpha, black background chunk
-        bggn4a16    -   16 bit grayscale, alpha, gray background chunk
-        bgwn6a08    -   3x8 bits rgb color, alpha, white background chunk
-        bgyn6a16    -   3x16 bits rgb color, alpha, yellow background chunk
-
-
-3.5     Transparency (and background) test files
-------------------------------------------------
-
-        tp0n1g08    -   not transparent for reference (logo on gray)
-        tbbn1g04    -   transparent, black background chunk
-        tbwn1g16    -   transparent, white background chunk
-        tp0n2c08    -   not transparent for reference (logo on gray)
-        tbrn2c08    -   transparent, red background chunk
-        tbgn2c16    -   transparent, green background chunk
-        tbbn2c16    -   transparent, blue background chunk
-        tp0n3p08    -   not transparent for reference (logo on gray)
-        tp1n3p08    -   transparent, but no background chunk
-        tbbn3p08    -   transparent, black background chunk
-        tbgn3p08    -   transparent, light-gray background chunk
-        tbwn3p08    -   transparent, white background chunk
-        tbyn3p08    -   transparent, yellow background chunk
-
-
-3.6     Gamma test files
-------------------------
-
-        g03n0g16    -   grayscale, file-gamma = 0.35
-        g04n0g16    -   grayscale, file-gamma = 0.45
-        g05n0g16    -   grayscale, file-gamma = 0.55
-        g07n0g16    -   grayscale, file-gamma = 0.70
-        g10n0g16    -   grayscale, file-gamma = 1.00
-        g25n0g16    -   grayscale, file-gamma = 2.50
-        g03n2c08    -   color, file-gamma = 0.35
-        g04n2c08    -   color, file-gamma = 0.45
-        g05n2c08    -   color, file-gamma = 0.55
-        g07n2c08    -   color, file-gamma = 0.70
-        g10n2c08    -   color, file-gamma = 1.00
-        g25n2c08    -   color, file-gamma = 2.50
-        g03n3p04    -   paletted, file-gamma = 0.35
-        g04n3p04    -   paletted, file-gamma = 0.45
-        g05n3p04    -   paletted, file-gamma = 0.55
-        g07n3p04    -   paletted, file-gamma = 0.70
-        g10n3p04    -   paletted, file-gamma = 1.00
-        g25n3p04    -   paletted, file-gamma = 2.50
-
-
-3.7     Filtering test files
-----------------------------
-
-        f00n0g08    -   grayscale, no interlacing, filter-type 0
-        f01n0g08    -   grayscale, no interlacing, filter-type 1
-        f02n0g08    -   grayscale, no interlacing, filter-type 2
-        f03n0g08    -   grayscale, no interlacing, filter-type 3
-        f04n0g08    -   grayscale, no interlacing, filter-type 4
-        f00n2c08    -   color, no interlacing, filter-type 0
-        f01n2c08    -   color, no interlacing, filter-type 1
-        f02n2c08    -   color, no interlacing, filter-type 2
-        f03n2c08    -   color, no interlacing, filter-type 3
-        f04n2c08    -   color, no interlacing, filter-type 4
-
-
-3.8     Additional palette chunk test files
--------------------------------------------
-
-        pp0n2c16    -   six-cube palette-chunk in true-color image
-        pp0n6a08    -   six-cube palette-chunk in true-color+alpha image
-        ps1n0g08    -   six-cube suggested palette (1 byte) in grayscale image
-        ps1n2c16    -   six-cube suggested palette (1 byte) in true-color image
-        ps2n0g08    -   six-cube suggested palette (2 bytes) in grayscale image
-        ps2n2c16    -   six-cube suggested palette (2 bytes) in true-color image
-
-
-3.9     Ancillary chunks test files
------------------------------------
-
-        cs5n2c08    -   color, 5 significant bits
-        cs8n2c08    -   color, 8 significant bits (reference)
-        cs3n2c16    -   color, 13 significant bits
-        cs3n3p08    -   paletted, 3 significant bits
-        cs5n3p08    -   paletted, 5 significant bits
-        cs8n3p08    -   paletted, 8 significant bits (reference)
-
-        cdfn2c08    -   physical pixel dimensions, 8x32 flat pixels
-        cdhn2c08    -   physical pixel dimensions, 32x8 high pixels
-        cdsn2c08    -   physical pixel dimensions, 8x8 square pixels
-        cdun2c08    -   physical pixel dimensions, 1000 pixels per 1 meter
-
-        ccwn2c08    -   chroma chunk w:0.3127,0.3290 r:0.64,0.33 g:0.30,0.60 b:0.15,0.06
-        ccwn3p08    -   chroma chunk w:0.3127,0.3290 r:0.64,0.33 g:0.30,0.60 b:0.15,0.06
-
-        ch1n3p04    -   histogram 15 colors
-        ch2n3p08    -   histogram 256 colors
-
-        cm7n0g04    -   modification time, 01-jan-1970 00:00:00
-        cm9n0g04    -   modification time, 31-dec-1999 23:59:59
-        cm0n0g04    -   modification time, 01-jan-2000 12:34:56
-
-        ct0n0g04    -   no textual data
-        ct1n0g04    -   with textual data
-        ctzn0g04    -   with compressed textual data
-
-
-
-3.10    Chunk ordering
-----------------------
-
-        oi1n0g16    -   grayscale mother image with 1 idat-chunk
-        oi2n0g16    -   grayscale image with 2 idat-chunks
-        oi4n0g16    -   grayscale image with 4 unequal sized idat-chunks
-        oi9n0g16    -   grayscale image with all idat-chunks length one
-        oi1n2c16    -   color mother image with 1 idat-chunk
-        oi2n2c16    -   color image with 2 idat-chunks
-        oi4n2c16    -   color image with 4 unequal sized idat-chunks
-        oi9n2c16    -   color image with all idat-chunks length one
-
-
-
-3.11    Compression level
--------------------------
-
-        z00n2c08    -   color, no interlacing, compression level 0 (none)
-        z03n2c08    -   color, no interlacing, compression level 3
-        z06n2c08    -   color, no interlacing, compression level 6 (default)
-        z09n2c08    -   color, no interlacing, compression level 9 (maximum)
-
-
-
-3.12     Currupted files
------------------------
-
-        x00n0g01    -   empty 0x0 grayscale file
-        xcrn0g04    -   added cr bytes
-        xlfn0g04    -   added lf bytes
-        xc0n0c08    -   color type 0
-        xc9n0c08    -   color type 9
-        xd0n2c00    -   bit-depth 0
-        xd3n2c03    -   bit-depth 3
-        xd9n2c99    -   bit-depth 99
-        xcsn2c08    -   incorrect IDAT checksum
-
-
---------
-    (c) Willem van Schaik
-        willem at schaik.com
-        Singapore, October 1996

Deleted: trunk/test/data/images/png/pngsuite_logo.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/pp0n2c16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/pp0n6a08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/ps1n0g08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/ps1n2c16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/ps2n0g08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/ps2n2c16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s01i3p01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s01n3p01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s02i3p01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s02n3p01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s03i3p01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s03n3p01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s04i3p01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s04n3p01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s05i3p02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s05n3p02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s06i3p02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s06n3p02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s07i3p02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s07n3p02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s08i3p02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s08n3p02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s09i3p02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s09n3p02.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s32i3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s32n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s33i3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s33n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s34i3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s34n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s35i3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s35n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s36i3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s36n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s37i3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s37n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s38i3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s38n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s39i3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s39n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s40i3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/s40n3p04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tbbn1g04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tbbn2c16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tbbn3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tbgn2c16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tbgn3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tbrn2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tbwn1g16.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tbwn3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tbyn3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tp0n1g08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tp0n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tp0n3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/tp1n3p08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/x00n0g01.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/xcrn0g04.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/xlfn0g04.png
===================================================================
--- trunk/test/data/images/png/xlfn0g04.png	2006-03-05 14:28:08 UTC (rev 114)
+++ trunk/test/data/images/png/xlfn0g04.png	2006-03-05 14:31:56 UTC (rev 115)
@@ -1,13 +0,0 @@
-?PNG
-
-
-
-
-
-IHDR  ???)?IDATx?]??
-?0P*@??#?
-
-#T??10lPF`??F=???IQ?*??u??`%qk?
-H????????m???????	??=,?f?OK
-
-???t??(???????F;?P????{xp?]9?/p?*$(?*?y??????????@?C? 	c?q??N?U#?)11?.??r??f?0???gh(??t???E???kIEND?B`?
\ No newline at end of file

Deleted: trunk/test/data/images/png/z00n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/z03n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/z06n2c08.png
===================================================================
(Binary files differ)

Deleted: trunk/test/data/images/png/z09n2c08.png
===================================================================
(Binary files differ)



From smackay at berlios.de  Sun Mar  5 15:35:01 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Sun, 5 Mar 2006 15:35:01 +0100
Subject: [Transform-svn] r116 - trunk/test/data
Message-ID: <200603051435.k25EZ15i005327@sheep.berlios.de>

Author: smackay
Date: 2006-03-05 15:34:56 +0100 (Sun, 05 Mar 2006)
New Revision: 116

Added:
   trunk/test/data/fonts/
Log:
Emptied directories of test files from the repository the files will be downloaded by developers instead of distributed with Transform.



From smackay at berlios.de  Sun Mar  5 15:38:10 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Sun, 5 Mar 2006 15:38:10 +0100
Subject: [Transform-svn] r117 - trunk/test/data/movies
Message-ID: <200603051438.k25EcAWx019625@sheep.berlios.de>

Author: smackay
Date: 2006-03-05 15:37:53 +0100 (Sun, 05 Mar 2006)
New Revision: 117

Removed:
   trunk/test/data/movies/README.txt
Log:
Moved readme to root directory for test files.

Deleted: trunk/test/data/movies/README.txt
===================================================================
--- trunk/test/data/movies/README.txt	2006-03-05 14:34:56 UTC (rev 116)
+++ trunk/test/data/movies/README.txt	2006-03-05 14:37:53 UTC (rev 117)
@@ -1,20 +0,0 @@
----------------------------------
-  Using Flash Files For Testing
----------------------------------
-This directory is designed to hold sets of movies from each version of Flash
-which are used when testing the classes in the Transform framework.
-
-The files augment the unit test data to ensure that real-world files, particularly
-those generatd by third-party applications, can be decoded and encoded correctly.
-
-Separate directories are used for each version of Flash as the file format changes 
-and the tests are designed to verify that a specific version of Flash is supported
-rather than simply the latest version from Macromedia.
-
--------------
-  IMPORTANT
--------------
-The directories list here are distributed empty to avoid any copyright or other 
-licencing issues. Place any sample Flash (.swf) files that you want to use to run 
-the tests in the respective directories - the 4th byte of the encoded Flash file 
-contains the version number.
\ No newline at end of file



From smackay at berlios.de  Sun Mar  5 17:39:54 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Sun, 5 Mar 2006 17:39:54 +0100
Subject: [Transform-svn] r118 - trunk/test/data/fonts
Message-ID: <200603051639.k25Gdsd9013163@sheep.berlios.de>

Author: smackay
Date: 2006-03-05 17:39:51 +0100 (Sun, 05 Mar 2006)
New Revision: 118

Modified:
   trunk/test/data/fonts/
Log:
Updated


Property changes on: trunk/test/data/fonts
___________________________________________________________________
Name: svn:ignore
   + 
*




From smackay at berlios.de  Sun Mar  5 17:40:13 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Sun, 5 Mar 2006 17:40:13 +0100
Subject: [Transform-svn] r119 - in trunk/test/data/images: bmp jpg png
Message-ID: <200603051640.k25GeDAR013215@sheep.berlios.de>

Author: smackay
Date: 2006-03-05 17:40:09 +0100 (Sun, 05 Mar 2006)
New Revision: 119

Modified:
   trunk/test/data/images/bmp/
   trunk/test/data/images/jpg/
   trunk/test/data/images/png/
Log:
Updated


Property changes on: trunk/test/data/images/bmp
___________________________________________________________________
Name: svn:ignore
   + 
*.bmp



Property changes on: trunk/test/data/images/jpg
___________________________________________________________________
Name: svn:ignore
   + 
*.jpg



Property changes on: trunk/test/data/images/png
___________________________________________________________________
Name: svn:ignore
   + 
*.png




From smackay at berlios.de  Sun Mar  5 19:41:24 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Sun, 5 Mar 2006 19:41:24 +0100
Subject: [Transform-svn] r120 - in trunk: . doc doc/releases test/suites
Message-ID: <200603051841.k25IfOf0031601@sheep.berlios.de>

Author: smackay
Date: 2006-03-05 19:40:40 +0100 (Sun, 05 Mar 2006)
New Revision: 120

Added:
   trunk/doc/releases/transform-2.1.html
Modified:
   trunk/developer.xml
   trunk/doc/CHANGES.txt
   trunk/test/suites/FSMovie.xml
   trunk/test/suites/FSMovieReference.xml
Log:
Added release notes.

Modified: trunk/developer.xml
===================================================================
--- trunk/developer.xml	2006-03-05 16:40:09 UTC (rev 119)
+++ trunk/developer.xml	2006-03-05 18:40:40 UTC (rev 120)
@@ -74,8 +74,9 @@
 
         <copy todir="${dist.dir}/test" overwrite="true">
             <fileset dir="test">
-                <include name="data/movies/README.txt" />
+                <include name="data/readme.txt" />
                 <include name="suites/*" />
+                <include name="benchmarks/*" />
             </fileset>
         </copy>
 

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-05 16:40:09 UTC (rev 119)
+++ trunk/doc/CHANGES.txt	2006-03-05 18:40:40 UTC (rev 120)
@@ -1,3 +1,7 @@
+2006-03-04 - smackay at flagstonesoftware.com
+
+    * Property values are now cloned when FSPush objects are cloned.
+
 2006-03-03 - smackay at flagstonesoftware.com
 
     * Added canonical version of objects that can be safely shared since they
@@ -6,7 +10,7 @@
 
 2006-03-03 - smackay at flagstonesoftware.com
 
-    * Updated FSMovieText.java and added a new test folder, benchmarks, for 
+    * Updated FSMovieTest.java and added a new test folder, benchmarks, for 
       holding TestNG files to run performance test on Transform classes.
       
     * Split benchmark suite for FSMovie into separate suites for encoding and 
@@ -16,7 +20,7 @@
     
     * Added the benchmark target to test.xml to run specific benchmarks.
     
-    * Made constructors that initialize attributes from an FSCoder public. These
+    * Made constructors that initialise attributes from an FSCoder public. These
       methods will be used for testing. All classes.
       
     * Added copy constructors to all classes.
@@ -24,7 +28,7 @@
     * Removed private copies of constants used to identify different types of 
       object. This was left over from supporting different versions of Flash.
       
-    * cleaned up initialization of attributes.
+    * cleaned up initialisation of attributes.
     
     * Methods used to encode and decode objects:
    
@@ -32,7 +36,7 @@
           void decode(FSCoder)
           void encode(FSCoder)
           
-      along with the construtor <class>(FSCoder) are all "upgraded" to public
+      along with the constructor <class>(FSCoder) are all "upgraded" to public
       to support testing.
 
 2006-03-01 - smackay at flagstonesoftware.com

Added: trunk/doc/releases/transform-2.1.html
===================================================================
--- trunk/doc/releases/transform-2.1.html	2006-03-05 16:40:09 UTC (rev 119)
+++ trunk/doc/releases/transform-2.1.html	2006-03-05 18:40:40 UTC (rev 120)
@@ -0,0 +1,284 @@
+<html>
+<head>
+<title>Release Notes for Transform SWF for Java, Version 2.1</title>
+<style type="text/CSS">
+<!--
+a:link { text-decoration: none; }
+a:visited { color: darkred; text-decoration: none; }
+a:active { text-decoration: none; }
+a:hover { color: #000066; text-decoration: none; }
+
+h1 { font-size: 140%; background-color: darkgray; padding: 3px 10px; }
+h2 { font-size: 120%; background-color: darkgray; padding: 3px 10px; }
+h3 { font-size: 110%; margin-bottom: 0px; }
+
+div.section { margin-left: 10px; margin-right: 10px; }
+
+p { margin-top: 0px; }
+pre { font-size: 90%; }
+ul { margin-left: 10px; }
+ul ol { margin-left: 10px; }
+table { margin-left: 10px;}
+-->
+</style>
+</head>
+<body>
+
+<h1>Release Notes for Transform SWF for Java, Version 2.1.</h1>
+
+<div class="section">
+<P>This release brings forward a lot of changes discussed in the roadmap for 
+Version 3.0. The two most important ones are:
+<ol>
+<li>Transform Utilities classes are included in the package structure.</li>
+<li>Lazy decoding of actions and shape offers huge performance gains.</li>
+</ol>
+Other changes are mostly administrative, cleaning up code and generally resolving
+minor technical issues and improving support and use of TestNG for testing and
+verification.</P>
+
+</div><!-- section -->
+
+<ul>
+<li>Bug Fixes     
+<ol>     
+<li><a href="#fix1">FSPush: FSProperty objects are cloned correctly.</a></li>     
+<li><a href="#fix2">FSTextConstructor handles file names in upper case.</a></li>     
+</ol> 
+</li> 
+<li>New Classes 
+<ol>     
+<li><a href="#new1">FSCharacterTable providing character sets for FSTextConstructor</a></li>     
+<li><a href="#new2">FSCoderException to handle encoding or decoding errors.</a></li>     
+</ol> 
+</li> 
+<li>Class Changes     
+<ol>     
+<li><a href="#class1">FSMovieTest: Added benchmark methods.</a></li>     
+<li><a href="#class2">FSTransformObject: methods used to encode/decode classes are public.</a></li>     
+<li><a href="#class3">Added copy constructors on all classes.</a></li>     
+<li><a href="#class4">Removed redundant exception declarations.</a></li>
+<li><a href="#class5">Added the constructor public FSTextConstructor(int, Font).</a></li>
+<li><a href="#class6">FSTextConstructor: added reset method.</a></li>
+<li><a href="#class7">FSTextConstructor: added willDisplay method.</a></li>
+<li><a href="#class8">Tidied up FSCoder class and deprecated FSCodec.</a></li>
+<li><a href="#class9">TransformUtil is deprecated.</a></li>
+<li><a href="#class10">Deprecated the FSMovieListener interface.</a></li>
+</ol>
+</li>
+<li>Internal Class Changes 
+<ol>     
+<li><a href="#int1">Canonical objects are now used.</a></li>     
+<li><a href="#int2">Added lazy decoding of shapes and actions.</a></li>     
+<li><a href="#int3">Improved decoding of JPEG image data.</a></li>     
+</ol> 
+</li> 
+<li>Package Changes 
+<ol>     
+<li><a href="#package1">Merged Transform and Transform Utilities.</a></li>     
+</ol> 
+</li> 
+</ul>  
+</div><!-- section -->
+
+<h2>Bug Fixes</H2>  
+
+<div class="section">
+<h3><a name="fix1">1. FSPush: FSProperty objects are cloned correctly.</a></h3>  
+
+<P>FSProperty objects are now copied into the cloned array. Previously the 
+cloned array "dropped" any FSPropert objects.</P> 
+
+<h3><a name="fix1">2. FSTextConstructor handles file names in upper case.</a></h3>  
+
+<p>File names in upper case are now handled - this makes using TrueType files 
+from Windows systems much easier.</p>
+
+</div><!-- section -->
+
+<h2>New Classes</H2>  
+
+<div class="section">
+<h3><a name="new1">1. FSCharacterTable providing character sets for FSTextConstructor</a></h3>  
+
+<P>The willDisplay() method on FSTextConstructor (see below) is used to 
+define the characters that will be encoded in a font. The FSCharacterTable 
+class provided arrays of characters that can be used with the willDisplay
+method. Different character sets are provided for ISO 8859-1 as well as 
+characters for the main European languages.</P> 
+
+<h3><a name="new2">2. FSCoderException to handle encoding or decoding errors.</a></h3>  
+
+<P>Added a new exception class, FSCoderException to report when underflow or
+overflow errors occur when encoding or decoding objects. Previously only the 
+more general IOException was reported. FSCoderException contains information on 
+the location of the data structure in the file that caused the error making 
+diagnosis much easier.</p>
+
+</div><!-- section -->
+
+<h2>Class Changes</H2>  
+
+<div class="section">
+<h3><a name="class1">1. FSMovieTest: added benchmark methods.</a></h3>  
+
+<p>Updated FSMovieTest.java to record the time taken to decode and encode
+Flash files. TestNG scripts for running the tests were added to the directory
+test\benchmarks. The benchmark tests use Flash files stored in the directories
+text\data\movies\swf&lt;x&gt;</P>
+
+<p>The benchmarks measure the time taken to decode or encode a given Flash file
+100 times and are best suited to measure relative improvements when optimizing 
+the code in the Transform classes.</p>
+
+<h3><a name="class2">2. FSTransformObject: methods used to encode/decode classes are public.</a></h3>  
+
+<p> The methods used to encode and decode objects:
+
+<pre>   
+    int length(FSCoder)
+    void decode(FSCoder)
+    void encode(FSCoder)
+</pre>
+
+along with the constructor &lt;class&gt;(FSCoder) are all "upgraded" to public to 
+support testing with TestNG.</P>
+
+<h3><a name="class3">3. Added copy constructors on all classes.</a></h3>  
+
+<p>All of the classes now have copy constructors to complement the clone()
+method.</p>
+
+<h3><a name="class4">4. Removed redundant exception declarations.</a></h3>  
+
+<p>Removed redundant exceptions declarations from method signatures:
+FileNotFoundException is covered by IOException. Applies to FSMovie,
+FSSoundConstructor, FSImageConstructor. This change is simply aesthetic all the 
+removed exceptions are subclasses of IOException.</p>
+
+<h3><a name="class5">5. Added the constructor public FSTextConstructor(int, Font).</a></h3>  
+
+<p>FSTextConstructor had a single constructor FSTextConstructor(int, String)
+which was used to pass names of files and names of fonts. This new constructor
+was added to clearly differentiate fonts from files. Existing code is unaffected.</p>
+
+<h3><a name="class6">6. FSTextConstructor: added reset method.</a></h3>  
+
+<p>Added a reset(int) method to allow FSTextConstructor objects to be reused 
+when generating objects for more than one Flash file. The reset method clears
+the internal table used to track the order in which characters are used. This 
+allows the same FSTextConstructor object to be used to generate multiple font
+definitions. This is particularly useful when using AWT based fonts where the 
+time taken to decode the font definitions is relatively large.</p>
+
+<h3><a name="class7">7. FSTextConstructor: added willDisplay method.</a></h3>  
+
+<p>Added the method, willDisplay(char[]) to allow sets of characters to be 
+defined before creating any text objects.</p>
+
+<p>This solves the bug where characters were encoded in the order they were used 
+but not in ascending order of character code. This also simplifies using 
+FSTextCOnstructor class where previously text objects had to be defined before 
+the font definition was created.</p>
+
+<p>A corresponding canDisplay(char[]) method was added to verify that a given
+font can display all of the characters in a given set.</P>
+
+<h3><a name="class8">8. Tidied up FSCoder class and deprecated FSCodec.</a></h3>  
+
+<p>Tidied up the FSCoder class, making all methods more reliable and merging in
+functionality from Transform Utilities FSCodec. All decoding and encoding of 
+data is now performed using FSCoder. FSCodec is deprecated.</p>
+
+<h3><a name="class9">9. TransformUtil is now deprecated.</a></h3>  
+
+<p>with the merging of the Transform and Transform Utilities packages the 
+class TransformUtil is no longer required to provide basic version information
+and is now deprecated.</p>
+
+<h3><a name="class10">10. Deprecated the FSMovieListener interface.</a></h3>  
+
+<p>Deprecated the FSMovieListener interface, FSMovieEvent class and the methods 
+on the FSMovie class that used them.</p>
+
+<p>The FSMovieListener interface was originally used to support Describe. When 
+a movie was parsed the values decoded were reported to a FSMovieListener. This 
+allowed Describe to build a tree of objects so the contents of a Flash file 
+could be browsed.</p>
+
+<p>The interface also allowed errors to be reported so a file could be decoded 
+even if part of it was corrupted - some third-party tools are known to contain 
+bugs that generate errors. The Flash Player is robust when encountering this 
+type of error so the Movie Listener interface was an attempt to introduce 
+robustness into Transform.</p>
+
+<p>In practice the value of the interface was limited. Files containing errors
+ which would cause errors were relatively unusual and when an error was detected 
+ it was not obvious that recovering form the error was useful.</p>
+
+</div><!-- section -->
+
+<h2>Internal Class Changes</H2>  
+
+<div class="section">
+<h3><a name="int1">1. Canonical objects are now used.</a></h3>  
+
+<P>Added canonical version of objects that can be safely shared since they 
+contain no editable attributes: FSNull, FSVoid, FSAction, FSCall, FSShowFrame
+and FSPathsArePostscript. The most significant is for FSAction which contains 
+the byte-codes for stack-based actions -this will boost performance when 
+decoding files. The numbers of objects involved for other classes are much
+smaller in comparison but are included for completeness.</p>
+
+<h3><a name="int2">2. Added lazy decoding of shapes and actions.</a></h3>  
+
+<p>Added lazy decoding of actions to FSButtonEvent, FSClipEvent, FSDoAction, 
+FSDefineButton and FSInitialize. Lazy decoding of the commands to draw a shape
+was added to FSShape - this affects FSDefineShape, FSDefineShape2, 
+FSDefineShape3, FSDefineMorphShape, FSDefineFont and FSDefineFont2.</p>
+
+<p>Lazy decoding provides an enormous increase in performance. Benchmark tests
+when decoding files gave average performance increases of 15 times - with a 
+range between 0 and 420 times. Larger files gave larger performance gains.<p>
+
+<p>This is particularly important when using existing Flash files as a 
+template for customization. Simply replacing images, text and sound in a file
+does not typically need font glyphs and shapes to be decoded and using lazy 
+decoding can dramatically increase performance.</p>
+
+<P>Lazy decoding and encoding does not require any API changes.</p>
+
+<h3><a name="int3">3. Improved decoding of JPEG image data.</a></h3>  
+
+<p>Improved the algorithm when decoding the encoding table in the classes
+FSDefineJPEGImage2 and FSDefineJPEGImage3. The encoding table is now processed 
+correctly.</p>
+
+</div><!-- section -->
+
+
+<h2>Package Changes</H2>  
+
+<div class="section">
+
+<h3><a name="package1">1. Merged Transform and Tranform Utilities.</a></h3>
+
+<p>Merged the classes from Transform Utilities into the Transform framework to 
+create a single release.</p>
+
+</div><!-- section -->
+
+<h2>Additional Information</h2>
+
+<div class="section">
+<p>For Further Information please contact:</p>
+
+<p>Stuart MacKay<br/>
+Flagstone Software Ltd.<br/>
+92 High Street<br/>
+Wick, Caithness KW1 4LY<br/>
+Scotland<br/><br/>
+www.flagstonesoftware.com
+</div><!-- section -->
+</body>
+</html>

Modified: trunk/test/suites/FSMovie.xml
===================================================================
--- trunk/test/suites/FSMovie.xml	2006-03-05 16:40:09 UTC (rev 119)
+++ trunk/test/suites/FSMovie.xml	2006-03-05 18:40:40 UTC (rev 120)
@@ -267,7 +267,7 @@
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="lazyDecoding"/>
+      				<include name="lazyDecode"/>
       			</methods>
       		</class>
 		</classes>
@@ -279,7 +279,7 @@
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="lazyDecoding"/>
+      				<include name="lazyDecode"/>
       			</methods>
       		</class>
 		</classes>
@@ -291,7 +291,7 @@
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="lazyDecoding"/>
+      				<include name="lazyDecode"/>
       			</methods>
       		</class>
 		</classes>
@@ -303,7 +303,7 @@
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="lazyDecoding"/>
+      				<include name="lazyDecode"/>
       			</methods>
       		</class>
 		</classes>
@@ -314,11 +314,11 @@
     -->
     <test name="Lazy Encoding SWF4">
 		<parameter name="srcDir" value="test/data/movies/swf4"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncode/swf4"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="lazyEncoding"/>
+      				<include name="lazyEncode"/>
       			</methods>
       		</class>
 		</classes>
@@ -326,11 +326,11 @@
 
     <test name="Lazy Encoding SWF5">
 		<parameter name="srcDir" value="test/data/movies/swf5"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncode/swf5"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="lazyEncoding"/>
+      				<include name="lazyEncode"/>
       			</methods>
       		</class>
 		</classes>
@@ -338,11 +338,11 @@
 
     <test name="Lazy Encoding SWF6">
 		<parameter name="srcDir" value="test/data/movies/swf6"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncode/swf6"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="lazyEncoding"/>
+      				<include name="lazyEncode"/>
       			</methods>
       		</class>
 		</classes>
@@ -350,11 +350,11 @@
 
     <test name="Lazy Encoding SWF7">
 		<parameter name="srcDir" value="test/data/movies/swf7"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncode/swf7"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
-      				<include name="lazyEncoding"/>
+      				<include name="lazyEncode"/>
       			</methods>
       		</class>
 		</classes>
@@ -365,8 +365,8 @@
         the reference files. 
     -->
     <test name="Encode ToText SWF4">
-		<parameter name="srcDir" value="test/results/FSMovie/lazyEncoding/swf4"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf4"/>
+		<parameter name="srcDir" value="test/results/FSMovie/lazyEncode/swf4"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncode/swf4"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -377,8 +377,8 @@
   	</test>
 
     <test name="Encode ToText SWF5">
-		<parameter name="srcDir" value="test/results/FSMovie/lazyEncoding/swf5"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf5"/>
+		<parameter name="srcDir" value="test/results/FSMovie/lazyEncode/swf5"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncode/swf5"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -389,8 +389,8 @@
   	</test>
 
     <test name="Encode ToText SWF6">
-		<parameter name="srcDir" value="test/results/FSMovie/lazyEncoding/swf6"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf6"/>
+		<parameter name="srcDir" value="test/results/FSMovie/lazyEncode/swf6"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncode/swf6"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>
@@ -401,8 +401,8 @@
   	</test>
 
     <test name="Encode ToText SWF7">
-		<parameter name="srcDir" value="test/results/FSMovie/lazyEncoding/swf7"/>
-		<parameter name="dstDir" value="test/results/FSMovie/lazyEncoding/swf7"/>
+		<parameter name="srcDir" value="test/results/FSMovie/lazyEncode/swf7"/>
+		<parameter name="dstDir" value="test/results/FSMovie/lazyEncode/swf7"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSMovieTest">
       			<methods>

Modified: trunk/test/suites/FSMovieReference.xml
===================================================================
--- trunk/test/suites/FSMovieReference.xml	2006-03-05 16:40:09 UTC (rev 119)
+++ trunk/test/suites/FSMovieReference.xml	2006-03-05 18:40:40 UTC (rev 120)
@@ -2,6 +2,8 @@
   
 <suite name="FSMovie">
 	
+    <parameter name="logFile" value=""/>
+
 	<!--
 	    Create text dumps of the movies to use as a reference for comparing
 	    the files saved by the encode and clone tests.



From smackay at berlios.de  Mon Mar  6 21:34:35 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Mon, 6 Mar 2006 21:34:35 +0100
Subject: [Transform-svn] r121 - trunk/test/data
Message-ID: <200603062034.k26KYZgB026576@sheep.berlios.de>

Author: smackay
Date: 2006-03-06 21:34:33 +0100 (Mon, 06 Mar 2006)
New Revision: 121

Modified:
   trunk/test/data/readme.txt
Log:
Finished release notes for 2.1 and updated class data sheets.

Modified: trunk/test/data/readme.txt
===================================================================
--- trunk/test/data/readme.txt	2006-03-05 18:40:40 UTC (rev 120)
+++ trunk/test/data/readme.txt	2006-03-06 20:34:33 UTC (rev 121)
@@ -11,6 +11,38 @@
 version - Please see the TestBG scripts included in the test\suites directory 
 for more information.
 
+The directory tree, as assumed in the TestNG scripts has the following structure:
+
+ data
+   |
+   +- fonts
+   |    |
+   |    + vera
+   |    ...
+   |
+   +- images
+   |    |
+   |    +- bmp
+   |    +- jpg
+   |    +- png
+   |
+   +- movies
+   |    |
+   |    +- swf4
+   |    +- swf5
+   |    +- swf6
+   |    +- swf7
+   |
+   +- sounds
+        |
+        + mp3
+        + wav
+        
+
+Place files for testing in the appropriate directories. Each directory is 
+assumed to contain one type of file. Please review the code used to run the 
+tests before mixing different types of files together.
+
 -------------
   IMPORTANT
 -------------
@@ -19,7 +51,7 @@
 and so providing a comprehensive list would make downloads prohibitively large.
 Other reasons include copyright or other licencing issues - many real-world Flash 
 files provide a great way for testing the way Transform SWF decodes and encodes 
-Flash files.
+Flash files but cannot be distributed.
 
 --------------------------------
   Useful Sources for Test Data



From smackay at berlios.de  Mon Mar  6 21:34:52 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Mon, 6 Mar 2006 21:34:52 +0100
Subject: [Transform-svn] r122 - trunk
Message-ID: <200603062034.k26KYqQ9026607@sheep.berlios.de>

Author: smackay
Date: 2006-03-06 21:34:50 +0100 (Mon, 06 Mar 2006)
New Revision: 122

Removed:
   trunk/contrib/
Log:
Finished release notes for 2.1 and updated class data sheets.



From smackay at berlios.de  Mon Mar  6 21:35:09 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Mon, 6 Mar 2006 21:35:09 +0100
Subject: [Transform-svn] r123 - trunk/src/com/flagstone/transform
Message-ID: <200603062035.k26KZ9N3026641@sheep.berlios.de>

Author: smackay
Date: 2006-03-06 21:35:03 +0100 (Mon, 06 Mar 2006)
New Revision: 123

Modified:
   trunk/src/com/flagstone/transform/FSBitmapFill.java
   trunk/src/com/flagstone/transform/FSCoder.java
   trunk/src/com/flagstone/transform/FSEnableDebugger.java
   trunk/src/com/flagstone/transform/FSEnableDebugger2.java
   trunk/src/com/flagstone/transform/FSMorphBitmapFill.java
   trunk/src/com/flagstone/transform/FSMovieObject.java
Log:
Finished release notes for 2.1 and updated class data sheets.

Modified: trunk/src/com/flagstone/transform/FSBitmapFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSBitmapFill.java	2006-03-06 20:34:50 UTC (rev 122)
+++ trunk/src/com/flagstone/transform/FSBitmapFill.java	2006-03-06 20:35:03 UTC (rev 123)
@@ -152,7 +152,7 @@
     /**
      * Construct an FSBitmapFill object by copying an existing object.
      * 
-     * @param object an FSBitmapFill object. 
+     * @param obj an FSBitmapFill object. 
      */
     public FSBitmapFill(FSBitmapFill obj)
     {

Modified: trunk/src/com/flagstone/transform/FSCoder.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCoder.java	2006-03-06 20:34:50 UTC (rev 122)
+++ trunk/src/com/flagstone/transform/FSCoder.java	2006-03-06 20:35:03 UTC (rev 123)
@@ -441,7 +441,7 @@
      * range supported by the buffer then an IllegalArgumentException will
      * be thrown.
      *  
-     * @param offset the offset in bits from the start of the array of bytes.
+     * @param location the offset in bits from the start of the array of bytes.
      */
     public void setPointer(int location)
     {
@@ -759,7 +759,7 @@
      * Write a fixed point number, in either (8.8) or (16.16) format to a bit 
      * field.
      * 
-     * @param the value to be ecoded.
+     * @param value the value to be ecoded.
      * @param numberOfBits the number of bits the number is encoded in.
      * @param fractionSize the number of bits occupied by the fractional
      * part of the number. The integer part will be signed extended.
@@ -792,7 +792,7 @@
      * Write a fixed point number, in either (8.8) or (16.16) format to a 
      * word field, accounting for the byte-ordering used.
      * 
-     * @value the value to be written.
+     * @param value the value to be written.
      * @param mantissaSize the number of bits occupied by the integer
      * part of the number.
      * @param fractionSize the number of bits occupied by the fractional

Modified: trunk/src/com/flagstone/transform/FSEnableDebugger.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnableDebugger.java	2006-03-06 20:34:50 UTC (rev 122)
+++ trunk/src/com/flagstone/transform/FSEnableDebugger.java	2006-03-06 20:35:03 UTC (rev 123)
@@ -77,7 +77,7 @@
     /** 
      * Constructs an FSEnableDebugger2 object with an MD5 encrypted password.
      *
-     * @param aString the string defining the password.
+     * @param password the string defining the password.
      */
     public FSEnableDebugger(String password)
     {

Modified: trunk/src/com/flagstone/transform/FSEnableDebugger2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnableDebugger2.java	2006-03-06 20:34:50 UTC (rev 122)
+++ trunk/src/com/flagstone/transform/FSEnableDebugger2.java	2006-03-06 20:35:03 UTC (rev 123)
@@ -74,7 +74,7 @@
     /** 
      * Constructs an FSEnableDebugger2 object with an MD5 encrypted password.
      *
-     * @param aString the string defining the password.
+     * @param password the string defining the password.
      */
     public FSEnableDebugger2(String password)
     {

Modified: trunk/src/com/flagstone/transform/FSMorphBitmapFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphBitmapFill.java	2006-03-06 20:34:50 UTC (rev 122)
+++ trunk/src/com/flagstone/transform/FSMorphBitmapFill.java	2006-03-06 20:35:03 UTC (rev 123)
@@ -111,7 +111,7 @@
     /**
      * Construct an FSMorphBitmapFill object by copying an existing object.
      * 
-     * @param object an FSMorphBitmapFill object. 
+     * @param obj an FSMorphBitmapFill object. 
      */
     public FSMorphBitmapFill(FSMorphBitmapFill obj)
     {

Modified: trunk/src/com/flagstone/transform/FSMovieObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovieObject.java	2006-03-06 20:34:50 UTC (rev 122)
+++ trunk/src/com/flagstone/transform/FSMovieObject.java	2006-03-06 20:35:03 UTC (rev 123)
@@ -171,7 +171,7 @@
     /**
      * Constructs a movie object by copying an existing one.
      * 
-     * @param aType an identifier indicating the type of movie object.
+     * @param obj an FSMovieObject object. 
      */
     protected FSMovieObject(FSMovieObject obj)
     {



From smackay at berlios.de  Mon Mar  6 21:35:30 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Mon, 6 Mar 2006 21:35:30 +0100
Subject: [Transform-svn] r124 - trunk/src
Message-ID: <200603062035.k26KZUAv026666@sheep.berlios.de>

Author: smackay
Date: 2006-03-06 21:35:27 +0100 (Mon, 06 Mar 2006)
New Revision: 124

Added:
   trunk/src/transform/
Log:
Finished release notes for 2.1 and updated class data sheets.



From smackay at berlios.de  Tue Mar  7 12:44:51 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Tue, 7 Mar 2006 12:44:51 +0100
Subject: [Transform-svn] r126 - in trunk/src/transform: . contrib
Message-ID: <200603071144.k27BipgM018864@sheep.berlios.de>

Author: smackay
Date: 2006-03-07 12:44:27 +0100 (Tue, 07 Mar 2006)
New Revision: 126

Added:
   trunk/src/transform/contrib/
   trunk/src/transform/contrib/ADPCM.java
Log:
Added ADPCM to contributions package.

Added: trunk/src/transform/contrib/ADPCM.java
===================================================================
--- trunk/src/transform/contrib/ADPCM.java	2006-03-07 11:37:36 UTC (rev 125)
+++ trunk/src/transform/contrib/ADPCM.java	2006-03-07 11:44:27 UTC (rev 126)
@@ -0,0 +1,264 @@
+/*
+ * ADPCM.java
+ *
+ * This code was ported and updated to Java from C code provided by
+ * 
+ * Jack Jansen
+ * Centre for Mathematics and Computer Science
+ * Kruislaan 413
+ * Amsterdam
+ * the Netherlands
+ *
+ * +31 20 592 4098
+ * Jack.Jansen at cwi.nl
+ *
+ * The original copyright notice accompanying the code is reproduced in 
+ * full below:
+ * 
+ ***************************************************************************
+  Copyright 1992 by Stichting Mathematisch Centrum, Amsterdam, The
+  Netherlands.
+
+						All Rights Reserved
+
+  Permission to use, copy, modify, and distribute this software and its 
+  documentation for any purpose and without fee is hereby granted, 
+  provided that the above copyright notice appear in all copies and that
+  both that copyright notice and this permission notice appear in 
+  supporting documentation, and that the names of Stichting Mathematisch
+  Centrum or CWI not be used in advertising or publicity pertaining to
+  distribution of the software without specific, written prior permission.
+
+  STICHTING MATHEMATISCH CENTRUM DISCLAIMS ALL WARRANTIES WITH REGARD TO
+  THIS SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
+  FITNESS, IN NO EVENT SHALL STICHTING MATHEMATISCH CENTRUM BE LIABLE
+  FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
+  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
+  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
+  OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
+
+***************************************************************************
+*
+* The changes made by Flagstone are distributed on an 'AS IS' basis, WITHOUT 
+* WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, AND Flagstone HEREBY DISCLAIMS 
+* ALL SUCH WARRANTIES, INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF 
+* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT OF THIRD 
+* PARTY RIGHTS.
+*/
+package transform.contrib;
+
+import com.flagstone.transform.FSCoder;
+
+/** 
+ * The ADPCM class can be used to compress PCM encoded sounds to the more 
+ * efficient ADPCM format. ADPCM is a compressed format and Flash supports a 
+ * modified ADPCM algorithm with compressed samples taking 2, 3, 4 or 5 bits. 
+ * This results in much smaller file sizes when a movie is encoded.
+ *
+ * <b>Examples</b>
+ *
+ * The following code sample illustrates how to use the ADPCM class to add 
+ * sounds to a Flash file.
+ *
+ * int soundId = movie.newIdentifier();
+ * int compressedSize = 5;
+ *
+ * FSSoundConstructor soundGenerator = new FSSoundConstructor("sound.wav");
+ * 
+ * int channelCount = soundGenerator.getNumberOfChannels();
+ * int sampleCount = soundGenerator.getSamplesPerChannel();
+ * int sampleRate = soundGenerator.getSamplesRate();
+ * int sampleSize = soundGenerator.getSamplesSize();
+ *
+ * byte[] compressedSound = ADPCM.compress(soundGenerator.getSound(), 
+ *     channelCount, sampleSize, compressedSize);
+ * 
+ * soundGenerator.setSound(FSSound.ADPCM, channelCount, sampleCount, sampleRate, 
+ *     sampleSize, compressedSound);
+ *
+ * movie.add(soundGenerator.defineSound(soundId));
+ * movie.add(new FSStartSound(FSSound(soundId, FSSound.Start)));
+ *
+ */
+public final class ADPCM
+{
+	private static final int[] StepSize =  
+	{
+		7, 8, 9, 10, 11, 12, 13, 14, 16, 17,
+		19, 21, 23, 25, 28, 31, 34, 37, 41, 45,
+		50, 55, 60, 66, 73, 80, 88, 97, 107, 118,
+		130, 143, 157, 173, 190, 209, 230, 253, 279, 307,
+		337, 371, 408, 449, 494, 544, 598, 658, 724, 796,
+		876, 963, 1060, 1166, 1282, 1411, 1552, 1707, 1878, 2066,
+		2272, 2499, 2749, 3024, 3327, 3660, 4026, 4428, 4871, 5358,
+		5894, 6484, 7132, 7845, 8630, 9493, 10442, 11487, 12635, 13899,
+		15289, 16818, 18500, 20350, 22385, 24623, 27086, 29794, 32767
+	};
+        
+	private static final int[][] DeltaTable = 
+	{
+		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
+		{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
+		{ -1,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
+		{ -1, -1,  2,  4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
+		{ -1, -1, -1, -1,  2,  4,  6,  8, -1, -1, -1, -1, -1, -1, -1, -1 },
+		{ -1, -1, -1, -1, -1, -1, -1, -1,  1,  2,  4,  6,  8, 10, 13, 16 },
+	};
+
+    /**
+     * Compresses a little-endian, PCM format sound to ADPCM. This method should 
+     * only be used with sounds in the FSSound.PCM format since the byte-order 
+     * in FSSound.NATIVE_PCM is platform dependent.
+     * 
+     * @param sound an array of bytes containing the sound samples.
+     * 
+     * @param numberOfChannels the number of channels in the sound, typically
+     * 1 (mono) or 2 (stereo).
+     * 
+     * @param sampleSize the size of each sound sample in bytes, typically 1 or 2.
+     * 
+     * @param compressedSize the number of bits to compress each sound sample to.
+     * Flash supports sample sizes in the range 2..5 bits.
+     * 
+     * @return an array of bytes containing the compressed sound.
+     */
+    public static byte[] compress(byte[] sound, int numberOfChannels, int sampleSize, int compressedSize)
+    {
+		int samplesPerFrame = 4096;
+    	
+        // Calculate size of encoded data 
+        
+		int numberOfSamples = sound.length / sampleSize;
+		int samplesPerChannel = numberOfSamples / numberOfChannels;
+		int numberOfFrames = (samplesPerChannel + 4095) / 4096;
+        
+		int frameSize = (16 + 6 + samplesPerFrame * compressedSize) * numberOfChannels;
+		int lastFrameSize = (16 + 6 + (samplesPerChannel % samplesPerFrame) * compressedSize) * numberOfChannels;
+		int bytesPerFrame = (frameSize + 7) >> 3;
+        
+		byte[] out = new byte[numberOfFrames*bytesPerFrame];
+
+        /*
+         * Expand the sound data to 16-bit samples.
+         */
+        int[] samples = new int[numberOfSamples];
+        
+        FSCoder soundIn = new FSCoder(FSCoder.LITTLE_ENDIAN, sound);
+        
+        for (int i=0; i<numberOfSamples; i++)
+            samples[i] = soundIn.readWord(sampleSize*8, true);
+
+        /*
+         * Allocate an initialize arrays to hold value, the index into the step
+         * size table and the step size for the current sample in each channel.
+         */
+        int[] value = new int[numberOfChannels];
+        int[] tableIndex = new int[numberOfChannels];
+        int[] step = new int[numberOfChannels];
+
+        for (int chan=0; chan<numberOfChannels; chan++)
+        {
+            value[chan] = 0;
+            tableIndex[chan] = 0;
+            step[chan] = 0;
+        }
+
+        int currentSample = 0;
+
+        FSCoder compressedData = new FSCoder(FSCoder.LITTLE_ENDIAN, new byte[numberOfSamples*sampleSize]);
+
+		/*
+		 * ADPCM encoded sounds in Flash start with a 2-bit field contains the 
+		 * number of bits per sample minus 2.
+		 */
+        compressedData.writeBits(compressedSize-2, 2);
+
+        for (int i=0; i<samplesPerChannel-1; i++)
+        {
+            if (i % 4096 == 0) // start a new packet every 4096 samples
+            {
+				compressedData.alignToByte();
+            	
+                for (int chan=0; chan<numberOfChannels; chan++, currentSample++)
+                {
+                    value[chan] = samples[currentSample];
+                    
+                    int diff = Math.abs(samples[currentSample+numberOfChannels] - value[chan]);
+
+                    // Calculate initial index & step
+
+                    int index = 0;
+
+                    while (StepSize[index] < diff && index < 63)
+                        index ++;
+
+                    tableIndex[chan] = index;
+                    step[chan] = StepSize[index];
+
+                    // Write initial index into StepSizeTable
+                    
+                    compressedData.writeBits(value[chan], 16);
+                    compressedData.writeBits(tableIndex[chan], 6);
+                }
+            }
+            else
+            {
+                for (int chan=0; chan<numberOfChannels; chan++, currentSample++)
+                {
+                    // Step 1 - compute difference with previous value
+                    
+                    int diff = samples[currentSample] - value[chan];
+                    int sign = (diff < 0) ? (1 << (compressedSize-1)) : 0;
+
+                    if (sign > 0) diff = (-diff);
+
+                    // Step 2 - Divide and clamp
+                    int delta  = 0;
+                    int vpdiff = step[chan] >> (compressedSize-1);
+
+                    for (int j=compressedSize-2; j>=0; j--, step[chan] >>= 1)
+                    {
+                        if (diff >= step[chan])
+                        {
+                            delta = delta | (1 << j);
+                            vpdiff += step[chan];
+                            
+                            if (j > 0)
+                                diff -= step[chan];
+                        }
+                    }
+
+                    // Step 3 - Update previous value
+                    if (sign > 0)
+                        value[chan] -= vpdiff;
+                    else
+                        value[chan] += vpdiff;
+
+                    // Step 4 - Clamp previous value to 16 bits
+                    if (value[chan] > 32767) value[chan] = 32767;
+                    if (value[chan] < -32768) value[chan] = -32768;
+
+                    // Step 5 - Assemble value, update index and step values
+
+                    tableIndex[chan] += DeltaTable[compressedSize][delta];
+
+                    // Clamp StepSizeTable index
+                    if (tableIndex[chan] < 0) tableIndex[chan] = 0;
+                    if (tableIndex[chan] > 88) tableIndex[chan] = 88;
+                    
+                    step[chan] = StepSize[tableIndex[chan]];
+
+                    // Step 6 - Output value
+                    compressedData.writeBits(delta |= sign, compressedSize);
+                }
+            }
+        }
+
+        int compressedLength = compressedData.getPointer() / 8;
+
+        for (int i=0; i<compressedLength; i++)
+            out[i] = compressedData.getData()[i];
+
+		return out;
+	}
+}



From smackay at berlios.de  Tue Mar  7 18:48:13 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Tue, 7 Mar 2006 18:48:13 +0100
Subject: [Transform-svn] r127 - trunk/doc
Message-ID: <200603071748.k27HmDsU014313@sheep.berlios.de>

Author: smackay
Date: 2006-03-07 18:48:09 +0100 (Tue, 07 Mar 2006)
New Revision: 127

Removed:
   trunk/doc/datasheets/
Log:
Removed doc/datasheets directory from revision control - the
datasheets are generated from the source code and so there is no
need to have them in the repository.



From smackay at berlios.de  Tue Mar  7 18:49:57 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Tue, 7 Mar 2006 18:49:57 +0100
Subject: [Transform-svn] r128 - trunk/doc
Message-ID: <200603071749.k27HnvgX016551@sheep.berlios.de>

Author: smackay
Date: 2006-03-07 18:49:46 +0100 (Tue, 07 Mar 2006)
New Revision: 128

Modified:
   trunk/doc/
Log:
Updated


Property changes on: trunk/doc
___________________________________________________________________
Name: svn:ignore
   + 
datasheets




From smackay at berlios.de  Tue Mar  7 18:50:56 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Tue, 7 Mar 2006 18:50:56 +0100
Subject: [Transform-svn] r129 - trunk
Message-ID: <200603071750.k27HouUJ017638@sheep.berlios.de>

Author: smackay
Date: 2006-03-07 18:50:52 +0100 (Tue, 07 Mar 2006)
New Revision: 129

Modified:
   trunk/developer.xml
Log:
Datasheets are generated directly to the release directory rather 
than copying files from doc/datasheets.

Modified: trunk/developer.xml
===================================================================
--- trunk/developer.xml	2006-03-07 17:49:46 UTC (rev 128)
+++ trunk/developer.xml	2006-03-07 17:50:52 UTC (rev 129)
@@ -53,8 +53,10 @@
 <!-- ***************************************
        Package the files for distribution.
      *************************************** --> 
-    <target name="dist" depends="build,docs" description="Create a full distribution">
+    <target name="dist" depends="build" description="Create a full distribution">
         
+        <delete dir="${dist.dir}" failonerror="false"/>
+
         <mkdir dir="${dist.dir}"/>
             
         <copy todir="${dist.dir}/src" overwrite="true">
@@ -69,9 +71,11 @@
             </fileset>
         </copy>
 
-        <copy todir="${dist.dir}/doc" overwrite="true">
-            <fileset dir="doc"/>
-        </copy>
+        <javadoc destdir="${dist.dir}/doc" stylesheetfile="${doc.css.dir}/datasheet.css">
+            <packageset dir="${src.dir}" defaultexcludes="yes">
+                <include name="${package.dir}" />
+            </packageset>
+        </javadoc>
 
         <copy todir="${dist.dir}/test" overwrite="true">
             <fileset dir="test">



From smackay at berlios.de  Tue Mar  7 19:50:51 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Tue, 7 Mar 2006 19:50:51 +0100
Subject: [Transform-svn] r130 - in trunk: . doc/releases
Message-ID: <200603071850.k27IopLK013636@sheep.berlios.de>

Author: smackay
Date: 2006-03-07 19:50:45 +0100 (Tue, 07 Mar 2006)
New Revision: 130

Modified:
   trunk/developer.xml
   trunk/doc/releases/index.html
Log:
Restored way datasheets were generated. The dist target now calls 
doc rather than generating the datasheets independently.

Modified: trunk/developer.xml
===================================================================
--- trunk/developer.xml	2006-03-07 17:50:52 UTC (rev 129)
+++ trunk/developer.xml	2006-03-07 18:50:45 UTC (rev 130)
@@ -53,7 +53,7 @@
 <!-- ***************************************
        Package the files for distribution.
      *************************************** --> 
-    <target name="dist" depends="build" description="Create a full distribution">
+    <target name="dist" depends="build,docs" description="Create a full distribution">
         
         <delete dir="${dist.dir}" failonerror="false"/>
 
@@ -71,11 +71,9 @@
             </fileset>
         </copy>
 
-        <javadoc destdir="${dist.dir}/doc" stylesheetfile="${doc.css.dir}/datasheet.css">
-            <packageset dir="${src.dir}" defaultexcludes="yes">
-                <include name="${package.dir}" />
-            </packageset>
-        </javadoc>
+        <copy todir="${dist.dir}/doc" overwrite="true">
+            <fileset dir="doc"/>
+        </copy>
 
         <copy todir="${dist.dir}/test" overwrite="true">
             <fileset dir="test">

Modified: trunk/doc/releases/index.html
===================================================================
--- trunk/doc/releases/index.html	2006-03-07 17:50:52 UTC (rev 129)
+++ trunk/doc/releases/index.html	2006-03-07 18:50:45 UTC (rev 130)
@@ -20,9 +20,21 @@
 <th class="description">Details</th>
 </tr>
 
+<tr class="even">
+<td class="date">7th March 2006</td>
+<td class="version">2.1</td>
+<td class="description">
+Release now integrates Transform Utilities. Brought forward several improvements
+planned for version 3.0.
+</td>
+<td class="release">
+<a href="transform-2.1.html">release notes</a>
+</td>
+</tr>
+
 <tr class="odd">
 <td class="date">20th February 2006</td>
-<td class="version">2.0.4</td>
+<td class="version">2.0.5</td>
 <td class="description">
 More bug fixes discovered using new test suites.
 </td>



From smackay at berlios.de  Tue Mar  7 19:52:19 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Tue, 7 Mar 2006 19:52:19 +0100
Subject: [Transform-svn] r131 - tags
Message-ID: <200603071852.k27IqJbT014247@sheep.berlios.de>

Author: smackay
Date: 2006-03-07 19:52:13 +0100 (Tue, 07 Mar 2006)
New Revision: 131

Added:
   tags/rel-2-1/
Log:
Tag for release 2.1

Copied: tags/rel-2-1 (from rev 130, trunk)



From smackay at berlios.de  Fri Mar 10 19:51:42 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 10 Mar 2006 19:51:42 +0100
Subject: [Transform-svn] r132 - trunk/test/suites
Message-ID: <200603101851.k2AIpgbU007318@sheep.berlios.de>

Author: smackay
Date: 2006-03-10 19:51:36 +0100 (Fri, 10 Mar 2006)
New Revision: 132

Modified:
   trunk/test/suites/FSSoundConstructor.xml
Log:
Added tests for mp3 files.

Modified: trunk/test/suites/FSSoundConstructor.xml
===================================================================
--- trunk/test/suites/FSSoundConstructor.xml	2006-03-07 18:52:13 UTC (rev 131)
+++ trunk/test/suites/FSSoundConstructor.xml	2006-03-10 18:51:36 UTC (rev 132)
@@ -32,5 +32,31 @@
 		</classes>
   	</test>
 
+    <test name="MP3 Sounds - Event">
+		<parameter name="srcDir" value="test/data/sounds/mp3"/>
+		<parameter name="dstDir" value="test/results/FSSoundConstructor/event/mp3"/>
+		<parameter name="ext" value="mp3"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSSoundConstructorTest">
+      		    <methods>
+      				<include name="playEventSound" />
+    			</methods>
+      		</class>
+		</classes>
+  	</test>
+  	
+    <test name="MP3 Sounds - Streaming">
+		<parameter name="srcDir" value="test/data/sounds/mp3"/>
+		<parameter name="dstDir" value="test/results/FSSoundConstructor/streaming/mp3"/>
+		<parameter name="ext" value="mp3"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSSoundConstructorTest">
+      		    <methods>
+      				<include name="playStreamingSound" />
+    			</methods>
+      		</class>
+		</classes>
+  	</test>
+
 </suite>
 



From smackay at berlios.de  Fri Mar 10 19:55:52 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 10 Mar 2006 19:55:52 +0100
Subject: [Transform-svn] r133 - in trunk: doc src/com/flagstone/transform src/com/flagstone/transform/util
Message-ID: <200603101855.k2AItq4N009100@sheep.berlios.de>

Author: smackay
Date: 2006-03-10 19:55:44 +0100 (Fri, 10 Mar 2006)
New Revision: 133

Modified:
   trunk/doc/CHANGES.txt
   trunk/src/com/flagstone/transform/FSCoder.java
   trunk/src/com/flagstone/transform/util/FSSoundConstructor.java
Log:
Fixed the infinite loop problem when decoding MP3 files.

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-10 18:51:36 UTC (rev 132)
+++ trunk/doc/CHANGES.txt	2006-03-10 18:55:44 UTC (rev 133)
@@ -1,3 +1,14 @@
+2006-03-10 - smackay at flagstonesoftware.com
+
+    * Fixed the inifinite loop problem when decoding MP3 files. Also updated 
+      FSCodec.adjustPointer so it clamps to the start/end of buffer instead 
+      of throwing an exception so we can safely handle MP3 frames that end 
+      prematurely.
+    
+2006-03-07 - smackay at flagstonesoftware.com
+
+    * Released 2.1.
+    
 2006-03-06 - smackay at flagstonesoftware.com
 
     * Finished release notes for 2.1.

Modified: trunk/src/com/flagstone/transform/FSCoder.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCoder.java	2006-03-10 18:51:36 UTC (rev 132)
+++ trunk/src/com/flagstone/transform/FSCoder.java	2006-03-10 18:55:44 UTC (rev 133)
@@ -452,18 +452,20 @@
     }
     /**
      * Adds offset, in bits, to the internal pointer to change the location 
-     * where the next value will be read or written. If the offset falls outside 
-     * of the range supported by the buffer then an IllegalArgumentException 
-     * will be thrown.
+     * where the next value will be read or written. If the adjust causes the 
+     * point to fall outside the bounds of the internal data then the value 
+     * is clamped to either the start of end of the array.
      *  
      * @param offset the offset in bits from the start of the array of bytes.
      */
     public void adjustPointer(int offset)
     {
-        if (ptr+offset < 0 || ptr+offset > end)
-            throw new IllegalArgumentException();
+        ptr += offset;
 
-        ptr += offset;
+        if (ptr < 0)
+            ptr = 0;
+        else if (ptr >= end)
+            ptr = end;
     }
     /**
      * Moves the internal pointer forward so it is aligned on a byte boundary. 
@@ -983,6 +985,7 @@
     public boolean findBits(int value, int numberOfBits, int step)
     {
         boolean found = false;
+        int start = ptr;
         
         for (; ptr < end; ptr += step)
         {
@@ -992,6 +995,9 @@
                 break;
             }
         }
+        if (found == false)
+            ptr = start;
+            
         return found;
     }
     /**

Modified: trunk/src/com/flagstone/transform/util/FSSoundConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSSoundConstructor.java	2006-03-10 18:51:36 UTC (rev 132)
+++ trunk/src/com/flagstone/transform/util/FSSoundConstructor.java	2006-03-10 18:55:44 UTC (rev 133)
@@ -519,28 +519,68 @@
 
     private void decodeMP3(byte[] bytes) throws DataFormatException
     {
-        FSCoder coder = new FSCoder(FSCoder.LITTLE_ENDIAN, bytes);
+        FSCoder coder = new FSCoder(FSCoder.BIG_ENDIAN, bytes);
         
+        int numberOfFrames = 0;
+        int frameStart = 0;
+
         format = FSSound.MP3;
         sampleSize = 2;
         
-        coder.findBits(0x7FF, 11, 8);
+        while (coder.eof() == false)
+        {        
+            if (coder.scanWord(3, false) == 0x494433) // ID3
+            {
+                coder.adjustPointer(24); // ID3 signature                
+                coder.adjustPointer(8); // version number
+                coder.adjustPointer(8); // revision number
+                
+                coder.adjustPointer(1); // unsynchronized
+                coder.adjustPointer(1); // extendedHeader
+                coder.adjustPointer(1); // experimental
+                int hasFooter = coder.readBits(1, false);
+                
+                coder.adjustPointer(4);
+                
+                int totalLength = (hasFooter == 1) ? 10 : 0;
+
+                totalLength += coder.readWord(1, false) << 23;
+                totalLength += coder.readWord(1, false) << 15;
+                totalLength += coder.readWord(1, false) << 7;
+                totalLength += coder.readWord(1, false);
+
+                coder.adjustPointer(totalLength<<3);
+            }
+            else if (coder.scanWord(3, false) == 0x544147) // ID3 V1
+            {
+                coder.adjustPointer(128<<3);
+            }
+            else if (coder.scanBits(11, false) == 0x7FF) // MP3 frame
+            {
+                if (numberOfFrames == 0)
+                    frameStart = coder.getPointer();
+                
+                coder.adjustPointer(MP3FrameSize(coder) << 3);
+                numberOfFrames++;
+            }
+            else
+            {
+                /*
+                 * If we get here it means we jumped into the middle of either 
+                 * a frame or tag information. This appears to be a common
+                 * occurrence. Goto the end of the file so we can keep the 
+                 * frames found so far.
+                 */
+                coder.setPointer(bytes.length<<3);
+            }
+        }
+
+        int dataLength = bytes.length - (frameStart >> 3);
         
-        int frameStart = coder.getPointer();
-        int dataLength = coder.getCapacity() - (coder.getPointer() >> 3);
-        
         sound = new byte[dataLength];
         
-        System.arraycopy(coder.getData(), (coder.getPointer() >> 3), sound, 0, dataLength);
+        System.arraycopy(bytes, frameStart>>3, sound, 0, dataLength);
         
-        int numberOfFrames = 0;
-        
-        while (coder.findBits(0x7FF, 11, 8))
-        {
-            coder.adjustPointer(MP3FrameSize(coder) << 3);
-            numberOfFrames++;
-        }
-        
         frameTable = new int[numberOfFrames][2];
         
         for (int i=0; i<numberOfFrames; i++)
@@ -548,7 +588,7 @@
             frameTable[i][0] = -1;
             frameTable[i][1] = 0;
         }
-            
+
         coder.setPointer(frameStart);
         
         int frameNumber = 0;



From smackay at berlios.de  Mon Mar 13 17:56:49 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Mon, 13 Mar 2006 17:56:49 +0100
Subject: [Transform-svn] r134 - in trunk: . doc doc/releases
Message-ID: <200603131656.k2DGunIO020731@sheep.berlios.de>

Author: smackay
Date: 2006-03-13 17:56:43 +0100 (Mon, 13 Mar 2006)
New Revision: 134

Added:
   trunk/doc/releases/transform-2.1.1.html
Modified:
   trunk/build.xml
   trunk/doc/CHANGES.txt
   trunk/doc/releases/index.html
Log:
Added documentation for release 2.1.1

Modified: trunk/build.xml
===================================================================
--- trunk/build.xml	2006-03-10 18:55:44 UTC (rev 133)
+++ trunk/build.xml	2006-03-13 16:56:43 UTC (rev 134)
@@ -37,7 +37,7 @@
 
     </description>
 
-    <property name="version" value="2.1"/>
+    <property name="version" value="2.1.1"/>
     
     <property name="src.dir" location="src"/>
     <property name="lib.dir" location="lib"/>

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-10 18:55:44 UTC (rev 133)
+++ trunk/doc/CHANGES.txt	2006-03-13 16:56:43 UTC (rev 134)
@@ -1,3 +1,7 @@
+2006-03-13 - smackay at flagstonesoftware.com
+
+    * Released 2.1.1.
+    
 2006-03-10 - smackay at flagstonesoftware.com
 
     * Fixed the inifinite loop problem when decoding MP3 files. Also updated 

Modified: trunk/doc/releases/index.html
===================================================================
--- trunk/doc/releases/index.html	2006-03-10 18:55:44 UTC (rev 133)
+++ trunk/doc/releases/index.html	2006-03-13 16:56:43 UTC (rev 134)
@@ -20,6 +20,16 @@
 <th class="description">Details</th>
 </tr>
 
+<tr class="odd">
+<td class="date">13th March 2006</td>
+<td class="version">2.1.1</td>
+<td class="description">
+Bug fix for the infinite loop problem when decoding MP3 files.</td>
+<td class="release">
+<a href="transform-2.1.1.html">release notes</a>
+</td>
+</tr>
+
 <tr class="even">
 <td class="date">7th March 2006</td>
 <td class="version">2.1</td>

Added: trunk/doc/releases/transform-2.1.1.html
===================================================================
--- trunk/doc/releases/transform-2.1.1.html	2006-03-10 18:55:44 UTC (rev 133)
+++ trunk/doc/releases/transform-2.1.1.html	2006-03-13 16:56:43 UTC (rev 134)
@@ -0,0 +1,80 @@
+<html>
+<head>
+<title>Release Notes for Transform SWF for Java, Version 2.1.1</title>
+<style type="text/CSS">
+<!--
+a:link { text-decoration: none; }
+a:visited { color: darkred; text-decoration: none; }
+a:active { text-decoration: none; }
+a:hover { color: #000066; text-decoration: none; }
+
+h1 { font-size: 140%; background-color: darkgray; padding: 3px 10px; }
+h2 { font-size: 120%; background-color: darkgray; padding: 3px 10px; }
+h3 { font-size: 110%; margin-bottom: 0px; }
+
+div.section { margin-left: 10px; margin-right: 10px; }
+
+p { margin-top: 0px; }
+pre { font-size: 90%; }
+ul { margin-left: 10px; }
+ul ol { margin-left: 10px; }
+table { margin-left: 10px;}
+-->
+</style>
+</head>
+<body>
+
+<h1>Release Notes for Transform SWF for Java, Version 2.1.1.</h1>
+
+<div class="section">
+<P>This a minor release fixing bugs.</P>
+
+</div><!-- section -->
+
+<ul>
+<li>Bug Fixes     
+<ol>     
+<li><a href="#fix1">FSSoundConstructor: Now decodes MP3 files correctly.</a></li>     
+</ol> 
+</li> 
+</ul>  
+</div><!-- section -->
+
+<h2>Bug Fixes</H2>  
+
+<div class="section">
+<h3><a name="fix1">1. FSSoundConstructor: Now decodes MP3 files correctly.</a></h3>  
+
+<P>When an MP3 file contained a trailing ID3 block that overwrote part of the
+last frame in a file the decoder would scan this block for a new start of frame
+marker. If the scanning process started less than 11 bits (the size of the marker)
+from the end of the file then the method FSCodec.findBits() would go into an
+infinite loop.</P> 
+
+<p>The cause was a bug in the way the findBits() method stepped through a block
+of data. If a read using the readBits() method would cause an overflow then the 
+value of the internal pointer would be clamped to the end of the file. The 
+pointer was then decremented by the size of the start of frame marker (11 bits)
+and incremented by the step size (8 bits). The next read would cause an overflow 
+so the pointer was clamped and the process repeated ad infinitum.</p>
+
+<p>The process of decoding MP3 files now checks whether a frame has ended 
+prematurely and the findBits() method now correctly adjusts for the actual 
+number of bits read - not the expected number.</P>
+
+</div><!-- section -->
+
+<h2>Additional Information</h2>
+
+<div class="section">
+<p>For Further Information please contact:</p>
+
+<p>Stuart MacKay<br/>
+Flagstone Software Ltd.<br/>
+92 High Street<br/>
+Wick, Caithness KW1 4LY<br/>
+Scotland<br/><br/>
+www.flagstonesoftware.com
+</div><!-- section -->
+</body>
+</html>



From smackay at berlios.de  Mon Mar 13 18:22:51 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Mon, 13 Mar 2006 18:22:51 +0100
Subject: [Transform-svn] r135 - tags
Message-ID: <200603131722.k2DHMp0J023131@sheep.berlios.de>

Author: smackay
Date: 2006-03-13 18:22:46 +0100 (Mon, 13 Mar 2006)
New Revision: 135

Added:
   tags/rel-2-1-1/
Log:
Files released in version 2.1.1

Copied: tags/rel-2-1-1 (from rev 134, trunk)



From smackay at berlios.de  Mon Mar 27 13:43:54 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Mon, 27 Mar 2006 13:43:54 +0200
Subject: [Transform-svn] r136 - trunk
Message-ID: <200603271143.k2RBhsUY008059@sheep.berlios.de>

Author: smackay
Date: 2006-03-27 13:43:49 +0200 (Mon, 27 Mar 2006)
New Revision: 136

Modified:
   trunk/build.xml
Log:
Fixed bug in docs target of build.xml so utilities datasheets are 
generated.

Modified: trunk/build.xml
===================================================================
--- trunk/build.xml	2006-03-13 17:22:46 UTC (rev 135)
+++ trunk/build.xml	2006-03-27 11:43:49 UTC (rev 136)
@@ -126,6 +126,7 @@
         <javadoc destdir="${doc.datasheet.dir}" stylesheetfile="${doc.css.dir}/datasheet.css">
             <packageset dir="${src.dir}" defaultexcludes="yes">
                 <include name="${package.dir}" />
+                <include name="${package.util.dir}" />
             </packageset>
         </javadoc>
 



From smackay at berlios.de  Mon Mar 27 13:44:19 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Mon, 27 Mar 2006 13:44:19 +0200
Subject: [Transform-svn] r137 - trunk/src/com/flagstone/transform/util
Message-ID: <200603271144.k2RBiJRx008108@sheep.berlios.de>

Author: smackay
Date: 2006-03-27 13:44:13 +0200 (Mon, 27 Mar 2006)
New Revision: 137

Modified:
   trunk/src/com/flagstone/transform/util/FSCharacterTable.java
   trunk/src/com/flagstone/transform/util/FSTextConstructor.java
Log:
Fixed Javadoc errors in documentation for FSTextConstructor and 
FSCharacterTable.

Modified: trunk/src/com/flagstone/transform/util/FSCharacterTable.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSCharacterTable.java	2006-03-27 11:43:49 UTC (rev 136)
+++ trunk/src/com/flagstone/transform/util/FSCharacterTable.java	2006-03-27 11:44:13 UTC (rev 137)
@@ -483,8 +483,8 @@
      * used to generate smaller character sets which will also reduce the size 
      * of the font definitions.
      * 
-     * @param a Locale identifying the country and optional language used to 
-     * select a character set.
+     * @param locale a Locale identifying the country and optional language 
+     * used to select a character set.
      * 
      * @return an array containing all the characters suitable for display
      * using the specified country and language.

Modified: trunk/src/com/flagstone/transform/util/FSTextConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSTextConstructor.java	2006-03-27 11:43:49 UTC (rev 136)
+++ trunk/src/com/flagstone/transform/util/FSTextConstructor.java	2006-03-27 11:44:13 UTC (rev 137)
@@ -308,7 +308,7 @@
      * font definition object generated and referenced by all the text object
      * generated.
      * 
-     * @param fontName either the name of a Flash, TrueType or OpenType file 
+     * @param fileName either the name of a Flash, TrueType or OpenType file 
      * containing an existing font definition.
      * 
      * @throws FileNotFoundException if the fontName specifies a file and the 
@@ -343,7 +343,7 @@
      * font definition object generated and referenced by all the text object
      * generated.
      * 
-     * @param an AWT Font object.
+     * @param font an AWT Font object.
      */
     public FSTextConstructor(int anIdentifier, Font font)
     {



From smackay at berlios.de  Mon Mar 27 13:44:44 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Mon, 27 Mar 2006 13:44:44 +0200
Subject: [Transform-svn] r138 - trunk/src/com/flagstone/transform
Message-ID: <200603271144.k2RBiiQf008266@sheep.berlios.de>

Author: smackay
Date: 2006-03-27 13:44:39 +0200 (Mon, 27 Mar 2006)
New Revision: 138

Modified:
   trunk/src/com/flagstone/transform/FSCoder.java
Log:
Fixed bug in FSCoder when expanding size of buffer on writes.

Modified: trunk/src/com/flagstone/transform/FSCoder.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCoder.java	2006-03-27 11:44:13 UTC (rev 137)
+++ trunk/src/com/flagstone/transform/FSCoder.java	2006-03-27 11:44:39 UTC (rev 138)
@@ -545,8 +545,8 @@
         if (numberOfBits < 0 || numberOfBits > 32)
             throw new IllegalArgumentException("Number of bits must be in the range 1..32.");
         
-        if (ptr+numberOfBits > end)
-            addCapacity(data.length/2);
+        if (ptr+32 > end)
+            addCapacity(data.length/2+4);
         
         int index = ptr >> 3;
 
@@ -627,7 +627,7 @@
         int numberOfBits = numberOfBytes*8;
         
         if (ptr+numberOfBits > end)
-            addCapacity(data.length/2);
+            addCapacity(data.length/2+numberOfBytes);
         
         if (byteOrder == LITTLE_ENDIAN)
         {



From smackay at berlios.de  Mon Mar 27 13:50:15 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Mon, 27 Mar 2006 13:50:15 +0200
Subject: [Transform-svn] r139 - trunk/src/com/flagstone/transform/util
Message-ID: <200603271150.k2RBoF3E009306@sheep.berlios.de>

Author: smackay
Date: 2006-03-27 13:49:44 +0200 (Mon, 27 Mar 2006)
New Revision: 139

Modified:
   trunk/src/com/flagstone/transform/util/FSImageConstructor.java
Log:
FSImageConstructor now displays transparent, indexed, png files correctly.

Modified: trunk/src/com/flagstone/transform/util/FSImageConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSImageConstructor.java	2006-03-27 11:44:39 UTC (rev 138)
+++ trunk/src/com/flagstone/transform/util/FSImageConstructor.java	2006-03-27 11:49:44 UTC (rev 139)
@@ -1241,6 +1241,15 @@
         attributes[INTERLACE_METHOD] = coder.readWord(1, false);
         
         coder.readWord(4, false); // crc
+
+        switch (attributes[COLOUR_TYPE])
+        {
+            case GREYSCALE: format = (attributes[TRANSPARENT_GREY] != -1) ? RGBA : RGB8; attributes[COLOUR_COMPONENTS] = 1; break;
+            case TRUE_COLOUR: format = (attributes[TRANSPARENT_RED] != -1) ? RGBA : RGB8; attributes[COLOUR_COMPONENTS] = 3; break;
+            case INDEXED_COLOUR: format = IDX8; attributes[COLOUR_COMPONENTS] = 1; break;
+            case ALPHA_GREYSCALE: format = RGBA; attributes[COLOUR_COMPONENTS] = 2; break;
+            case ALPHA_TRUECOLOUR: format = RGBA; attributes[COLOUR_COMPONENTS] = 4; break;
+        }  
     }
 
     private void decodePLTE(FSCoder coder, int length)
@@ -1279,8 +1288,10 @@
                 attributes[TRANSPARENT_BLUE] = coder.readWord(2, false);
                 break;
             case INDEXED_COLOUR:
-                for (int i=0; i<length; i++)
+                format = IDXA;
+                for (int i=0; i<length; i++) {
                     colourTable[i][3] = (byte)coder.readWord(1, false);
+                }
                 break;
             default:
                 break;
@@ -1307,15 +1318,6 @@
 
     private void decodeImage() throws DataFormatException
     {
-        switch (attributes[COLOUR_TYPE])
-        {
-            case GREYSCALE: format = (attributes[TRANSPARENT_GREY] != -1) ? RGBA : RGB8; attributes[COLOUR_COMPONENTS] = 1; break;
-            case TRUE_COLOUR: format = (attributes[TRANSPARENT_RED] != -1) ? RGBA : RGB8; attributes[COLOUR_COMPONENTS] = 3; break;
-            case INDEXED_COLOUR: format = IDX8; attributes[COLOUR_COMPONENTS] = 1; break;
-            case ALPHA_GREYSCALE: format = RGBA; attributes[COLOUR_COMPONENTS] = 2; break;
-            case ALPHA_TRUECOLOUR: format = RGBA; attributes[COLOUR_COMPONENTS] = 4; break;
-        }
-        
         if (format == RGB8 && attributes[BIT_DEPTH] <= 5)
             format = RGB5;
 



From smackay at berlios.de  Mon Mar 27 13:52:27 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Mon, 27 Mar 2006 13:52:27 +0200
Subject: [Transform-svn] r140 - trunk/doc
Message-ID: <200603271152.k2RBqRVs010347@sheep.berlios.de>

Author: smackay
Date: 2006-03-27 13:52:20 +0200 (Mon, 27 Mar 2006)
New Revision: 140

Modified:
   trunk/doc/CHANGES.txt
Log:
Added latest bug fixes and changes.

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-27 11:49:44 UTC (rev 139)
+++ trunk/doc/CHANGES.txt	2006-03-27 11:52:20 UTC (rev 140)
@@ -1,3 +1,15 @@
+2006-03-27 - smackay at flagstonesoftware.com
+
+    * Fixed bug in FSCoder when expanding size of buffer on writes.
+    
+    * Fixed bug in docs target of build.xml so utilities datasheets are 
+      generated.
+      
+    * Fixed Javadoc errors in documentation for FSTextConstructor and 
+      FSCharacterTable.
+      
+    * FSImageConstructor now displays transparent, indexed, png files correctly.
+
 2006-03-13 - smackay at flagstonesoftware.com
 
     * Released 2.1.1.



From smackay at berlios.de  Fri Mar 31 15:22:14 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 31 Mar 2006 15:22:14 +0200
Subject: [Transform-svn] r141 - trunk/src/com/flagstone/transform/util
Message-ID: <200603311322.k2VDMExA026447@sheep.berlios.de>

Author: smackay
Date: 2006-03-31 15:22:05 +0200 (Fri, 31 Mar 2006)
New Revision: 141

Modified:
   trunk/src/com/flagstone/transform/util/FSTextConstructor.java
Log:
Fixed bug when displaying fonts on the Mac. 
Bounding box for text is not calculated accurately. 
Added method to return the advance for a given character.

Modified: trunk/src/com/flagstone/transform/util/FSTextConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSTextConstructor.java	2006-03-27 11:52:20 UTC (rev 140)
+++ trunk/src/com/flagstone/transform/util/FSTextConstructor.java	2006-03-31 13:22:05 UTC (rev 141)
@@ -595,15 +595,20 @@
             
             FSBounds bounds = boundsForText(glyphCodes, glyphAdvances, fontSize);
             
-            if (n==0)
-            {
-                yMin = yMax = bounds.getMinY();
+            if (n==0) {
+                yMin = bounds.getMinY();
+                yMax = bounds.getMaxY();
             }
+            else if (n==lines.size()) {
+                yMax += bounds.getMaxY();
+            }
+            else {
+                yMax += lineSpacing;
+            }
             
             xMin = (xMin < bounds.getMinX()) ? xMin : bounds.getMinX();
             xMax = (xMax > bounds.getMaxX()) ? xMax : bounds.getMaxX();
-            yMax += bounds.getHeight();
-        
+                    
             FSText textRecord = new FSText(identifier, aColor, xOffset,
                     yOffset, fontSize, charactersForGlyphs(glyphCodes, glyphAdvances));
 
@@ -632,6 +637,24 @@
         return boundsForText(glyphCodes, glyphAdvances, fontSize);
     }
     /**
+     * Returns the advance, in twips to the next character. this method can be
+     * used when laying out sequences of individual characters, rather than as 
+     * as single string.
+     * 
+     * @param c the character that will be displayed.
+     * @param fontSize the size of the font the character will be rendered in.
+     * @return the distance to the next character.
+     */
+    public int advanceForChar(char c, int fontSize)
+    {
+        float scaleFactor = ((float)fontSize) / 1024.0f;
+
+        int index = characterTable[c];
+        int advance = (int) (glyphTable[index].advance * scaleFactor);
+        
+        return advance;
+    }
+    /**
      * defineShape converts a string into an equivalent shape representation. The
      * shape is constructed from glyphs used to represent each character in the 
      * string and filled with the specified colour.
@@ -798,8 +821,8 @@
          as the transform used for the glyphs otherwise the advance values are not 
          scaled accordingly.
          */
-        AffineTransform at = AffineTransform.getTranslateInstance(translateX, translateY);
-        font = font.deriveFont(at);
+//        AffineTransform at = AffineTransform.getTranslateInstance(translateX, translateY);
+//        font = font.deriveFont(at);
         font = font.deriveFont((float)scaleX);
 
         missingGlyph = font.getMissingGlyphCode();



From smackay at berlios.de  Fri Mar 31 15:24:06 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 31 Mar 2006 15:24:06 +0200
Subject: [Transform-svn] r142 - trunk/src/com/flagstone/transform/test
Message-ID: <200603311324.k2VDO6fB027908@sheep.berlios.de>

Author: smackay
Date: 2006-03-31 15:24:00 +0200 (Fri, 31 Mar 2006)
New Revision: 142

Modified:
   trunk/src/com/flagstone/transform/test/FSTextConstructorTest.java
Log:
Added test and code to existing tests to draw a rectangle 
tracing the bounding box for characters and text blocks. 

Modified: trunk/src/com/flagstone/transform/test/FSTextConstructorTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSTextConstructorTest.java	2006-03-31 13:22:05 UTC (rev 141)
+++ trunk/src/com/flagstone/transform/test/FSTextConstructorTest.java	2006-03-31 13:24:00 UTC (rev 142)
@@ -99,6 +99,28 @@
     /**
      * @testng.test dataProvider="locales"
      */
+    public void boundedCharacters(Locale locale, String name)
+    {
+        try 
+        {
+            File destFile = new File(destDir, name+".swf");
+            
+            FSTextConstructor textGenerator = new FSTextConstructor(1, "Arial");
+         
+            if (destDir.exists() == false)
+                assert destDir.mkdirs() : "Count not create directory: "+destDir;
+            
+            encodeBoundedCharacterSet(textGenerator, 
+                FSCharacterTable.characterSetForLocale(locale), destFile);
+        }
+        catch (Exception e)
+        {
+            assert false;
+        }
+    }
+    /**
+     * @testng.test dataProvider="locales"
+     */
     public void displayLocales(Locale locale, String name)
     {
         try 
@@ -268,8 +290,84 @@
         movie.add(font);
         movie.add(text);
         movie.add(new FSPlaceObject2(text.getIdentifier(), 1, margin , margin));
+
+        FSShapeConstructor path = new FSShapeConstructor();
+        int textWidth = text.getBounds().getWidth();
+        int textHeight = text.getBounds().getHeight();
+        int shapeId = movie.newIdentifier();
+
+        path.add(new FSSolidLine(1, FSColorTable.darkblue()));
+        path.rect(text.getBounds().getMinX(), text.getBounds().getMinY(), 
+                        textWidth, textHeight);
+        
+        movie.add(path.defineShape(shapeId));
+        movie.add(new FSPlaceObject2(shapeId, 2, margin+textWidth/2, margin+textHeight/2));
         movie.add(new FSShowFrame());
 
         movie.encodeToFile(file.getPath());
     }
+    private void encodeBoundedCharacterSet(FSTextConstructor textGenerator, char[] chars, File file) throws Exception
+    {
+        int fontSize = 280;
+        int lineSpacing = fontSize;        
+        int margin = fontSize;
+        int charsPerLine = 32;
+        int layer = 1;
+                
+        FSMovie movie = new FSMovie();
+        FSShapeConstructor path = new FSShapeConstructor();
+         
+        textGenerator.willDisplay(chars);
+        
+        int maxWidth = 0;                        
+        int x = margin;
+        int y = margin;
+
+        int fontId = movie.newIdentifier();
+        FSDefineFont2 font = textGenerator.defineFont();
+        font.setIdentifier(fontId);        
+
+        movie.setFrameSize(new FSBounds(0, 0, 0, 0));
+        movie.setFrameRate(1.0f);
+        movie.add(new FSSetBackgroundColor(FSColorTable.lightblue()));
+        movie.add(font);
+
+        for (int i=0; i<chars.length; i++)
+        {
+            FSDefineText2 text = textGenerator.defineText(movie.newIdentifier(), String.valueOf(chars[i]), fontSize, FSColorTable.black());        
+
+            int textWidth = text.getBounds().getWidth();
+            int textHeight = text.getBounds().getHeight();
+            int advance = textGenerator.advanceForChar(chars[i], fontSize) + 40;
+                
+            int shapeId = movie.newIdentifier();
+            
+            path.newPath();
+            path.add(new FSSolidLine(1, FSColorTable.darkblue()));
+            path.rect(text.getBounds().getMinX(), text.getBounds().getMinY(), 
+                            textWidth, textHeight);
+            
+            movie.add(path.defineShape(shapeId));
+            movie.add(new FSPlaceObject2(shapeId, layer++, x+textWidth/2, y+textHeight/2));        
+             
+            movie.add(text);
+            movie.add(new FSPlaceObject2(text.getIdentifier(), layer++, x, y));
+
+            if (i % charsPerLine == charsPerLine-1)
+            {
+                maxWidth = x+advance+margin > maxWidth ? x+advance+margin : maxWidth;
+                
+                x = margin;
+                y += lineSpacing;
+            }
+            else
+            {
+                x += advance;
+            }
+        }
+        movie.setFrameSize(new FSBounds(0, 0, maxWidth, y+margin));
+
+        movie.add(new FSShowFrame());
+        movie.encodeToFile(file.getPath());
+    }
 }



From smackay at berlios.de  Fri Mar 31 15:24:51 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 31 Mar 2006 15:24:51 +0200
Subject: [Transform-svn] r143 - trunk/test/suites
Message-ID: <200603311324.k2VDOpUO028390@sheep.berlios.de>

Author: smackay
Date: 2006-03-31 15:24:34 +0200 (Fri, 31 Mar 2006)
New Revision: 143

Modified:
   trunk/test/suites/FSTextConstructor.xml
Log:
Added test to show the bounding box around characters and blocks of text.

Modified: trunk/test/suites/FSTextConstructor.xml
===================================================================
--- trunk/test/suites/FSTextConstructor.xml	2006-03-31 13:24:00 UTC (rev 142)
+++ trunk/test/suites/FSTextConstructor.xml	2006-03-31 13:24:34 UTC (rev 143)
@@ -8,7 +8,7 @@
 
     <test name="TTF Fonts From OrgDot">
 		<parameter name="srcDir" value="test/data/fonts/orgdot"/>
-		<parameter name="dstDir" value="test/results/FSTextConstructor/orgdot"/>
+		<parameter name="dstDir" value="test/results/FSTextConstructor/fonts/orgdot"/>
 		<parameter name="ext" value="ttf"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSTextConstructorTest">
@@ -21,7 +21,7 @@
   	
     <test name="TTF Fonts From the Bitstream Vera collection">
 		<parameter name="srcDir" value="test/data/fonts/vera"/>
-		<parameter name="dstDir" value="test/results/FSTextConstructor/vera"/>
+		<parameter name="dstDir" value="test/results/FSTextConstructor/fonts/vera"/>
 		<parameter name="ext" value="ttf"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSTextConstructorTest">
@@ -34,7 +34,7 @@
   	
     <test name="TTF Fonts Installed in Windows">
 		<parameter name="srcDir" value="/windows/fonts"/>
-		<parameter name="dstDir" value="test/results/FSTextConstructor/windows"/>
+		<parameter name="dstDir" value="test/results/FSTextConstructor/fonts/windows"/>
 		<parameter name="ext" value="ttf"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSTextConstructorTest">
@@ -46,7 +46,7 @@
   	</test>
   	
     <test name="AWT Fonts">
-		<parameter name="dstDir" value="test/results/FSTextConstructor/awt"/>
+		<parameter name="dstDir" value="test/results/FSTextConstructor/fonts/awt"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSTextConstructorTest">
       		    <methods>
@@ -67,7 +67,7 @@
 		</classes>
   	</test>
 
-    <test name="Character Sets">
+    <test name="Locales">
 		<parameter name="dstDir" value="test/results/FSTextConstructor/locales"/>
 		<classes>
       		<class name="com.flagstone.transform.test.FSTextConstructorTest">
@@ -78,5 +78,16 @@
 		</classes>
   	</test>
 
+    <test name="Bounds">
+		<parameter name="dstDir" value="test/results/FSTextConstructor/bounds"/>
+		<classes>
+      		<class name="com.flagstone.transform.test.FSTextConstructorTest">
+      		    <methods>
+      				<include name="boundedCharacters" />
+    			</methods>
+      		</class>
+		</classes>
+  	</test>
+
 </suite>
 



From smackay at berlios.de  Fri Mar 31 15:33:54 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 31 Mar 2006 15:33:54 +0200
Subject: [Transform-svn] r144 - trunk/src/com/flagstone/transform
Message-ID: <200603311333.k2VDXsgY003313@sheep.berlios.de>

Author: smackay
Date: 2006-03-31 15:33:48 +0200 (Fri, 31 Mar 2006)
New Revision: 144

Modified:
   trunk/src/com/flagstone/transform/FSDefineJPEGImage.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
Log:
Added width and height attributes to JPEG image objects.

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage.java	2006-03-31 13:24:34 UTC (rev 143)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage.java	2006-03-31 13:33:48 UTC (rev 144)
@@ -92,6 +92,8 @@
 public final class FSDefineJPEGImage extends FSDefineObject
 {
     private byte[] image = null;
+    private int width;
+    private int height;
     
     /**
      * Construct an FSDefineJPEGImage object, initalizing it with values decoded 
@@ -123,9 +125,29 @@
     public FSDefineJPEGImage(FSDefineJPEGImage obj)
     {
         super(obj);
+        width = obj.width;
+        height = obj.height;
         image = Transform.clone(obj.image);
     }
 
+    /** 
+     * Gets the width of the image in pixels. 
+     * 
+     * @return the width of the image.
+     */
+    public int getWidth()
+    {
+        return width; 
+    }    
+    /** 
+     * Gets the height of the image in pixels.
+     * 
+     * @return the height of the image in pixels.
+     */
+    public int getHeight()
+    {
+        return height;
+    }
     /** Gets the image data.
 
         @return the array of bytes containing the image data.
@@ -141,6 +163,7 @@
     public void setImage(byte[] bytes)
     {
         image = bytes;
+        decodeInfo();
     }
 
     public Object clone()
@@ -201,4 +224,32 @@
         setImage(data);
         coder.endObject(name());
     }
+    private boolean decodeInfo()
+    {
+        FSCoder coder = new FSCoder(FSCoder.BIG_ENDIAN, image);
+                 
+        if (coder.readWord(2, false) != 0xffd8)
+            return false;
+
+        while (true) 
+        {
+            int marker = coder.readWord(2, false);
+            int size = coder.readWord(2, false);
+            
+            if ((marker & 0xff00) != 0xff00) 
+                return false;
+            
+            if (marker >= 0xffc0 && marker <= 0xffcf && marker != 0xffc4 && marker != 0xffc8) 
+            {
+                coder.readWord(1, false);
+                height = coder.readWord(2, false);
+                width = coder.readWord(2, false);
+                return true;
+            } 
+            else 
+            {
+                coder.adjustPointer((size - 2) << 3);
+            }
+        }
+    }
 }

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2006-03-31 13:24:34 UTC (rev 143)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2006-03-31 13:33:48 UTC (rev 144)
@@ -92,6 +92,8 @@
  */
 public final class FSDefineJPEGImage2 extends FSDefineObject
 {
+    private int width;
+    private int height;
     private byte[] image = null;
     private byte[] encodingTable = new byte[] { 
         (byte)0xFF, (byte)0xD8, (byte)0xFF, (byte)0xD9 
@@ -140,9 +142,29 @@
     {
         super(obj);
         image = Transform.clone(obj.image);
+        width = obj.width;
+        height = obj.height;
         encodingTable = Transform.clone(obj.encodingTable);
     }
 
+    /** 
+     * Gets the width of the image in pixels. 
+     * 
+     * @return the width of the image.
+     */
+    public int getWidth()
+    {
+        return width; 
+    }    
+    /** 
+     * Gets the height of the image in pixels.
+     * 
+     * @return the height of the image in pixels.
+     */
+    public int getHeight()
+    {
+        return height;
+    }
     /** Gets the image data.
 
         @return the array of bytes containing the image data.
@@ -162,6 +184,7 @@
     public void setImage(byte[] bytes)
     {
         image = bytes;
+        decodeInfo();
     }
 
     /** Sets the encoding table.
@@ -274,4 +297,32 @@
 
         return bytes;
     }
+    private boolean decodeInfo()
+    {
+        FSCoder coder = new FSCoder(FSCoder.BIG_ENDIAN, image);
+                 
+        if (coder.readWord(2, false) != 0xffd8)
+            return false;
+
+        while (true) 
+        {
+            int marker = coder.readWord(2, false);
+            int size = coder.readWord(2, false);
+            
+            if ((marker & 0xff00) != 0xff00) 
+                return false;
+            
+            if (marker >= 0xffc0 && marker <= 0xffcf && marker != 0xffc4 && marker != 0xffc8) 
+            {
+                coder.readWord(1, false);
+                height = coder.readWord(2, false);
+                width = coder.readWord(2, false);
+                return true;
+            } 
+            else 
+            {
+                coder.adjustPointer((size - 2) << 3);
+            }
+        }
+    }
 }

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2006-03-31 13:24:34 UTC (rev 143)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2006-03-31 13:33:48 UTC (rev 144)
@@ -116,6 +116,8 @@
  */  
 public final class FSDefineJPEGImage3 extends FSDefineObject
 {
+    private int width;
+    private int height;
     private byte[] image = null;
     private byte[] encodingTable = new byte[] { 
         (byte)0xFF, (byte)0xD8, (byte)0xFF, (byte)0xD9 
@@ -158,10 +160,30 @@
     {
         super(obj);
         image = Transform.clone(obj.image);
+        width = obj.width;
+        height = obj.height;
         encodingTable = Transform.clone(obj.encodingTable);
         alpha = Transform.clone(obj.alpha);
     }
 
+    /** 
+     * Gets the width of the image in pixels. 
+     * 
+     * @return the width of the image.
+     */
+    public int getWidth()
+    {
+        return width; 
+    }    
+    /** 
+     * Gets the height of the image in pixels.
+     * 
+     * @return the height of the image in pixels.
+     */
+    public int getHeight()
+    {
+        return height;
+    }
     /** Gets the encoding table.
 
         @return the array of bytes containing the encoding table.
@@ -196,6 +218,7 @@
     public void setImage(byte[] bytes)
     {
         image = bytes;
+        decodeInfo();
     }
 
     /** Sets the alpha channel data with the zlib compressed data.
@@ -327,4 +350,32 @@
 
         return bytes;
     }
+    private boolean decodeInfo()
+    {
+        FSCoder coder = new FSCoder(FSCoder.BIG_ENDIAN, image);
+                 
+        if (coder.readWord(2, false) != 0xffd8)
+            return false;
+
+        while (true) 
+        {
+            int marker = coder.readWord(2, false);
+            int size = coder.readWord(2, false);
+            
+            if ((marker & 0xff00) != 0xff00) 
+                return false;
+            
+            if (marker >= 0xffc0 && marker <= 0xffcf && marker != 0xffc4 && marker != 0xffc8) 
+            {
+                coder.readWord(1, false);
+                height = coder.readWord(2, false);
+                width = coder.readWord(2, false);
+                return true;
+            } 
+            else 
+            {
+                coder.adjustPointer((size - 2) << 3);
+            }
+        }
+    }
 }
\ No newline at end of file



From smackay at berlios.de  Fri Mar 31 15:35:35 2006
From: smackay at berlios.de (smackay at berlios.de)
Date: Fri, 31 Mar 2006 15:35:35 +0200
Subject: [Transform-svn] r145 - trunk/doc
Message-ID: <200603311335.k2VDZZs2005736@sheep.berlios.de>

Author: smackay
Date: 2006-03-31 15:35:31 +0200 (Fri, 31 Mar 2006)
New Revision: 145

Modified:
   trunk/doc/CHANGES.txt
Log:
Updated with latest changes.

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2006-03-31 13:33:48 UTC (rev 144)
+++ trunk/doc/CHANGES.txt	2006-03-31 13:35:31 UTC (rev 145)
@@ -1,3 +1,21 @@
+2006-03-31 - smackay at flagstonesoftware.com
+
+    * Added advanceForChar(char, int) method to FSTextConstrutor so individual
+      characters can be laid out in a sequence.
+      
+    * Updated the FSTextConstructorTest class to display the bounding boxes when
+      showing individual characters or around a block of text. Also updated
+      FSTextConstructor.xml test suite. 
+      
+    * Added width and height attributes to FSDefineJPEGImage, FSDefineJPEGImage2
+      and FSDefineJPEGImage3.
+    
+2006-03-30 - smackay at flagstonesoftware.com
+
+    * Fixed bug when creating font definitions on Macintoshes.
+    
+    * Fixed bug in calculating the bounds of a block of text.
+
 2006-03-27 - smackay at flagstonesoftware.com
 
     * Fixed bug in FSCoder when expanding size of buffer on writes.



