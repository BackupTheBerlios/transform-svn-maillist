From smackay at mail.berlios.de  Mon Jan 28 12:12:51 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Mon, 28 Jan 2008 12:12:51 +0100
Subject: [Transform-svn] r285 - trunk/src/com/flagstone/transform/util
Message-ID: <200801281112.m0SBCpis018018@sheep.berlios.de>

Author: smackay
Date: 2008-01-28 12:12:48 +0100 (Mon, 28 Jan 2008)
New Revision: 285

Modified:
   trunk/src/com/flagstone/transform/util/FSShapeConstructor.java
Log:
polygon how uses absolute coordinates. rpolygon was added to draw shapes using relative coordinates.

Modified: trunk/src/com/flagstone/transform/util/FSShapeConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSShapeConstructor.java	2007-12-31 14:58:06 UTC (rev 284)
+++ trunk/src/com/flagstone/transform/util/FSShapeConstructor.java	2008-01-28 11:12:48 UTC (rev 285)
@@ -984,7 +984,7 @@
      * @param points and array of coordinate pairs. The first pair of points defines the coordinates
      * of a move operation, successive pairs define the coordinates for relative lines.
      */
-    public void polygon(int[] points)
+    public void rpolygon(int[] points)
     {
         int i;
         int length = points.length;
@@ -999,7 +999,35 @@
             
         closePath();
     }
+    /**
+     * Create a closed shape with vertices defines by pairs of coordinates from the array argument.
+     * The first pair of points in the array specifies a move. Line segments a drawn using 
+     * abolute coordinates. The current point which is updated after each segment is drawn.
+     * 
+     * If the number of points is an odd number then the last point will be ignored.
+     * 
+     * If the COORDINATES_ARE_PIXELS attribute is true then the coordinates are specified in pixels,
+     * otherwise the coordinates are specified in twips.
+     * 
+     * @param points and array of coordinate pairs. The first pair of points defines the coordinates
+     * of a move operation, successive pairs define the coordinates of the lines.
+     */
+    public void polygon(int[] points)
+    {
+        int i;
+        int length = points.length;
+        
+        if (length % 2 == 1)
+            length -= 1;
+        
+        move(points[0], points[1]);
 
+        for (i=2; i<length; i+=2)
+            line(points[i], points[i+1]);
+            
+        closePath();
+    }
+
     private void setInitial(int x, int y)
     {
         initialX = x;



From smackay at mail.berlios.de  Mon Jan 28 12:23:04 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Mon, 28 Jan 2008 12:23:04 +0100
Subject: [Transform-svn] r286 - trunk/src/com/flagstone/transform
Message-ID: <200801281123.m0SBN4U9018507@sheep.berlios.de>

Author: smackay
Date: 2008-01-28 12:22:59 +0100 (Mon, 28 Jan 2008)
New Revision: 286

Added:
   trunk/src/com/flagstone/transform/FSFrame.java
   trunk/src/com/flagstone/transform/FSHeader.java
   trunk/src/com/flagstone/transform/FSLayer.java
Log:
Added new classes to simplify processing movies.

Added: trunk/src/com/flagstone/transform/FSFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFrame.java	2008-01-28 11:12:48 UTC (rev 285)
+++ trunk/src/com/flagstone/transform/FSFrame.java	2008-01-28 11:22:59 UTC (rev 286)
@@ -0,0 +1,344 @@
+/*
+ * FSFrame.java
+ * Transform
+ * 
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification, 
+ * are permitted provided that the following conditions are met:
+ *
+ *  * Redistributions of source code must retain the above copyright notice, this
+ *    list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright notice, 
+ *    this list of conditions and the following disclaimer in the documentation 
+ *    and/or other materials provided with the distribution.
+ *  * Neither the name of Flagstone Software Ltd. nor the names of its contributors 
+ *    may be used to endorse or promote products derived from this software 
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
+ * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.flagstone.transform;
+
+
+import java.util.*;
+import com.flagstone.transform.*;
+
+/** 
+ * The Frame class is used to provide a higher level view of a movie. Rather 
+ * than viewing movies as a sequence of individual objects each representing a 
+ * given data structure in the encoded Flash file, objects can be grouped together 
+ * in frames which presents a more logical view of a movie and makes movie
+ * manipulation and search for specific objects easier to handle.
+ * 
+ * Each Frame object has the following attributes:
+ *
+ * number - The position in the movie when the frame will be displayed.
+ * 
+ * label - An optional name assigned to a frame. The FSGotoFrame2 object can 
+ * be used to move to a named frame when playing a movie or movie clip.
+ * 
+ * definitions - An array containing objects that define items for display in a 
+ * movie. Definitions are sub-classes of the FSDefineObject class and define shapes, 
+ * fonts, images and sounds that are displayed or played by the Flash Player.
+ *
+ * commands - An array containing objects that define commands that affect the 
+ * display list or the Flash Player directly.
+ * 
+ * actions - An array that define actions that are executed when a frame is displayed.
+ *
+ * Frame objects simplify the handling of movies. FSDoAction, FSFrameLabel and 
+ * FSShowFrame classes can now "hidden" from view. They are generated automatically 
+ * by the FSFrame object when it is added to an FSMovie object.
+ * 
+ * The framesFromMovie(FSMovie aMovie) method allows an existing movie to be 
+ * viewed as an array of FSFrame objects. Objects from the movie are copied into 
+ * each frame so changes made to the attributes of each object are reflected 
+ * in the movie. The frame objects are not synchronised with the movie, so any 
+ * objects added to a frame are not added to the FSMovie. The easiest way to do 
+ * this is to remove the existing objects from the movie and add all the frames.
+ *
+ * ArrayList frames = FSFrame.framesFromMovie(aMovie);
+ * ...
+ * ...
+ * aMovie.getObjects().clear();
+ *   
+ * for (Iterator i = frames.iterator(); i.hasNext();)
+ *     ((FSFrame)i.next()).addToMovie(aMovie);
+ *
+ * When the contents of an FSFrame object is added to a movie if a label defined 
+ * then an FSFrameLabel object will be added. Similarly if actions are defined 
+ * then an FSDoAction object will be added. An FSShowFrame object which instructs
+ * the Flash Player to update the display list with all the changes is added.
+ *
+ */
+public final class FSFrame
+{
+    /** 
+     * Create a frame based view of a movie. Objects from the movie are grouped 
+     * into Frame objects. Objects from the movie are added to the frame so any 
+     * changes made are reflected in the movie. However objects added or removed 
+     * from a frame are not reflected in the movie.
+     * 
+     * @param aMovie an FSMovie object.
+     * @return an array of Frame objects.
+     */
+    public static ArrayList framesFromMovie(FSMovie aMovie)
+    {
+        ArrayList frames = new ArrayList();
+        int number = 1;
+
+        FSFrame currentFrame = new FSFrame(number++);
+ 
+        for (Iterator i = aMovie.getObjects().iterator(); i.hasNext();)
+        {
+            FSMovieObject currentObject = (FSMovieObject)i.next();
+            
+            if (currentObject instanceof FSDoAction)
+            {
+                currentFrame.actions = ((FSDoAction)currentObject).getActions();
+            }
+            else if (currentObject instanceof FSFrameLabel)
+            {
+                currentFrame.label = ((FSFrameLabel)currentObject).getLabel();
+            }
+            else if (currentObject instanceof FSDefineObject)
+            {
+                currentFrame.addDefinition((FSDefineObject)currentObject);
+            }
+			else if (currentObject instanceof FSShowFrame)
+			{
+                frames.add(currentFrame);
+                currentFrame = new FSFrame(number++);
+			}
+            else
+            {
+                currentFrame.addCommand(currentObject);
+            }   
+        }
+        return frames;
+     }    
+
+    private int number = 0;
+    private String label = null;
+    private ArrayList definitions = null;
+    private ArrayList commands = null;
+    private ArrayList actions = null;
+
+    /** 
+     * Constructs an empty frame with no label defined and the definitions, 
+     * commands and actions arrays empty.
+     */
+    public FSFrame(int number)
+    {
+        setNumber(number);
+        setLabel("");
+        setDefinitions(new ArrayList());
+        setCommands(new ArrayList());
+        setActions(new ArrayList());
+    }
+
+    /** 
+     * Constructs a frame with with the specified label, definitions, commands
+     * and actions. The label is optional and may be set to null if no label is 
+     * defined. Similarly if no definitions, commands or actions are defined for 
+     * a given frame then the corresponding argument may be set to null.
+     * 
+     * @param label a label for the frame. Maybe null if no label is defined.
+     * 
+     * @param definitions an array of definition objects. Maybe null if no 
+     * definitions are defined.
+     * 
+     * @param action an array of objects used to manipulate the display list. 
+     * Maybe null if no display list commands are defined.
+     * 
+     * @param action an array of action objects that will be executed when the 
+     * frame is displayed. Maybe null if no actions are defined.
+     */
+    public FSFrame(int number, String label, ArrayList definitions, ArrayList commands, ArrayList actions)
+    {
+        setLabel(label);
+        setDefinitions(definitions);
+        setCommands(commands);
+        setActions(actions);
+    }
+
+    /** 
+     * Adds the action object to the frame.
+     * 
+     * @param anObject the action object to be added to the frame.
+     */
+    public void addAction(FSActionObject anObject)
+    {
+    	if (actions == null)
+    		actions = new ArrayList();
+    		
+        actions.add(anObject);
+    }
+
+    /** 
+     * Adds an object to the frame that defines an object to be displayed in the 
+     * movie.
+     * 
+     * @param anObject a sub-class of FSDefineObject.
+     */
+    public void addDefinition(FSDefineObject anObject)
+    {
+		if (definitions == null)
+			definitions = new ArrayList();
+    		
+        definitions.add(anObject);
+    }
+
+    /** 
+     * Adds the display list command to the frame.
+     * 
+     * @param anObject an FSMovieObject the manipulates the display list.
+     */
+    public void addCommand(FSMovieObject anObject)
+    {
+        commands.add(anObject);
+    }
+
+    /** 
+     * Gets the number assigned to the frame. The number indicates when the 
+     * frame will be displayed when a movie is played.
+     * 
+     * @return the frame number.
+     */
+    public int getNumber()
+    {
+        return number;
+    }
+    /** 
+     * Gets the label assigned to the frame.
+     * 
+     * @return the label.
+     */
+    public String getLabel()
+    {
+        return label;
+    }
+
+    /** 
+     * Gets the array of definition objects contained in the frame.
+     * 
+     * @return the array of definitions.
+     */
+    public ArrayList getDefinitions()
+    {
+        return definitions;
+    }
+
+    /**
+     * Gets the array of commands that update the display list. 
+     * 
+     * @return the array of commands objects.
+     */
+    public ArrayList getCommands()
+    {
+        return commands;
+    }
+
+    /**
+     * Gets the array of action objects that will be execute when the frame is 
+     * displayed.
+     * 
+     * @return the array of actions defined for the frame.
+     */
+    public ArrayList getActions()
+    {
+        return actions;
+    }
+    
+    /** 
+     * Sets the number assigned to the frame. The number indicates when the 
+     * frame will be displayed when a movie is played.
+     * 
+     * @param n the frame number.
+     */
+    public void setNumber(int n)
+    {
+        number = n;
+    }
+    /** 
+     * Sets the label for the frame.
+     * 
+     * @param aString the label.
+     */
+    public void setLabel(String aString)
+    {
+    	label = aString;
+    }
+
+    /** 
+     * Sets the array of action objects for the frame.
+     * 
+     * @param anArray the array of actions.
+     */
+    public void setDefinitions(ArrayList anArray)
+    {
+        definitions = anArray;
+    }
+
+    /** 
+     * Sets the array of commands that updated the display list for the frame. 
+     * The changes are visible when the frame is displayed.
+     *
+     * @param anArray the array of command objects.
+     */
+    public void setCommands(ArrayList anArray)
+    {
+        commands = anArray;
+    }
+
+    /** 
+     * Sets the array of action objects for the frame.
+     * 
+     * @param anArray the array of actions.
+     */
+    public void setActions(ArrayList anArray)
+    {
+    	actions = anArray;
+    }
+
+    /** 
+     * Add the objects in the frame to the movie. The contents of the definitions 
+     * and commands arrays are added to the movie. If a label is assigned to the 
+     * frame then an FSFrameLabel object is added to the movie. If actions are 
+     * defined then an FSDoAction object is added containing the actions defined 
+     * in the frame. 
+     * 
+     * @param aMovie an FSMovie object.
+     */
+    public void addToMovie(FSMovie aMovie)
+    {
+    	if (definitions != null || definitions.size() > 0)
+    	{
+			for (Iterator i = definitions.iterator(); i.hasNext();)
+				aMovie.add((FSMovieObject)i.next());
+    	}
+            
+        if (label != null && label.length() > 0)
+            aMovie.add(new FSFrameLabel(label));
+
+		if (actions != null && actions.size() > 0)
+			aMovie.add(new FSDoAction(actions));
+
+        for (Iterator j = commands.iterator(); j.hasNext();)
+            aMovie.add((FSMovieObject)j.next());
+            
+        aMovie.add(new FSShowFrame());
+    }
+}
+

Added: trunk/src/com/flagstone/transform/FSHeader.java
===================================================================
--- trunk/src/com/flagstone/transform/FSHeader.java	2008-01-28 11:12:48 UTC (rev 285)
+++ trunk/src/com/flagstone/transform/FSHeader.java	2008-01-28 11:22:59 UTC (rev 286)
@@ -0,0 +1,188 @@
+package com.flagstone.transform;
+/*
+ * FSHeader.java
+ * 
+ * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification, 
+ * are permitted provided that the following conditions are met:
+ *
+ *  * Redistributions of source code must retain the above copyright notice, this
+ *    list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright notice, 
+ *    this list of conditions and the following disclaimer in the documentation 
+ *    and/or other materials provided with the distribution.
+ *  * Neither the name of Flagstone Software Ltd. nor the names of its contributors 
+ *    may be used to endorse or promote products derived from this software 
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
+ * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+import java.util.zip.*;
+import java.io.*;
+
+public final class FSHeader
+{
+    public static void main(String[] args)
+    {
+        try
+        {
+            FSHeader header = new FSHeader(args[0]);
+            
+            StringBuffer buffer = new StringBuffer();
+            
+            buffer.append("File: ").append(args[0]).append("\n");
+            buffer.append("Signature: ").append(header.getSignature()).append("\n");
+            buffer.append("Version: ").append(header.getVersion()).append("\n");
+            buffer.append("Frame: ");
+            buffer.append("(").append(header.getMinX()).append(",").append(header.getMinY()).append(") ");
+            buffer.append("(").append(header.getMaxX()).append(",").append(header.getMaxY()).append(")\n");
+            buffer.append("Length: ").append(header.getLength()+" bytes").append("\n");
+            buffer.append("FrameRate: ").append(header.getFrameRate()+" per second").append("\n");
+            buffer.append("Number Of Frames: ").append(header.getNumberOfFrames()).append("\n");
+            
+            System.out.println(buffer.toString());
+        }
+        catch (Exception e)
+        {
+            System.err.println("Could not read file: "+ args[0]);
+        }
+    }
+    
+    private String signature = null;
+    private int version = 0;
+    private int minX = 0;
+    private int minY = 0;
+    private int maxX = 0;
+    private int maxY = 0;
+    private int length = 0;
+    private float frameRate = 0.0f;
+    private int frameCount = 0;
+    
+
+    public FSHeader(String filename) throws IOException, DataFormatException
+    {
+        decodeFromFile(filename);
+    }
+    public String getSignature()
+    {
+        return signature;
+    }
+    public int getVersion()
+    {
+        return version;
+    }
+    public int getLength()
+    {
+        return length;
+    }
+    public int getMinX() 
+    {
+        return minX;
+    }
+    public int getMaxX() 
+    {
+        return maxX;
+    }
+    public int getMinY() 
+    {
+        return minY;
+    }
+    public int getMaxY()
+    {
+        return maxY;
+    }
+    public float getFrameRate()
+    {
+        return frameRate;
+    }
+    public float getNumberOfFrames()
+    {
+        return frameCount;
+    }
+    public void decodeFromFile(String fileName) throws FileNotFoundException, DataFormatException, IOException
+    {
+        FileInputStream fileContents = null;
+        
+        File swfFile = new File(fileName);
+        
+        fileContents = new FileInputStream(swfFile);
+        
+        int fileLength = (int)swfFile.length();
+        byte[] contents = new byte[fileLength];
+        
+        fileContents.read(contents);
+        fileContents.close();
+        
+        decodeFromData(contents);
+    }
+    public void decodeFromData(byte[] bytes) throws DataFormatException, IOException
+    {
+        FSCoder coder = null;
+
+        isFlash(bytes);
+
+        if (bytes[0] == 0x43)
+            coder = new FSCoder(FSCoder.LITTLE_ENDIAN, unzip(bytes));
+        else
+            coder = new FSCoder(FSCoder.LITTLE_ENDIAN, bytes);
+        
+        signature = coder.readString(3, "UTF8");
+        version = coder.readWord(1, false);
+        length = coder.readWord(4, false);
+
+        coder.alignToByte();
+        
+        int fieldSize = coder.readBits(5, false);
+        
+        minX = coder.readBits(fieldSize, true);
+        maxX = coder.readBits(fieldSize, true);
+        minY = coder.readBits(fieldSize, true);
+        maxY = coder.readBits(fieldSize, true);
+        
+        coder.alignToByte();
+
+        frameRate = coder.readFixedWord(1, 1);
+        frameCount = coder.readWord(2, false);
+    }
+    private void isFlash(byte[] bytes) throws DataFormatException
+    {
+        if (bytes == null || bytes.length < 8)
+            throw new DataFormatException("Flash data is null or empty.");
+            
+        boolean isFlash = (bytes[0] == 0x43 || bytes[0] == 0x46) && bytes[1] == 0x57 && bytes[2] == 0x53;
+                
+        if (isFlash == false)
+            throw new DataFormatException("Data does not start with a valid Flash signature.");
+    }
+    private byte[] unzip(byte[] bytes) throws DataFormatException
+    {
+        int movieLength = 0;
+
+        for (int i=0; i<4; i++)
+            movieLength += (bytes[i+4] & 0x000000FF) << (i*8);
+            
+        byte[] data = new byte[movieLength];
+        
+        // copy the uncompressed signature, version and length
+        
+        for (int i=0; i<8; i++)
+            data[i] = bytes[i];            
+        
+        Inflater inflater = new Inflater();
+        inflater.setInput(bytes, 8, bytes.length-8);
+        inflater.inflate(data, 8, movieLength-8);
+
+        return data;
+    }
+}

Added: trunk/src/com/flagstone/transform/FSLayer.java
===================================================================
--- trunk/src/com/flagstone/transform/FSLayer.java	2008-01-28 11:12:48 UTC (rev 285)
+++ trunk/src/com/flagstone/transform/FSLayer.java	2008-01-28 11:22:59 UTC (rev 286)
@@ -0,0 +1,459 @@
+/*
+ * FSLayer.java
+ * Transform
+ * 
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification, 
+ * are permitted provided that the following conditions are met:
+ *
+ *  * Redistributions of source code must retain the above copyright notice, this
+ *    list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright notice, 
+ *    this list of conditions and the following disclaimer in the documentation 
+ *    and/or other materials provided with the distribution.
+ *  * Neither the name of Flagstone Software Ltd. nor the names of its contributors 
+ *    may be used to endorse or promote products derived from this software 
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
+ * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, 
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, 
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED 
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+package com.flagstone.transform;
+
+import java.util.*;
+
+/**
+ * The Layer class can be used to simplify the creation of movies. It provides
+ * a series of methods that can be used to control how an object is displayed
+ * and provides an API that is easier to use when compared to creating the 
+ * commands (FSPlaceObject, FSRemoveObject, etc.) used to manipulate the Flash 
+ * Player's display list directly. The following code:
+ * 
+ * <pre>
+ * FSLayer layer = new Layer(1);
+ * 
+ * layer.select(shape);
+ * layer.move(x1, y1);
+ * layer.show();
+ * layer.move(x2, y2);
+ * layer.show();
+ * 
+ * movie.add(layer.getObjects());
+ * </pre>
+ * 
+ * is equivalent to:
+ * 
+ * <pre>
+ * movie.add(shape);
+ * movie.add(new FSPlaceObject2(shape.getIdentifier, 1, x1, y1));
+ * movie.add(FSShowFrame.getInstance());
+ * movie.add(new FSPlaceObject2(1, x2, y2));
+ * movie.add(FSShowFrame.getInstance());
+ * </pre>
+ * 
+ * After each set of commands the display list is updated by executing the 
+ * show() method - this adds a ShowFrame instruction to the final movie which
+ * tells the Flash Player to render the display list on the screen.
+ * 
+ * The commands that manipulate the display list can also be combined to apply
+ * several operations at once:
+ * 
+ * <pre>
+ * layer.select(shape);
+ * layer.move(x, y);
+ * layer.morph(0.9);
+ * layer.color(r, g, b);
+ * layer.show();
+ * </pre>
+ * 
+ * is equivalent to:
+ * 
+ * <pre>
+ * FSCoordTransform coord = new FSCoordTransform(x, y);
+ * FSColorTransform color = new FSColorTransform(r, g, b);
+ * FSPlaceObject2 place = new FSPlaceObject2(shape.getIdentifier, 1, coord, color)
+ * place.setRatio(0.9);
+ * 
+ * movie.add(shape);
+ * movie.add(place);
+ * movie.add(FSShowFrame.getInstance());
+ * </pre>
+ * 
+ * An operation is use to set the attributes on either an FSPlaceObject2 or 
+ * FSRemoveObject2 object so operations of the same type cannot be combined
+ * to create a cumulative effect. For example:
+ * 
+ * <pre>
+ * layer.move(x1, y1);
+ * layer.move(x2, y2);
+ * </pre>
+ *
+ * is the same as:
+ * 
+ * <pre>
+ * layer.move(x2, y2);
+ * </pre>
+ * 
+ * and not:
+ * 
+ * <pre>
+ * layer.move(x1+x2, y1+y2);
+ * </pre>
+ * 
+ * The most obvious benefit is code that is easier to write and read however
+ * the benefits of using layers come to the fore when creating movies with 
+ * multiple objects. Currently the movie object represents the main time-line and
+ * the commands to control and display each object must be interleaved together.
+ * This quickly becomes unwieldy and error prone if several objects are involved.
+ * With layers, each can be regarded as the time-line for a single object. The 
+ * object can then be manipulated more easily and the final set of Layers merged
+ * together to create a single time-line. The only limitation in the merging 
+ * process is that all the Layers must start at the same point in time. 
+ * 
+ * Each Layer object created must be assigned a unique number. In Flash an object 
+ * to be displayed is assigned to a given layer with (typically) only one object 
+ * displayed on a given layer. The layer number is used to control the order in 
+ * which the objects are displayed. Objects placed on a higher layer number are 
+ * displayed in front of object placed on a lower layer number. 
+ * 
+ */
+public final class FSLayer
+{
+	/**
+	 * Merge layers together to create a single time-line. Each layer is 
+	 * assumed to start at the same point in time. The process steps through 
+	 * each of the layers, frame by frame, adding all the commands used to 
+	 * manipulate the Flash Player's display list into a single group.
+	 * 
+	 * @param layers and array of FSLayer objects.
+	 * 
+	 * @return an array of all the objects contained in each layer. This array 
+	 * can then be added to the movie.
+	 */
+    public static ArrayList merge(ArrayList layers)
+    {
+        ArrayList objects = new ArrayList();
+        
+        int[] idx = new int[layers.size()];
+        
+        for (int i=0; i<idx.length; i++) {
+        	idx[i] = 0;
+        }
+        
+        while (true)
+        {
+        	ArrayList array = null;
+        	FSMovieObject object;
+
+        	for (int i=0; i<idx.length; i++)
+            {
+        		array = ((FSLayer)layers.get(i)).getObjects();
+        		
+        		while (idx[i] < array.size())
+        		{
+        			object = (FSMovieObject)array.get(idx[i]++);
+        			
+        			if (object.getType() == FSMovieObject.ShowFrame) {
+        				break;
+        			}
+        			
+        			objects.add(object);
+        		}
+        		
+        		if (idx[i] == array.size()) {
+        			array = null;
+        		}
+            }
+        	objects.add(FSShowFrame.getInstance());
+        	
+        	if (array == null) {
+        		break;
+        	}
+        }
+        
+        return objects;
+    }    
+
+    private int layer;
+    private int identifier;
+    private FSPlaceObject2 place;
+    
+    private ArrayList displayList;
+
+    /**
+     * Create a new Layer object. Layers are used to define the order in which
+     * objects are displayed. Objects placed on a high layer number are 
+     * displayed in front of those on a lower layer.
+     * 
+     * @param number the layer number on the display list.
+     */
+    public FSLayer(int number)
+    {
+    	layer = number;
+    	identifier = 0;
+    	displayList = new ArrayList();
+    }
+    
+    /**
+     * Return the layer number. The Flash Player assumes that there is only 
+     * one object placed on each layer and so each must have a unique number.
+     * 
+     * @return the layer number.
+     */
+    public int getLayer()
+    {
+    	return layer;
+    }
+    
+    /**
+     * Return the identifier of the object on the layer. Note: it is possible 
+     * to place more than one object on a layer however only one should be 
+     * visible on the display list at a given time.
+     * 
+     * @return the unique identifier used to reference the object.
+     */
+    public int getIdentifier()
+    {
+    	return identifier;
+    }
+    
+    /**
+     * Return the array of commands used to manipulate the object on the display
+     * list.
+     * 
+     * @return an array of FSMovieObject containing the definition of the object
+     * (shape, text, etc) to be displayed and the associated commands that 
+     * update the position of the object on the screen.
+     */
+    public ArrayList getObjects()
+    {
+    	return displayList;
+    }
+
+    /**
+     * Add an object to the layer. The object may be selected later for display.
+     * 
+     * @param definition an object defining an image, shape, text, sound
+     * or video.
+     */
+    public void add(FSDefineObject definition)
+    {
+		displayList.add(definition);
+    }
+    
+    /**
+     * Select the object previously added to the layer to be added on the 
+     * display list.
+     * 
+     * @param definition an object definition, FSDefineShape, FSDefineImage,
+     * etc. that will be added to the display list.
+     */
+    public void select(int identifier)
+    {
+		this.identifier = identifier;
+    }
+
+    /**
+     * Add an object to the later and select it to be added on the display list.
+     * 
+     * @param definition an object definition, FSDefineShape, FSDefineImage,
+     * etc. that will be added to the display list.
+     */
+    public void select(FSDefineObject definition)
+    {
+		add(definition);
+		select(definition.getIdentifier());
+    }
+
+    /**
+     * Set the coordinates where the object will be displayed.
+     * 
+     * @param x the x-coordinate, expressed in twips.
+     * @param y the y-coordinate, expressed in twips.
+     */
+    public void move(int x, int y) 
+    {
+    	if (place == null) {
+    		place = new FSPlaceObject2(layer, x, y);
+    	}
+    	else {
+        	place.setTransform(new FSCoordTransform(x, y));
+    	}
+    }
+    
+    /**
+     * Change the colour of the object to the values (r,g,b). The colour will
+     * be opaque so you cannot use this method to change only the colour of 
+     * a transparent object.
+     * 
+     * @param r the red component of the colour.
+     * @param g the green component of the colour.
+     * @param b the blue component of the colour.
+     */
+    public void color(int r, int g, int b)
+    {
+    	color(r,g,b,255);
+    }
+    
+    /**
+     * Change the colour of the object to the values (r,g,b,a).
+     * 
+     * @param r the red component of the colour.
+     * @param g the green component of the colour.
+     * @param b the blue component of the colour.
+     * @param a the transparency component.
+     */
+    public void color(int r, int g, int b, int a)
+    {
+    	if (place == null) {
+    		place = new FSPlaceObject2(layer, new FSColorTransform(0.0f, 0.0f, 0.0f, 0.0f, r, g, b, a));
+    	}
+    	else {
+        	place.setColorTransform(new FSColorTransform(0.0f, 0.0f, 0.0f, 0.0f, r, g, b, a));
+    	}
+    }
+    
+    /** 
+     * Set the number of layers that the outline of the object will clip when
+     * placed on the display list.
+     * 
+     * @param depth the number of layers that will be clipped.
+     */
+    public void clip(int depth)
+    {
+    	if (place == null) {
+    		place = new FSPlaceObject2(layer, (FSCoordTransform)null);
+    		place.setClippingDepth(depth);
+    	}
+    	else {
+        	place.setClippingDepth(depth);
+    	}
+    }
+    
+    /**
+     * Set the point in the morphing process for a morph shape in the range 
+     * 0.0 to 1.0. May be set to zero if the shape being placed is not being 
+     * morphed.
+     * 
+     * @param ratio the ratio between the starting shape and the end shape.
+     */
+    public void morph(float ratio)
+    {
+    	if (place == null) {
+    		place = new FSPlaceObject2(layer, ratio, null);
+    	}
+    	else {
+        	place.setRatio(ratio);
+    	}
+    }
+    
+    /**
+     * Assign a name to the object.
+     * 
+     * @param name a string that can be used to reference the object.
+     */
+    public void name(String name)
+    {
+    	if (place == null) {
+    		place = new FSPlaceObject2(layer, (FSCoordTransform)null);
+    		place.setName(name);
+    	}
+    	else {
+        	place.setName(name);
+    	}
+    }
+        
+    /**
+     * Remove the object from the display list.
+     */
+    public void remove()
+    {
+    	if (place != null) {
+    		displayList.add(place);
+    		place = null;
+    	}
+    	
+    	displayList.add(new FSRemoveObject2(layer));
+    }
+
+    /**
+     * Change the colour of the object by applying a color transform.
+     * 
+     * @param color the color transform to apply to the shape.
+     */
+    public void change(FSColorTransform color)
+    {
+    	if (place == null) {
+    		place = new FSPlaceObject2(layer, color);
+    	}
+    	else {
+        	place.setColorTransform(color);
+    	}
+    }
+    
+    /**
+     * Change the position, orientation and scaling of the object by applying a 
+     * 2D coordinate transform.
+     * 
+     * Use this method to apply more complex coordinate transforms to an object
+     * for example that composite move, scaling and rotation operations in a 
+     * single step.
+     * 
+     * @param coord the coordinate transform to apply to the object.
+     */
+    public void change(FSCoordTransform coord)
+    {
+    	if (place == null) {
+    		place = new FSPlaceObject2(layer, coord);
+    	}
+    	else {
+        	place.setTransform(coord);
+    	}
+    }
+    
+    /**
+     * Instruct the Flash Player to display a frame and render the contents of 
+     * the display list, applying the commands previously set. You must use this 
+     * method for any of the other operations to take effect.
+     * 
+     */
+    public void show()
+    {
+    	show(1);
+    }
+    
+    /**
+     * Display one or more frames. The state (position, orientation, visibility,
+     * etc.) of the object will remain unchanged for the duration of the 
+     * added frames. 
+     * 
+     * @param count the number of frames to be displayed.
+     * @throws IllegalArgumentException is the number of frames is less than 1.
+     */
+    public void show(int count)
+    {
+    	if (count < 1) {
+    		throw new IllegalArgumentException("Must show at least one frame");
+    	}
+    	
+    	if (place != null) {
+    		displayList.add(place);
+    		place = null;
+    	}
+    	
+    	for (int i=0; i<count; i++) {
+    		displayList.add(FSShowFrame.getInstance());
+    	}
+    }
+}
+



From smackay at mail.berlios.de  Mon Jan 28 12:28:13 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Mon, 28 Jan 2008 12:28:13 +0100
Subject: [Transform-svn] r287 - trunk/src/com/flagstone/transform
Message-ID: <200801281128.m0SBSDu2018698@sheep.berlios.de>

Author: smackay
Date: 2008-01-28 12:28:03 +0100 (Mon, 28 Jan 2008)
New Revision: 287

Modified:
   trunk/src/com/flagstone/transform/FSPlaceObject2.java
Log:
Updated javadoc comments when setting the morph ratio for an object.

Modified: trunk/src/com/flagstone/transform/FSPlaceObject2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPlaceObject2.java	2008-01-28 11:22:59 UTC (rev 286)
+++ trunk/src/com/flagstone/transform/FSPlaceObject2.java	2008-01-28 11:28:03 UTC (rev 287)
@@ -272,7 +272,7 @@
     private byte[] encodedEvents = null;
         
     /**
-     * Construct an FSPlaceObject2 object, initalizing it with values decoded 
+     * Construct an FSPlaceObject2 object, initialising it with values decoded 
      * from an encoded object.
      * 
      * @param coder an FSCoder containing the binary data.
@@ -663,9 +663,9 @@
         return colorTransform;
     }
 
-    /** Gets the morph ratio, in the range 0..65535 that defines the progress in the morphing process performed by the Flash Player from the defined start and end shapes. A value of 0 indicates the start of the process and 65535 the end.
+    /** Gets the morph ratio, in the range 0.0 to 1.0 that defines the progress in the morphing process performed by the Flash Player from the defined start and end shapes. A value of 0 indicates the start of the process and 65535 the end.
 
-        @return the morph ratio, in the range 0..65535.
+        @return the morph ratio, in the range 0.0..1.0.
         */
     public float getRatio()
     {
@@ -735,7 +735,7 @@
         colorTransform = aTransform;
     }
 
-    /** Sets point of the morphing process for a morph shape in the range 0..65535. May be set to zero if the shape being placed is not being morphed. The value may be set to Transform.VALUE_NOT_SET if the shape is not being morphed.
+    /** Sets point of the morphing process for a morph shape in the range 0..1. May be set to zero if the shape being placed is not being morphed.
 
         @param aNumber the progress in the morphing process.
         */



From smackay at mail.berlios.de  Mon Jan 28 12:29:15 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Mon, 28 Jan 2008 12:29:15 +0100
Subject: [Transform-svn] r288 - trunk/src/com/flagstone/transform
Message-ID: <200801281129.m0SBTF6Y018774@sheep.berlios.de>

Author: smackay
Date: 2008-01-28 12:29:12 +0100 (Mon, 28 Jan 2008)
New Revision: 288

Modified:
   trunk/src/com/flagstone/transform/FSDefineJPEGImage.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
Log:
Added width and height attributes.

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage.java	2008-01-28 11:28:03 UTC (rev 287)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage.java	2008-01-28 11:29:12 UTC (rev 288)
@@ -92,6 +92,8 @@
 public class FSDefineJPEGImage extends FSDefineObject
 {
     private byte[] image = null;
+    private int width;
+    private int height;
     
     /**
      * Construct an FSDefineJPEGImage object, initalizing it with values decoded 
@@ -123,9 +125,30 @@
     public FSDefineJPEGImage(FSDefineJPEGImage obj)
     {
         super(obj);
+        width = obj.width;
+        height = obj.height;
         image = Transform.clone(obj.image);
     }
 
+    /** 
+     * Gets the width of the image in pixels. 
+     * 
+     * @return the width of the image.
+     */
+    public int getWidth()
+    {
+        return width; 
+    }    
+    /** 
+     * Gets the height of the image in pixels.
+     * 
+     * @return the height of the image in pixels.
+     */
+    public int getHeight()
+    {
+        return height;
+    }
+
     /** Gets the image data.
 
         @return the array of bytes containing the image data.
@@ -141,6 +164,7 @@
     public void setImage(byte[] bytes)
     {
         image = bytes;
+        decodeInfo();
     }
 
     public Object clone()
@@ -148,6 +172,8 @@
         FSDefineJPEGImage anObject = (FSDefineJPEGImage)super.clone();
         
         anObject.image = Transform.clone(image);
+        anObject.width = width;
+        anObject.height = height;
         
         return anObject;
     }
@@ -201,4 +227,32 @@
         setImage(data);
         coder.endObject(name());
     }
+    private boolean decodeInfo()
+    {
+        FSCoder coder = new FSCoder(FSCoder.BIG_ENDIAN, image);
+                 
+        if (coder.readWord(2, false) != 0xffd8)
+            return false;
+
+        while (true) 
+        {
+            int marker = coder.readWord(2, false);
+            int size = coder.readWord(2, false);
+            
+            if ((marker & 0xff00) != 0xff00) 
+                return false;
+            
+            if (marker >= 0xffc0 && marker <= 0xffcf && marker != 0xffc4 && marker != 0xffc8) 
+            {
+                coder.readWord(1, false);
+                height = coder.readWord(2, false);
+                width = coder.readWord(2, false);
+                return true;
+            } 
+            else 
+            {
+                coder.adjustPointer((size - 2) << 3);
+            }
+        }
+    }
 }

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2008-01-28 11:28:03 UTC (rev 287)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2008-01-28 11:29:12 UTC (rev 288)
@@ -103,6 +103,8 @@
  */
 public class FSDefineJPEGImage2 extends FSDefineObject
 {
+    private int width;
+    private int height;
     private byte[] image = null;
     private byte[] encodingTable = null;
 
@@ -150,9 +152,29 @@
     {
         super(obj);
         image = Transform.clone(obj.image);
+        width = obj.width;
+        height = obj.height;
         encodingTable = Transform.clone(obj.encodingTable);
     }
 
+    /** 
+     * Gets the width of the image in pixels. 
+     * 
+     * @return the width of the image.
+     */
+    public int getWidth()
+    {
+        return width; 
+    }    
+    /** 
+     * Gets the height of the image in pixels.
+     * 
+     * @return the height of the image in pixels.
+     */
+    public int getHeight()
+    {
+        return height;
+    }
     /** Gets the image data.
 
         @return the array of bytes containing the image data.
@@ -172,6 +194,7 @@
     public void setImage(byte[] bytes)
     {
         image = bytes;
+        decodeInfo();
     }
 
     /** Sets the encoding table.
@@ -191,6 +214,8 @@
         FSDefineJPEGImage2 anObject = (FSDefineJPEGImage2)super.clone();
 
         anObject.image = Transform.clone(image);
+        anObject.width = width;
+        anObject.height = height;
         anObject.encodingTable = Transform.clone(encodingTable);
 
         return anObject;
@@ -280,4 +305,33 @@
 
         return bytes;
     }
+
+    private boolean decodeInfo()
+    {
+        FSCoder coder = new FSCoder(FSCoder.BIG_ENDIAN, image);
+                 
+        if (coder.readWord(2, false) != 0xffd8)
+            return false;
+
+        while (true) 
+        {
+            int marker = coder.readWord(2, false);
+            int size = coder.readWord(2, false);
+            
+            if ((marker & 0xff00) != 0xff00) 
+                return false;
+            
+            if (marker >= 0xffc0 && marker <= 0xffcf && marker != 0xffc4 && marker != 0xffc8) 
+            {
+                coder.readWord(1, false);
+                height = coder.readWord(2, false);
+                width = coder.readWord(2, false);
+                return true;
+            } 
+            else 
+            {
+                coder.adjustPointer((size - 2) << 3);
+            }
+        }
+    }
 }

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2008-01-28 11:28:03 UTC (rev 287)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2008-01-28 11:29:12 UTC (rev 288)
@@ -126,6 +126,8 @@
  */
 public class FSDefineJPEGImage3 extends FSDefineObject
 {
+    private int width;
+    private int height;
     private byte[] image = null;
     private byte[] encodingTable = null;
     private byte[] alpha = null;
@@ -166,6 +168,8 @@
     {
         super(obj);
         image = Transform.clone(obj.image);
+        width = obj.width;
+        height = obj.height;
         encodingTable = Transform.clone(obj.encodingTable);
         alpha = Transform.clone(obj.alpha);
     }
@@ -176,6 +180,25 @@
         */
     public byte[] getEncodingTable()  { return encodingTable; }
 
+    /** 
+     * Gets the width of the image in pixels. 
+     * 
+     * @return the width of the image.
+     */
+    public int getWidth()
+    {
+        return width; 
+    }    
+    /** 
+     * Gets the height of the image in pixels.
+     * 
+     * @return the height of the image in pixels.
+     */
+    public int getHeight()
+    {
+        return height;
+    }
+
     /** Gets the image data.
 
         @return the array of bytes containing the image data.
@@ -207,6 +230,7 @@
     public void setImage(byte[] bytes)
     {
         image = bytes;
+        decodeInfo();
     }
 
     /** Sets the alpha channel data with the zlib compressed data.
@@ -331,4 +355,32 @@
 
         return bytes;
     }
+    private boolean decodeInfo()
+    {
+        FSCoder coder = new FSCoder(FSCoder.BIG_ENDIAN, image);
+                 
+        if (coder.readWord(2, false) != 0xffd8)
+            return false;
+
+        while (true) 
+        {
+            int marker = coder.readWord(2, false);
+            int size = coder.readWord(2, false);
+            
+            if ((marker & 0xff00) != 0xff00) 
+                return false;
+            
+            if (marker >= 0xffc0 && marker <= 0xffcf && marker != 0xffc4 && marker != 0xffc8) 
+            {
+                coder.readWord(1, false);
+                height = coder.readWord(2, false);
+                width = coder.readWord(2, false);
+                return true;
+            } 
+            else 
+            {
+                coder.adjustPointer((size - 2) << 3);
+            }
+        }
+    }
 }
\ No newline at end of file



From smackay at mail.berlios.de  Mon Jan 28 12:31:31 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Mon, 28 Jan 2008 12:31:31 +0100
Subject: [Transform-svn] r289 - trunk/src/com/flagstone/transform
Message-ID: <200801281131.m0SBVVO2022077@sheep.berlios.de>

Author: smackay
Date: 2008-01-28 12:31:27 +0100 (Mon, 28 Jan 2008)
New Revision: 289

Modified:
   trunk/src/com/flagstone/transform/FSColorTransform.java
Log:
corrected spelling mistake in method name.

Modified: trunk/src/com/flagstone/transform/FSColorTransform.java
===================================================================
--- trunk/src/com/flagstone/transform/FSColorTransform.java	2008-01-28 11:29:12 UTC (rev 288)
+++ trunk/src/com/flagstone/transform/FSColorTransform.java	2008-01-28 11:31:27 UTC (rev 289)
@@ -682,7 +682,7 @@
         @param coder the FSCoder used to encoded the transform.
         @return true if the object represents a unity transform, false otherwise.
         */
-    public boolean isUniyTransform(FSCoder coder)
+    public boolean isUnityTransform(FSCoder coder)
     {
         return ! (containsAddTerms(coder) || containsMultiplyTerms(coder));
     }



From smackay at mail.berlios.de  Mon Jan 28 12:32:22 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Mon, 28 Jan 2008 12:32:22 +0100
Subject: [Transform-svn] r290 - trunk/src/com/flagstone/transform
Message-ID: <200801281132.m0SBWMHS023833@sheep.berlios.de>

Author: smackay
Date: 2008-01-28 12:32:14 +0100 (Mon, 28 Jan 2008)
New Revision: 290

Modified:
   trunk/src/com/flagstone/transform/FSButtonEvent.java
   trunk/src/com/flagstone/transform/FSClipEvent.java
   trunk/src/com/flagstone/transform/FSDefineButton.java
   trunk/src/com/flagstone/transform/FSDoAction.java
   trunk/src/com/flagstone/transform/FSInitialize.java
Log:
Updated the way actions are encoded to improve reliability.

Modified: trunk/src/com/flagstone/transform/FSButtonEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonEvent.java	2008-01-28 11:31:27 UTC (rev 289)
+++ trunk/src/com/flagstone/transform/FSButtonEvent.java	2008-01-28 11:32:14 UTC (rev 290)
@@ -396,7 +396,7 @@
                 length += (currentAction.getType() > 128) ? 3 : 1;
             }
             
-            if (currentAction.getType() != FSAction.End) {
+            if ((actions.size() == 0) || (currentAction.getType() != FSAction.End)) {
             	length += 1;
             }
         }
@@ -404,7 +404,7 @@
         {
             length += encodedActions.length;
 
-            if (encodedActions[encodedActions.length-1] != FSAction.End) {
+            if ((encodedActions.length == 0) || (encodedActions[encodedActions.length-1] != FSAction.End)) {
             	length += 1;
             }
         }        
@@ -443,7 +443,7 @@
                 }
             }
             
-            if (action.getType() != FSAction.End) {
+            if ((actions.size() == 0) || (action.getType() != FSAction.End)) {
                 coder.writeWord(0, 1);
             }
         }
@@ -451,7 +451,7 @@
         {
             coder.writeBytes(encodedActions);
 
-            if (encodedActions[encodedActions.length-1] != FSAction.End) {
+            if ((encodedActions.length == 0) || (encodedActions[encodedActions.length-1] != FSAction.End)) {
                 coder.writeWord(0, 1);
             }
         }

Modified: trunk/src/com/flagstone/transform/FSClipEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSClipEvent.java	2008-01-28 11:31:27 UTC (rev 289)
+++ trunk/src/com/flagstone/transform/FSClipEvent.java	2008-01-28 11:32:14 UTC (rev 290)
@@ -492,7 +492,7 @@
                 length += (currentAction.getType() > 128) ? 3 : 1;
             }
             
-            if (currentAction.getType() != FSAction.End) {
+            if ((actions.size() == 0) || (currentAction.getType() != FSAction.End)) {
             	length += 1;
             }
         }
@@ -500,7 +500,7 @@
         {
             length += encodedActions.length;
 
-            if (encodedActions[encodedActions.length-1] != FSAction.End) {
+            if ((encodedActions.length == 0) || (encodedActions[encodedActions.length-1] != FSAction.End)) {
             	length += 1;
             }
         }
@@ -525,7 +525,7 @@
                 offset += (currentAction.getType() > 128) ? 3 : 1;
             }
             
-            if (currentAction.getType() != FSAction.End) {
+            if ((actions.size() == 0) || (currentAction.getType() != FSAction.End)) {
             	offset += 1;
             }
         }
@@ -533,7 +533,7 @@
         {
             offset += encodedActions.length;
 
-            if (encodedActions[encodedActions.length-1] != FSAction.End) {
+            if ((encodedActions.length == 0) || (encodedActions[encodedActions.length-1] != FSAction.End)) {
             	offset += 1;
             }
         }
@@ -578,7 +578,7 @@
                 }
             }
             
-            if (action.getType() != FSAction.End) {
+            if ((actions.size() == 0) || (action.getType() != FSAction.End)) {
                 coder.writeWord(0, 1);
             }
         }
@@ -586,7 +586,7 @@
         {
            coder.writeBytes(encodedActions);
 
-           if (encodedActions[encodedActions.length-1] != FSAction.End) {
+           if ((encodedActions.length == 0) || (encodedActions[encodedActions.length-1] != FSAction.End)) {
                coder.writeWord(0, 1);
            }
         }

Modified: trunk/src/com/flagstone/transform/FSDefineButton.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton.java	2008-01-28 11:31:27 UTC (rev 289)
+++ trunk/src/com/flagstone/transform/FSDefineButton.java	2008-01-28 11:32:14 UTC (rev 290)
@@ -383,7 +383,7 @@
                 length += (currentAction.getType() > 128) ? 3 : 1;
             }
             
-            if (currentAction.getType() != FSAction.End) {
+            if ((actions.size() == 0) || (currentAction.getType() != FSAction.End)) {
             	length += 1;
             }
         }
@@ -391,7 +391,7 @@
         {
             length += encodedActions.length;
 
-            if (encodedActions[encodedActions.length-1] != FSAction.End) {
+            if ((encodedActions.length == 0) || (encodedActions[encodedActions.length-1] != FSAction.End)) {
             	length += 1;
             }
         }
@@ -435,7 +435,7 @@
                 }
             }
             
-            if (action.getType() != FSAction.End) {
+            if ((actions.size() == 0) || (action.getType() != FSAction.End)) {
                 coder.writeWord(0, 1);
             }
         }
@@ -443,7 +443,7 @@
         {
             coder.writeBytes(encodedActions);
 
-            if (encodedActions[encodedActions.length-1] != FSAction.End) {
+            if ((encodedActions.length == 0) || (encodedActions[encodedActions.length-1] != FSAction.End)) {
                 coder.writeWord(0, 1);
             }
         }

Modified: trunk/src/com/flagstone/transform/FSDoAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDoAction.java	2008-01-28 11:31:27 UTC (rev 289)
+++ trunk/src/com/flagstone/transform/FSDoAction.java	2008-01-28 11:32:14 UTC (rev 290)
@@ -276,8 +276,9 @@
         if (actions != null)
         {
         	FSActionObject currentAction = null;
+        	int count = actions.size();
         	
-            for (int i=0; i<actions.size(); i++)
+            for (int i=0; i<count; i++)
             {
                 currentAction = (FSActionObject)actions.get(i);
             
@@ -285,7 +286,7 @@
                 length += (currentAction.getType() > 128) ? 3 : 1;
             }
             
-            if (currentAction.getType() != FSAction.End) {
+            if (count == 0 || (currentAction.getType() != FSAction.End)) {
             	length += 1;
             }
         }
@@ -293,7 +294,7 @@
         {
             length += encodedActions.length;
 
-            if (encodedActions[encodedActions.length-1] != FSAction.End) {
+            if ((encodedActions.length == 0) || (encodedActions[encodedActions.length-1] != FSAction.End)) {
             	length += 1;
             }
         }
@@ -331,7 +332,7 @@
                 coder.setPointer(next);
             }
             
-            if (action.getType() != FSAction.End) {
+            if ((actions.size() == 0) || (action.getType() != FSAction.End)) {
                 coder.writeWord(0, 1);
             }
         }
@@ -339,7 +340,7 @@
         {
             coder.writeBytes(encodedActions);
 
-            if (encodedActions[encodedActions.length-1] != FSAction.End) {
+            if ((encodedActions.length == 0) || (encodedActions[encodedActions.length-1] != FSAction.End)) {
                 coder.writeWord(0, 1);
             }
         }

Modified: trunk/src/com/flagstone/transform/FSInitialize.java
===================================================================
--- trunk/src/com/flagstone/transform/FSInitialize.java	2008-01-28 11:31:27 UTC (rev 289)
+++ trunk/src/com/flagstone/transform/FSInitialize.java	2008-01-28 11:32:14 UTC (rev 290)
@@ -305,7 +305,7 @@
                 length += (currentAction.getType() > 128) ? 3 : 1;
             }
             
-            if (currentAction.getType() != FSAction.End) {
+            if ((actions.size() == 0) || (currentAction.getType() != FSAction.End)) {
             	length += 1;
             }
         }
@@ -313,7 +313,7 @@
         {
             length += encodedActions.length;
 
-            if (encodedActions[encodedActions.length-1] != FSAction.End) {
+            if ((encodedActions.length == 0) || (encodedActions[encodedActions.length-1] != FSAction.End)) {
             	length += 1;
             }
         }
@@ -354,7 +354,7 @@
                 }
             }
             
-            if (action.getType() != FSAction.End) {
+            if ((actions.size() == 0) || (action.getType() != FSAction.End)) {
                 coder.writeWord(0, 1);
             }
         }
@@ -362,7 +362,7 @@
         {
             coder.writeBytes(encodedActions);
 
-            if (encodedActions[encodedActions.length-1] != FSAction.End) {
+            if ((encodedActions.length == 0) || (encodedActions[encodedActions.length-1] != FSAction.End)) {
                 coder.writeWord(0, 1);
             }
         }



From smackay at mail.berlios.de  Mon Jan 28 12:37:03 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Mon, 28 Jan 2008 12:37:03 +0100
Subject: [Transform-svn] r291 - trunk/doc/releases
Message-ID: <200801281137.m0SBb3qN001985@sheep.berlios.de>

Author: smackay
Date: 2008-01-28 12:37:00 +0100 (Mon, 28 Jan 2008)
New Revision: 291

Modified:
   trunk/doc/releases/transform-pre-2.2.0.txt
Log:
Updated release notes.

Modified: trunk/doc/releases/transform-pre-2.2.0.txt
===================================================================
--- trunk/doc/releases/transform-pre-2.2.0.txt	2008-01-28 11:32:14 UTC (rev 290)
+++ trunk/doc/releases/transform-pre-2.2.0.txt	2008-01-28 11:37:00 UTC (rev 291)
@@ -2,18 +2,24 @@
   Release Notes for Transform SWF for Java, Version 2.2.
 ----------------------------------------------------------
 
-The release will improve the test coverage by adding more TestNG suites and 
-unit test classes.
+The release adds new classes to make it easier to construct movies and get 
+information about flash file. New methods are added to JPEG images to get 
+width and height.
 
 
 Bug Fixes
-    None scheduled
+    FSColorTransform method isUnityTransform is now correctly spelled.
 
 Class Changes
     JPEG Images have width and height.
-    FSFrame - a new class for organizing the timeline within movies.
-    FSLayer - a new class for organizing the animation of objects within movies.
+    FSShapeConstructor - polygon() now handles absolute coordinates.
+    FSFrame - a new class for organising the time-line within movies.
+    FSLayer - a new class for organising the animation of objects within movies.
+    FSHeader - a new class for just getting information about a flash file.
     
+Documentation Changes
+    FSPlaceObject2 - corrected documentation on setting the morph ratio.
+
 Testing Changes
     None scheduled
     
@@ -25,6 +31,11 @@
   Bug Fixes  
 -------------
 
+1. FSColorTransform method isUnityTransform is now correctly spelled.
+
+In previous releases the 't' was missing from 'Unity' i.e. isUniyTransform. This 
+is now corrected to isUnityTransform.
+
 -----------------
   Class Changes  
 -----------------
@@ -41,8 +52,14 @@
 No set methods are added, the width and height are decoded from the image data 
 whenver the object is decoded or the setImage() method is used.
 
-2. FSFrame - a new class for organizing the timeline within movies.
+2. FSShapeConstructor - polygon() now handles absolute coordinates.
 
+The coordinates passed to the polygon(int[]) method on FSShapeConstructor are 
+now absolute. A new method rpolygon(int[]) was added to allow polygons to be 
+drawn using relative coordinates.
+
+3. FSFrame - a new class for organising the time-line within movies.
+
 FSFrame is an upgraded version of the Frame class currently available on the 
 Useful Code page with the addition of a frame number attribute. 
 
@@ -50,21 +67,56 @@
 task of creation and editing a movie. However supported numbered frames becomes
 really useful when combined with the new FSLayer class.
 
-3. FSLayer - a new class for organizing the animation of objects within movies.
+4. FSLayer - a new class for organising the animation of objects within movies.
 
 Currently all the objects must be created and positioned for successive frames.
 This makes creating of complex animations with Transform next to impossible 
 without careful coding.
 
-With the FSLayer class, separate timelines can be created for each object. With
+With the FSLayer class, separate time-lines can be created for each object. With
 each frame numbered using the FSFrame class all the layers can easily be aligned 
 and flattened to create the final animation. 
 
+5. FSHeader - a new class for just getting information about a flash file.
+
+FSHeader decodes the header block of a flash file that contains the following 
+information about a movie:
+
+    signature, indicates whether a file was compressed "CWS" or not "FWS".
+	version, the version of Flash used.
+	length, the length of the movie in bytes when uncompressed.
+ 	minX, the x-coordinate of the top left corner of the screen.
+ 	maxX, the x-coordinate of the bottom right corner of the screen.
+ 	minY, the y-coordinate of the top left corner of the screen.
+ 	maxY, the y-coordinate of the bottom right corner of the screen.
+ 	frameRate, the rate at which the movie is played, in frames per second.
+ 	frameCount, the number of frames in the movie.
+ 	
+FSHeader only the header information is decoded, the rest of the data structures 
+are ignored so the class can be used to get the attributes of a movie without
+paying the penalty of using FSMovie where all the data structures are decoded.
+
+-------------------------
+  Documentation Changes  
+-------------------------
+
+1. FSPlaceObject2 - corrected documentation on setting the morph ratio.
+
+The javadoc comments on methods that set the morph ratio for an object specified
+the range as 0..65535, this is the actual number encoded in the Flash file 
+however Transform uses a floating point value in the range 0..1 which is more 
+intuitive to use - the value in converted when the object is encoded or decoded.
+The documentation was updated to refer to the floating point range. 
+
 -------------------
   Testing Changes  
 -------------------
 
+None
+
 -------------------
   Package Changes  
 -------------------
 
+None
+



From smackay at mail.berlios.de  Wed Jan 30 12:55:56 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Wed, 30 Jan 2008 12:55:56 +0100
Subject: [Transform-svn] r294 - trunk/src/com/flagstone/transform
Message-ID: <200801301155.m0UBtubu030924@sheep.berlios.de>

Author: smackay
Date: 2008-01-30 12:55:54 +0100 (Wed, 30 Jan 2008)
New Revision: 294

Modified:
   trunk/src/com/flagstone/transform/FSLayer.java
Log:
Corrected design flaw so place instructions are always added to the internal array without needing to call show.

Modified: trunk/src/com/flagstone/transform/FSLayer.java
===================================================================
--- trunk/src/com/flagstone/transform/FSLayer.java	2008-01-30 11:54:26 UTC (rev 293)
+++ trunk/src/com/flagstone/transform/FSLayer.java	2008-01-30 11:55:54 UTC (rev 294)
@@ -65,6 +65,9 @@
  * show() method - this adds a ShowFrame instruction to the final movie which
  * tells the Flash Player to render the display list on the screen.
  * 
+ * The select() method is only used when displaying an object for the first 
+ * time or re-displaying it after it was deleted from the display list.
+ * 
  * The commands that manipulate the display list can also be combined to apply
  * several operations at once:
  * 
@@ -253,14 +256,21 @@
     
     /**
      * Select the object previously added to the layer to be added on the 
-     * display list.
+     * display list. The object will be placed at the default coordinates (0,0).
      * 
+     * IMPORTANT: You only need to use this method when adding an object to the
+     * display list for the first time or when re-adding it after it has been
+     * deleted. Since the display list has one layer per object then the layer
+     * number can be used to identify which object to update.
+     * 
      * @param definition an object definition, FSDefineShape, FSDefineImage,
      * etc. that will be added to the display list.
      */
-    public void select(int identifier)
+    public void select(int id)
     {
-		this.identifier = identifier;
+		identifier = id;
+		place = new FSPlaceObject2(id, layer, 0,0);
+		displayList.add(place);
     }
 
     /**
@@ -285,6 +295,7 @@
     {
     	if (place == null) {
     		place = new FSPlaceObject2(layer, x, y);
+    		displayList.add(place);
     	}
     	else {
         	place.setTransform(new FSCoordTransform(x, y));
@@ -317,6 +328,7 @@
     {
     	if (place == null) {
     		place = new FSPlaceObject2(layer, new FSColorTransform(0.0f, 0.0f, 0.0f, 0.0f, r, g, b, a));
+    		displayList.add(place);
     	}
     	else {
         	place.setColorTransform(new FSColorTransform(0.0f, 0.0f, 0.0f, 0.0f, r, g, b, a));
@@ -334,6 +346,7 @@
     	if (place == null) {
     		place = new FSPlaceObject2(layer, (FSCoordTransform)null);
     		place.setClippingDepth(depth);
+    		displayList.add(place);
     	}
     	else {
         	place.setClippingDepth(depth);
@@ -351,6 +364,7 @@
     {
     	if (place == null) {
     		place = new FSPlaceObject2(layer, ratio, null);
+    		displayList.add(place);
     	}
     	else {
         	place.setRatio(ratio);
@@ -367,6 +381,7 @@
     	if (place == null) {
     		place = new FSPlaceObject2(layer, (FSCoordTransform)null);
     		place.setName(name);
+    		displayList.add(place);
     	}
     	else {
         	place.setName(name);
@@ -379,7 +394,6 @@
     public void remove()
     {
     	if (place != null) {
-    		displayList.add(place);
     		place = null;
     	}
     	
@@ -387,6 +401,23 @@
     }
 
     /**
+     * Replace the object on the display list.
+     */
+    public void replace(int id)
+    {
+		identifier = id;
+
+		if (place == null) {
+    		place = new FSPlaceObject2(id, layer);
+    		displayList.add(place);
+    	}
+    	else {
+    		place.setIdentifier(id);
+    		place.setPlaceType(FSPlaceObject2.Replace);
+    	}
+    }
+
+    /**
      * Change the colour of the object by applying a color transform.
      * 
      * @param color the color transform to apply to the shape.
@@ -395,6 +426,7 @@
     {
     	if (place == null) {
     		place = new FSPlaceObject2(layer, color);
+    		displayList.add(place);
     	}
     	else {
         	place.setColorTransform(color);
@@ -415,6 +447,7 @@
     {
     	if (place == null) {
     		place = new FSPlaceObject2(layer, coord);
+    		displayList.add(place);
     	}
     	else {
         	place.setTransform(coord);
@@ -447,7 +480,6 @@
     	}
     	
     	if (place != null) {
-    		displayList.add(place);
     		place = null;
     	}
     	



From smackay at mail.berlios.de  Wed Jan 30 12:54:37 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Wed, 30 Jan 2008 12:54:37 +0100
Subject: [Transform-svn] r293 - trunk/src/com/flagstone/transform
Message-ID: <200801301154.m0UBsb5j029887@sheep.berlios.de>

Author: smackay
Date: 2008-01-30 12:54:26 +0100 (Wed, 30 Jan 2008)
New Revision: 293

Modified:
   trunk/src/com/flagstone/transform/FSHeader.java
Log:
Added documentation.

Modified: trunk/src/com/flagstone/transform/FSHeader.java
===================================================================
--- trunk/src/com/flagstone/transform/FSHeader.java	2008-01-30 11:53:28 UTC (rev 292)
+++ trunk/src/com/flagstone/transform/FSHeader.java	2008-01-30 11:54:26 UTC (rev 293)
@@ -31,34 +31,23 @@
 import java.util.zip.*;
 import java.io.*;
 
+/**
+ * The FSHeader class can be used to quickly decode the header information in
+ * a flash file to get information about the number of frames, screen size
+ * etc. Only the first few bytes are decoded so this avoid the cost of using 
+ * the FSMovie class which decodes all the data structures. However if a file
+ * is compressed then the entire contents will have to be unzipped first in
+ * order to decode the header information.
+ * 
+ * Note: The coordinate system used for the screen extends from the TOP LEFT 
+ * corner with the positive x-axis extending to the left and the positive y-axis
+ * extending DOWN, unlike "traditional" Cartesian systems. The (minX, minY) and
+ * (maxX, maxY) coordinates specify the range of values used for the x and y 
+ * axes. (minX, minY) is often (0,0) but may contain any positive or negative 
+ * values.
+ */
 public final class FSHeader
 {
-    public static void main(String[] args)
-    {
-        try
-        {
-            FSHeader header = new FSHeader(args[0]);
-            
-            StringBuffer buffer = new StringBuffer();
-            
-            buffer.append("File: ").append(args[0]).append("\n");
-            buffer.append("Signature: ").append(header.getSignature()).append("\n");
-            buffer.append("Version: ").append(header.getVersion()).append("\n");
-            buffer.append("Frame: ");
-            buffer.append("(").append(header.getMinX()).append(",").append(header.getMinY()).append(") ");
-            buffer.append("(").append(header.getMaxX()).append(",").append(header.getMaxY()).append(")\n");
-            buffer.append("Length: ").append(header.getLength()+" bytes").append("\n");
-            buffer.append("FrameRate: ").append(header.getFrameRate()+" per second").append("\n");
-            buffer.append("Number Of Frames: ").append(header.getNumberOfFrames()).append("\n");
-            
-            System.out.println(buffer.toString());
-        }
-        catch (Exception e)
-        {
-            System.err.println("Could not read file: "+ args[0]);
-        }
-    }
-    
     private String signature = null;
     private int version = 0;
     private int minX = 0;
@@ -69,56 +58,187 @@
     private float frameRate = 0.0f;
     private int frameCount = 0;
     
-
+    /**
+     * Create a new FSHeader object and initialize it with the information
+     * decoded from the Flash file.
+     * 
+     * @param filename the path to a file.
+     * 
+     * @throws FileNotFoundException if the file referenced by the path does 
+     * not exist or refers to a directory.
+     * 
+     * @throws IOException if there is an error reading the file.
+     * 
+     * @throws DataFormatException if the file is not a flash file or there is
+     * an error unzipping a compressed flash file.
+     */
     public FSHeader(String filename) throws IOException, DataFormatException
     {
         decodeFromFile(filename);
     }
+    
+    /**
+     * Create a new FSHeader object and initialize it with the information
+     * decoded from the Flash file.
+     * 
+     * @param file a File containing the abstract path to a file.
+     * 
+     * @throws FileNotFoundException if the file referenced by the path does 
+     * not exist or refers to a directory.
+     * 
+     * @throws IOException if there is an error reading the file.
+     * 
+     * @throws DataFormatException if the file is not a flash file or there is
+     * an error unzipping a compressed flash file.
+     */
+    public FSHeader(File file) throws IOException, DataFormatException
+    {
+        decodeFromFile(file);
+    }
+
+    /**
+     * Create a new FSHeader object and initialize it with the information
+     * decoded from the binary data.
+     *
+     * @param bytes the encoded binary data from a Flash file.
+     * 
+     * @throws DataFormatException if the data is not in the flash format or 
+     * there is an error unzipping the data if it is compressed.
+     */
+    public FSHeader(byte[] bytes) throws IOException, DataFormatException
+    {
+        decodeFromData(bytes);
+    }
+
+    /**
+     * Return the signature used to identify the file type: "FWS" ("SWF" in 
+     * reverse) for regular Flash files or "CWS" for compressed (zipped) Flash
+     * files.
+     * 
+     * @return the signature used to identify the file as a Flash file.
+     */
     public String getSignature()
     {
         return signature;
     }
+
+    /**
+     * Return the version number of Flash format used n the file.
+     * 
+     * @return the Flash version number
+     */
     public int getVersion()
     {
         return version;
     }
+
+    /**
+     * Return the length in bytes of the file when uncompressed.
+     * 
+     * @return the length of the (uncompressed) file in bytes.
+     */
     public int getLength()
     {
         return length;
     }
+
+    /**
+     * Return the x-coordinate of the top left corner of the screen.
+     * 
+     * @return the x-coordinate of the top left corner
+     */
     public int getMinX() 
     {
         return minX;
     }
+
+    /**
+     * Return the x-coordinate of the bottom right corner of the screen.
+     * 
+     * @return the x-coordinate of the bottom right corner
+     */
     public int getMaxX() 
     {
         return maxX;
     }
+
+    /**
+     * The y-coordinate of the top left corner of the screen.
+     * 
+     * @return the y-coordinate of the top left corner
+     */
     public int getMinY() 
     {
         return minY;
     }
+
+    /**
+     * The y-coordinate of the bottom right corner of the screen.
+     * 
+     * @return the y-coordinate of the bottom right corner
+     */
     public int getMaxY()
     {
         return maxY;
     }
+
+    /**
+     * Return the number of frames per second at which the Flash Player will 
+     * attempt to display the file.
+     * 
+     * @return the frame rate in frames per second.
+     */
     public float getFrameRate()
     {
         return frameRate;
     }
-    public float getNumberOfFrames()
+
+    /**
+     * Return the number of frames in the movie.
+     * 
+     * @return the number of frames in the movie
+     */
+    public int getNumberOfFrames()
     {
         return frameCount;
     }
-    public void decodeFromFile(String fileName) throws FileNotFoundException, DataFormatException, IOException
+
+    /**
+     * Initialize the FSHeader object with the specified flash file.
+     * 
+     * @param filename the path to a file.
+     * 
+     * @throws FileNotFoundException if the file referenced by the path does 
+     * not exist or refers to a directory.
+     * 
+     * @throws IOException if there is an error reading the file.
+     * 
+     * @throws DataFormatException if the file is not a flash file or there is
+     * an error unzipping a compressed flash file.
+     */
+    public void decodeFromFile(String fileName) throws IOException, DataFormatException
     {
-        FileInputStream fileContents = null;
+        decodeFromFile(new File(fileName));
+    }
+    
+    /**
+     * Initialize the FSHeader object with the specified flash file.
+     * 
+     * @param file a File containing the abstract path to a file.
+     * 
+     * @throws FileNotFoundException if the file referenced by the path does 
+     * not exist or refers to a directory.
+     * 
+     * @throws IOException if there is an error reading the file.
+     * 
+     * @throws DataFormatException if the file is not a flash file or there is
+     * an error unzipping a compressed flash file.
+     */
+    public void decodeFromFile(File file) throws IOException, DataFormatException
+    {
+        FileInputStream fileContents = new FileInputStream(file);
         
-        File swfFile = new File(fileName);
-        
-        fileContents = new FileInputStream(swfFile);
-        
-        int fileLength = (int)swfFile.length();
+        int fileLength = (int)file.length();
         byte[] contents = new byte[fileLength];
         
         fileContents.read(contents);
@@ -126,7 +246,16 @@
         
         decodeFromData(contents);
     }
-    public void decodeFromData(byte[] bytes) throws DataFormatException, IOException
+
+    /**
+     * Initialize the FSHeader object with binary flash data.
+     * 
+     * @param bytes the encoded binary data from a Flash file.
+     * 
+     * @throws DataFormatException if the data is not in the flash format or 
+     * there is an error unzipping the data if it is compressed.
+     */
+    public void decodeFromData(byte[] bytes) throws DataFormatException
     {
         FSCoder coder = null;
 
@@ -155,6 +284,7 @@
         frameRate = coder.readFixedWord(1, 1);
         frameCount = coder.readWord(2, false);
     }
+    
     private void isFlash(byte[] bytes) throws DataFormatException
     {
         if (bytes == null || bytes.length < 8)
@@ -165,6 +295,7 @@
         if (isFlash == false)
             throw new DataFormatException("Data does not start with a valid Flash signature.");
     }
+    
     private byte[] unzip(byte[] bytes) throws DataFormatException
     {
         int movieLength = 0;



From smackay at mail.berlios.de  Wed Jan 30 12:53:35 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Wed, 30 Jan 2008 12:53:35 +0100
Subject: [Transform-svn] r292 - trunk/src/com/flagstone/transform/test
Message-ID: <200801301153.m0UBrZGT028834@sheep.berlios.de>

Author: smackay
Date: 2008-01-30 12:53:28 +0100 (Wed, 30 Jan 2008)
New Revision: 292

Added:
   trunk/src/com/flagstone/transform/test/FSFrameTest.java
   trunk/src/com/flagstone/transform/test/FSHeaderTest.java
   trunk/src/com/flagstone/transform/test/FSLayerTest.java
   trunk/src/com/flagstone/transform/test/UtilityTests.java
Modified:
   trunk/src/com/flagstone/transform/test/AllTests.java
Log:
added unit tests for FSHeader, FSFrame, FSLayer.

Modified: trunk/src/com/flagstone/transform/test/AllTests.java
===================================================================
--- trunk/src/com/flagstone/transform/test/AllTests.java	2008-01-28 11:37:00 UTC (rev 291)
+++ trunk/src/com/flagstone/transform/test/AllTests.java	2008-01-30 11:53:28 UTC (rev 292)
@@ -12,6 +12,7 @@
         suite.addTest(MovieObjectTests.suite());
         suite.addTest(MovieTests.suite());
         suite.addTest(ConstructorTests.suite());
+        suite.addTest(UtilityTests.suite());
         return suite;
     }
 }

Added: trunk/src/com/flagstone/transform/test/FSFrameTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSFrameTest.java	2008-01-28 11:37:00 UTC (rev 291)
+++ trunk/src/com/flagstone/transform/test/FSFrameTest.java	2008-01-30 11:53:28 UTC (rev 292)
@@ -0,0 +1,148 @@
+/*
+ * FSFrameTest.java
+ * Transform
+ *
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ *  * Redistributions of source code must retain the above copyright notice, this
+ *    list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *  * Neither the name of Flagstone Software Ltd. nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package com.flagstone.transform.test;
+
+import java.util.ArrayList;
+
+import com.flagstone.transform.FSFrame;
+import com.flagstone.transform.FSMovie;
+import com.flagstone.transform.FSBounds;
+import com.flagstone.transform.FSDefineShape;
+import com.flagstone.transform.FSDoAction;
+import com.flagstone.transform.FSFrameLabel;
+import com.flagstone.transform.FSPlaceObject2;
+import com.flagstone.transform.FSRemoveObject2;
+import com.flagstone.transform.FSShape;
+import com.flagstone.transform.FSShowFrame;
+import com.flagstone.transform.FSPush;
+import com.flagstone.transform.FSGotoFrame2;
+
+import junit.framework.TestCase;
+
+public class FSFrameTest extends TestCase
+{
+	private FSMovie movie;
+	private FSBounds bounds;
+	private String label;
+	
+	private FSDefineShape shape;
+	private FSPlaceObject2 place;
+	private FSFrameLabel name;
+	private FSRemoveObject2 remove;
+	private FSDoAction doAction;
+	private ArrayList actions;
+	
+	protected void setUp()
+	{
+		int layer = 1;
+		
+		bounds = new FSBounds(0,0,100,100);
+		label = "frame";
+		
+		movie = new FSMovie();
+		movie.setFrameSize(bounds);
+		movie.setFrameRate(1.0f);
+
+		shape = new FSDefineShape(movie.newIdentifier(), bounds, new ArrayList(), new ArrayList(), new FSShape());
+		place = new FSPlaceObject2(shape.getIdentifier(), layer, 0,0);
+		name = new FSFrameLabel(label);
+		remove = new FSRemoveObject2(layer);
+		
+		actions = new ArrayList();
+		actions.add(new FSPush("label"));
+		actions.add(new FSGotoFrame2(true));
+
+		doAction = new FSDoAction(actions);		
+	}
+	
+	public void testFramesFromMovie()
+	{
+		movie.add(shape);
+		movie.add(place);
+		movie.add(name);
+		movie.add(new FSShowFrame());
+		movie.add(remove);
+		movie.add(doAction);
+		movie.add(new FSShowFrame());
+
+		ArrayList frames = FSFrame.framesFromMovie(movie);
+		
+		assertEquals(frames.size(), 2);
+		
+		FSFrame one = (FSFrame)frames.get(0);
+		assertEquals(one.getNumber(), 1);
+		assertEquals(one.getLabel(), label);
+		assertEquals(one.getDefinitions().size(), 1);
+		assertEquals(one.getCommands().size(), 2);
+		assertEquals(one.getActions().size(), 0);
+		
+		FSFrame two = (FSFrame)frames.get(1);
+		assertEquals(two.getNumber(), 2);
+		assertEquals(two.getLabel(), null);
+		assertEquals(two.getDefinitions().size(), 0);
+		assertEquals(two.getCommands().size(), 1);
+		assertEquals(two.getActions(), actions);		
+	}
+
+	public void testAddToMovie()
+	{
+		FSFrame frame; 
+		
+		frame = new FSFrame(1);
+		frame.setLabel(label);
+		frame.addDefinition(shape);
+		frame.addCommand(place);
+		frame.addToMovie(movie);
+		
+		frame = new FSFrame(2);
+		frame.addCommand(remove);
+		frame.setActions(actions);
+		frame.addToMovie(movie);
+		
+		ArrayList frames = FSFrame.framesFromMovie(movie);
+		
+		assertEquals(frames.size(), 2);
+		
+		FSFrame one = (FSFrame)frames.get(0);
+		assertEquals(one.getNumber(), 1);
+		assertEquals(one.getLabel(), label);
+		assertEquals(one.getDefinitions().size(), 1);
+		assertEquals(one.getCommands().size(), 2);
+		assertEquals(one.getActions().size(), 0);
+		
+		FSFrame two = (FSFrame)frames.get(1);
+		assertEquals(two.getNumber(), 2);
+		assertEquals(two.getLabel(), null);
+		assertEquals(two.getDefinitions().size(), 0);
+		assertEquals(two.getCommands().size(), 1);
+		assertEquals(two.getActions(), actions);		
+	}
+}
+

Added: trunk/src/com/flagstone/transform/test/FSHeaderTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSHeaderTest.java	2008-01-28 11:37:00 UTC (rev 291)
+++ trunk/src/com/flagstone/transform/test/FSHeaderTest.java	2008-01-30 11:53:28 UTC (rev 292)
@@ -0,0 +1,198 @@
+/*
+ * FSHeaderTest.java
+ * Transform
+ *
+ * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ *  * Redistributions of source code must retain the above copyright notice, this
+ *    list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *  * Neither the name of Flagstone Software Ltd. nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package com.flagstone.transform.test;
+
+import java.io.File;
+import java.util.Iterator;
+
+import com.flagstone.transform.FSHeader;
+import com.flagstone.transform.FSMovie;
+import com.flagstone.transform.FSMovieObject;
+import com.flagstone.transform.FSBounds;
+import com.flagstone.transform.FSShowFrame;
+
+import junit.framework.TestCase;
+
+public class FSHeaderTest extends TestCase
+{
+    public void testData()
+    {
+    	try
+    	{
+	    	FSMovie movie = new FSMovie();
+	    	movie.setSignature("FWS");
+	    	movie.setVersion(4);
+	    	movie.setFrameSize(new FSBounds(100,200,1000,2000));
+	    	movie.setFrameRate(12.0f);
+	    	movie.add(new FSShowFrame());
+	    	
+	    	FSHeader header = new FSHeader(movie.encode());
+	    	compare(header, movie);
+	    	
+	    	movie.setVersion(5);
+	    	movie.setFrameSize(new FSBounds(150,250,1500,2500));
+	    	movie.setFrameRate(24.0f);
+	    	movie.add(new FSShowFrame());
+	    	
+	    	header.decodeFromData(movie.encode());
+	    	compare(header, movie);
+    	}
+    	catch (Exception e)
+    	{
+    		fail();
+    	}   	
+    }
+    
+    public void testCompressedData()
+    {
+    	try
+    	{
+	    	FSMovie movie = new FSMovie();
+	    	movie.setSignature("CWS");
+	    	movie.setVersion(6);
+	    	movie.setFrameSize(new FSBounds(100,200,1000,2000));
+	    	movie.setFrameRate(14.0f);
+	    	movie.add(new FSShowFrame());
+	    	
+	    	FSHeader header = new FSHeader(movie.encode());
+	    	compare(header, movie);
+	    	
+	    	movie.setVersion(5);
+	    	movie.setFrameSize(new FSBounds(150,250,1500,2500));
+	    	movie.setFrameRate(24.0f);
+	    	movie.add(new FSShowFrame());
+	    	
+	    	header.decodeFromData(movie.encode());
+	    	compare(header, movie);
+    	}
+    	catch (Exception e)
+    	{
+    		fail();
+    	}   	
+    }
+
+    public void testPath()
+    {
+    	try
+    	{
+	    	File destDir = new File("test/results/FSHeader");
+	    	File destFile = new File(destDir, "movie.swf");
+	    	
+            if (destDir.exists() == false)
+                assertTrue("Count not create directory: "+destDir, destDir.mkdirs());
+
+            FSMovie movie = new FSMovie();
+	    	movie.setSignature("FWS");
+	    	movie.setVersion(4);
+	    	movie.setFrameSize(new FSBounds(100,200,1000,2000));
+	    	movie.setFrameRate(12.0f);
+	    	movie.add(new FSShowFrame());
+	    	movie.encodeToFile(destFile.getPath());
+	    	
+	    	FSHeader header = new FSHeader(destFile.getPath());
+	    	compare(header, movie);
+	    	
+	    	movie.setVersion(5);
+	    	movie.setFrameSize(new FSBounds(150,250,1500,2500));
+	    	movie.setFrameRate(24.0f);
+	    	movie.add(new FSShowFrame());
+	    	movie.encodeToFile(destFile.getPath());
+	    	
+	    	header.decodeFromFile(destFile.getPath());
+	    	compare(header, movie);
+    	}
+    	catch (Exception e)
+    	{
+    		fail();
+    	}   	
+    }
+
+    public void testFile()
+    {
+    	try
+    	{
+	    	File destDir = new File("test/results/FSHeader");
+	    	File destFile = new File(destDir, "movie.swf");
+	    	
+            if (destDir.exists() == false)
+                assertTrue("Count not create directory: "+destDir, destDir.mkdirs());
+
+            FSMovie movie = new FSMovie();
+	    	movie.setSignature("FWS");
+	    	movie.setVersion(4);
+	    	movie.setFrameSize(new FSBounds(100,200,1000,2000));
+	    	movie.setFrameRate(12.0f);
+	    	movie.add(new FSShowFrame());
+	    	movie.encodeToFile(destFile.getPath());
+	    	
+	    	FSHeader header = new FSHeader(destFile);
+	    	compare(header, movie);
+	    	
+	    	movie.setVersion(5);
+	    	movie.setFrameSize(new FSBounds(150,250,1500,2500));
+	    	movie.setFrameRate(24.0f);
+	    	movie.add(new FSShowFrame());
+	    	movie.encodeToFile(destFile.getPath());
+	    	
+	    	header.decodeFromFile(destFile);
+	    	compare(header, movie);
+    	}
+    	catch (Exception e)
+    	{
+    		fail();
+    	}   	
+    }
+    
+    private void compare(FSHeader header, FSMovie movie)
+    {
+    	FSBounds bounds = movie.getFrameSize();
+    	
+    	int frames = 0;
+    	
+    	for (Iterator i=movie.getObjects().iterator(); i.hasNext();)
+    	{
+    		FSMovieObject object = (FSMovieObject)i.next();
+    		
+    		if (object.getType() == FSMovieObject.ShowFrame) {
+    			frames++;
+    		}
+    	}
+    	
+    	assertEquals(header.getSignature(), movie.getSignature());
+    	assertEquals(header.getVersion(), movie.getVersion());
+    	assertEquals(header.getMinX(), bounds.getMinX());
+    	assertEquals(header.getMinY(), bounds.getMinY());
+    	assertEquals(header.getMaxX(), bounds.getMaxX());
+    	assertEquals(header.getMaxY(), bounds.getMaxY());
+    	assertEquals(header.getFrameRate(), movie.getFrameRate(), 0.0f);
+    	assertEquals(header.getNumberOfFrames(), frames);
+    }
+}
+

Added: trunk/src/com/flagstone/transform/test/FSLayerTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSLayerTest.java	2008-01-28 11:37:00 UTC (rev 291)
+++ trunk/src/com/flagstone/transform/test/FSLayerTest.java	2008-01-30 11:53:28 UTC (rev 292)
@@ -0,0 +1,305 @@
+/*
+ * FSLayerTest.java
+ * Transform
+ *
+ * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without modification,
+ * are permitted provided that the following conditions are met:
+ *
+ *  * Redistributions of source code must retain the above copyright notice, this
+ *    list of conditions and the following disclaimer.
+ *  * Redistributions in binary form must reproduce the above copyright notice,
+ *    this list of conditions and the following disclaimer in the documentation
+ *    and/or other materials provided with the distribution.
+ *  * Neither the name of Flagstone Software Ltd. nor the names of its contributors
+ *    may be used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
+ * IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
+ * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
+ * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+ * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
+ * OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+package com.flagstone.transform.test;
+
+import java.util.ArrayList;
+
+import com.flagstone.transform.FSLayer;
+import com.flagstone.transform.FSMovie;
+import com.flagstone.transform.FSBounds;
+import com.flagstone.transform.FSColorTransform;
+import com.flagstone.transform.FSCoordTransform;
+import com.flagstone.transform.FSDefineShape;
+import com.flagstone.transform.FSPlaceObject2;
+import com.flagstone.transform.FSRemoveObject2;
+import com.flagstone.transform.FSShowFrame;
+import com.flagstone.transform.FSShape;
+
+import junit.framework.TestCase;
+
+public class FSLayerTest extends TestCase
+{
+	private FSDefineShape shape;
+	
+	protected void setUp()
+	{
+		shape = new FSDefineShape(1, new FSBounds(0,0,0,0), new ArrayList(), new ArrayList(), new FSShape());	
+	}
+	
+	public void testMerge()
+	{
+		ArrayList layers = new ArrayList();
+		
+		FSLayer one = new FSLayer(1);
+		one.select(1);
+		one.move(1, 1);
+		one.show();
+
+		FSLayer two = new FSLayer(2);	
+		two.select(2);
+		two.move(2, 2);
+		two.show();
+		two.move(3, 3);
+		two.show();
+		
+		layers.add(two);
+		
+		FSLayer three = new FSLayer(3);	
+		three.select(3);
+		three.move(3, 3);
+		three.show();
+		three.move(4, 4);
+		three.show();
+		three.move(5, 5);
+		three.show();
+		
+		layers.add(three);
+		
+		FSMovie movie = new FSMovie();
+		movie.add(new FSPlaceObject2(1, 1, 1, 3));
+		movie.add(new FSPlaceObject2(2, 2, 2, 2));
+		movie.add(new FSPlaceObject2(3, 3, 3, 3));
+		movie.add(new FSShowFrame());
+		movie.add(new FSPlaceObject2(2, 3, 3));
+		movie.add(new FSPlaceObject2(3, 4, 4));
+		movie.add(new FSShowFrame());
+		movie.add(new FSPlaceObject2(3, 5, 5));
+		movie.add(new FSShowFrame());
+				
+		assertEquals(FSLayer.merge(layers), movie.getObjects());
+	}
+	
+	public void testCreate()
+	{
+		int number = 1;
+		
+		FSLayer layer = new FSLayer(number);
+		
+	    assertEquals(layer.getLayer(), number);
+	    assertEquals(layer.getIdentifier(), 0);
+	    assertEquals(layer.getObjects().size(), 0);
+	}
+	
+	public void testAdd()
+	{
+		int number = 1;
+		
+		FSLayer layer = new FSLayer(number);
+		layer.add(shape);
+		
+	    assertEquals(layer.getIdentifier(), 0);
+	    assertEquals(layer.getObjects().size(), 1);
+	}
+	
+	public void testSelectIdentifier()
+	{
+		int number = 1;
+		
+		FSLayer layer = new FSLayer(number);	
+		layer.add(shape);
+		layer.select(shape.getIdentifier());
+		
+	    assertEquals(layer.getIdentifier(), shape.getIdentifier());
+	    assertEquals(layer.getObjects().size(), 2);
+	}
+	
+	public void testSelectObject()
+	{
+		int number = 1;
+		
+		FSLayer layer = new FSLayer(number);	
+		layer.select(shape);
+		
+	    assertEquals(layer.getIdentifier(), shape.getIdentifier());
+	    assertEquals(layer.getObjects().size(), 2);
+	}
+	
+	public void testNew()
+	{
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		
+		ArrayList array = layer.getObjects();
+		FSPlaceObject2 place = (FSPlaceObject2)array.get(1);
+
+	    assertEquals(place.getPlaceType(), FSPlaceObject2.New);
+	}
+	
+	public void testModify()
+	{
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		layer.show();
+		layer.move(10, 10);
+		
+		ArrayList array = layer.getObjects();
+		FSPlaceObject2 place = (FSPlaceObject2)array.get(4);
+		
+	    assertEquals(place.getPlaceType(), FSPlaceObject2.Modify);
+	}
+	
+	public void testReplace()
+	{
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		layer.show();
+		layer.move(10, 10);
+		layer.replace(shape.getIdentifier());
+		
+		ArrayList array = layer.getObjects();
+		FSPlaceObject2 place = (FSPlaceObject2)array.get(4);
+		
+	    assertEquals(place.getPlaceType(), FSPlaceObject2.Replace);
+	}
+	
+	public void testRemove()
+	{
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		layer.show();
+		layer.remove();
+		
+	    assertEquals(layer.getObjects().get(4), new FSRemoveObject2(layer.getLayer()));
+	}
+	
+	public void testShow()
+	{
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		layer.show();
+		
+	    assertEquals(layer.getObjects().size(), 3);
+	    assertEquals(layer.getObjects().get(2), new FSShowFrame());
+	    
+	    layer.show(5);
+		
+	    assertEquals(layer.getObjects().size(), 8);
+	}
+	
+	public void testMove()
+	{
+		int x = 10;
+		int y = 10;
+		
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		layer.move(-x,-y);
+		layer.move(x,y);
+	    
+	    assertEquals(layer.getObjects().get(1), new FSPlaceObject2(shape.getIdentifier(), layer.getLayer(), x, y));
+	}
+	
+	public void testColor()
+	{
+		int r = 0x33;
+		int g = 0x66;
+		int b = 0x99;
+		
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		layer.color(r,g,b);
+	    
+	    assertEquals(((FSPlaceObject2)layer.getObjects().get(1)).getColorTransform(), new FSColorTransform(r,g,b));
+	}
+	
+	public void testTransparentColor()
+	{
+		int r = 0x33;
+		int g = 0x66;
+		int b = 0x99;
+		int a = 0xCC;
+		
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		layer.color(r,g,b,a);
+	    
+	    assertEquals(((FSPlaceObject2)layer.getObjects().get(1)).getColorTransform(), new FSColorTransform(r,g,b,a));
+	}
+	
+	public void testClip()
+	{
+		int depth = 1;
+		
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		layer.clip(depth);
+
+	    assertEquals(((FSPlaceObject2)layer.getObjects().get(1)).getClippingDepth(), depth);
+	}
+	
+	public void testMorph()
+	{
+		float ratio = 0.25f;
+		
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		layer.morph(ratio);
+
+	    assertEquals(((FSPlaceObject2)layer.getObjects().get(1)).getRatio(), ratio, 0.0f);
+	}
+	
+	public void testName()
+	{
+		String label = "test";
+		
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		layer.name(label);
+
+	    assertEquals(((FSPlaceObject2)layer.getObjects().get(1)).getName(), label);
+	}
+	
+	public void testChangeColor()
+	{
+		int r = 0x33;
+		int g = 0x66;
+		int b = 0x99;
+		
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		layer.change(new FSColorTransform(r,g,b));
+	    
+	    assertEquals(((FSPlaceObject2)layer.getObjects().get(1)).getColorTransform(), new FSColorTransform(r,g,b));
+	}
+	
+	public void testChangeLocation()
+	{
+		int x = 10;
+		int y = 10;
+		
+		FSLayer layer = new FSLayer(1);	
+		layer.select(shape);
+		layer.change(new FSCoordTransform(x,y));
+	    
+	    assertEquals(((FSPlaceObject2)layer.getObjects().get(1)).getTransform(), new FSCoordTransform(x,y));
+	}
+	
+}
+

Added: trunk/src/com/flagstone/transform/test/UtilityTests.java
===================================================================
--- trunk/src/com/flagstone/transform/test/UtilityTests.java	2008-01-28 11:37:00 UTC (rev 291)
+++ trunk/src/com/flagstone/transform/test/UtilityTests.java	2008-01-30 11:53:28 UTC (rev 292)
@@ -0,0 +1,14 @@
+package com.flagstone.transform.test;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+public class UtilityTests
+{
+    public static Test suite()
+    {
+        TestSuite suite= new TestSuite();
+        suite.addTestSuite(FSHeaderTest.class);
+        return suite;
+    }
+}



From smackay at mail.berlios.de  Wed Jan 30 14:17:24 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Wed, 30 Jan 2008 14:17:24 +0100
Subject: [Transform-svn] r295 - trunk/src/com/flagstone/transform/test
Message-ID: <200801301317.m0UDHOru020857@sheep.berlios.de>

Author: smackay
Date: 2008-01-30 14:17:21 +0100 (Wed, 30 Jan 2008)
New Revision: 295

Modified:
   trunk/src/com/flagstone/transform/test/MovieTests.java
Log:
removed benchmark test from standard set.

Modified: trunk/src/com/flagstone/transform/test/MovieTests.java
===================================================================
--- trunk/src/com/flagstone/transform/test/MovieTests.java	2008-01-30 11:55:54 UTC (rev 294)
+++ trunk/src/com/flagstone/transform/test/MovieTests.java	2008-01-30 13:17:21 UTC (rev 295)
@@ -9,7 +9,6 @@
     {
         TestSuite suite= new TestSuite();
         suite.addTestSuite(FSMovieTest.class);
-        suite.addTestSuite(FSMovieBenchmark.class);
         return suite;
     }
 }



From smackay at mail.berlios.de  Thu Jan 31 12:23:49 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 12:23:49 +0100
Subject: [Transform-svn] r296 - trunk/src/com/flagstone/transform/test
Message-ID: <200801311123.m0VBNnsH029365@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 12:23:45 +0100 (Thu, 31 Jan 2008)
New Revision: 296

Modified:
   trunk/src/com/flagstone/transform/test/FSFrameTest.java
   trunk/src/com/flagstone/transform/test/FSLayerTest.java
   trunk/src/com/flagstone/transform/test/FSProtectTest.java
   trunk/src/com/flagstone/transform/test/UtilityTests.java
Log:
Added new tests for FSFrame, FSLayer and FSHeader.

Modified: trunk/src/com/flagstone/transform/test/FSFrameTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSFrameTest.java	2008-01-30 13:17:21 UTC (rev 295)
+++ trunk/src/com/flagstone/transform/test/FSFrameTest.java	2008-01-31 11:23:45 UTC (rev 296)
@@ -100,7 +100,7 @@
 		assertEquals(one.getNumber(), 1);
 		assertEquals(one.getLabel(), label);
 		assertEquals(one.getDefinitions().size(), 1);
-		assertEquals(one.getCommands().size(), 2);
+		assertEquals(one.getCommands().size(), 1);
 		assertEquals(one.getActions().size(), 0);
 		
 		FSFrame two = (FSFrame)frames.get(1);
@@ -134,7 +134,7 @@
 		assertEquals(one.getNumber(), 1);
 		assertEquals(one.getLabel(), label);
 		assertEquals(one.getDefinitions().size(), 1);
-		assertEquals(one.getCommands().size(), 2);
+		assertEquals(one.getCommands().size(), 1);
 		assertEquals(one.getActions().size(), 0);
 		
 		FSFrame two = (FSFrame)frames.get(1);

Modified: trunk/src/com/flagstone/transform/test/FSLayerTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSLayerTest.java	2008-01-30 13:17:21 UTC (rev 295)
+++ trunk/src/com/flagstone/transform/test/FSLayerTest.java	2008-01-31 11:23:45 UTC (rev 296)
@@ -62,6 +62,8 @@
 		one.move(1, 1);
 		one.show();
 
+		layers.add(one);
+		
 		FSLayer two = new FSLayer(2);	
 		two.select(2);
 		two.move(2, 2);
@@ -83,7 +85,7 @@
 		layers.add(three);
 		
 		FSMovie movie = new FSMovie();
-		movie.add(new FSPlaceObject2(1, 1, 1, 3));
+		movie.add(new FSPlaceObject2(1, 1, 1, 1));
 		movie.add(new FSPlaceObject2(2, 2, 2, 2));
 		movie.add(new FSPlaceObject2(3, 3, 3, 3));
 		movie.add(new FSShowFrame());
@@ -160,7 +162,7 @@
 		layer.move(10, 10);
 		
 		ArrayList array = layer.getObjects();
-		FSPlaceObject2 place = (FSPlaceObject2)array.get(4);
+		FSPlaceObject2 place = (FSPlaceObject2)array.get(3);
 		
 	    assertEquals(place.getPlaceType(), FSPlaceObject2.Modify);
 	}
@@ -174,7 +176,7 @@
 		layer.replace(shape.getIdentifier());
 		
 		ArrayList array = layer.getObjects();
-		FSPlaceObject2 place = (FSPlaceObject2)array.get(4);
+		FSPlaceObject2 place = (FSPlaceObject2)array.get(3);
 		
 	    assertEquals(place.getPlaceType(), FSPlaceObject2.Replace);
 	}
@@ -186,7 +188,7 @@
 		layer.show();
 		layer.remove();
 		
-	    assertEquals(layer.getObjects().get(4), new FSRemoveObject2(layer.getLayer()));
+	    assertEquals(layer.getObjects().get(3), new FSRemoveObject2(layer.getLayer()));
 	}
 	
 	public void testShow()
@@ -226,7 +228,7 @@
 		layer.select(shape);
 		layer.color(r,g,b);
 	    
-	    assertEquals(((FSPlaceObject2)layer.getObjects().get(1)).getColorTransform(), new FSColorTransform(r,g,b));
+	    assertEquals(((FSPlaceObject2)layer.getObjects().get(1)).getColorTransform(), new FSColorTransform(r,g,b,255));
 	}
 	
 	public void testTransparentColor()

Modified: trunk/src/com/flagstone/transform/test/FSProtectTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSProtectTest.java	2008-01-30 13:17:21 UTC (rev 295)
+++ trunk/src/com/flagstone/transform/test/FSProtectTest.java	2008-01-31 11:23:45 UTC (rev 296)
@@ -73,7 +73,6 @@
             FSProtect copy = new FSProtect(original);
 
             assertEquals(passwords[i], copy.getPassword());
-            assertNotSame(passwords[i], copy.getPassword());
         }
     }
 
@@ -114,13 +113,17 @@
     public void testEncode()
     {
         FSCoder coder;
+        FSProtect obj;
 
         for (int i=0; i<encodedObjects.length; i++)
         {
             coder = new FSCoder(FSCoder.LITTLE_ENDIAN, 0);
-            new FSProtect(passwords[i]).encode(coder);
+            obj = new FSProtect(passwords[i]);
+           
+            obj.length(coder);
+            obj.encode(coder);
 
-            assertEquals(coder, initCoder(encodedObjects[i], true));
+            assertTrue(coder.equals(initCoder(encodedObjects[i], true)));
         }
     }
 

Modified: trunk/src/com/flagstone/transform/test/UtilityTests.java
===================================================================
--- trunk/src/com/flagstone/transform/test/UtilityTests.java	2008-01-30 13:17:21 UTC (rev 295)
+++ trunk/src/com/flagstone/transform/test/UtilityTests.java	2008-01-31 11:23:45 UTC (rev 296)
@@ -9,6 +9,8 @@
     {
         TestSuite suite= new TestSuite();
         suite.addTestSuite(FSHeaderTest.class);
+        suite.addTestSuite(FSFrameTest.class);
+        suite.addTestSuite(FSLayerTest.class);
         return suite;
     }
 }



From smackay at mail.berlios.de  Thu Jan 31 12:25:54 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 12:25:54 +0100
Subject: [Transform-svn] r297 - trunk/src/com/flagstone/transform/test
Message-ID: <200801311125.m0VBPsb8029498@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 12:25:51 +0100 (Thu, 31 Jan 2008)
New Revision: 297

Modified:
   trunk/src/com/flagstone/transform/test/FSSetBackgroundColorTest.java
   trunk/src/com/flagstone/transform/test/FSShowFrameTest.java
Log:
length of objects are now correctly calculated when testing encoding.

Modified: trunk/src/com/flagstone/transform/test/FSSetBackgroundColorTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSSetBackgroundColorTest.java	2008-01-31 11:23:45 UTC (rev 296)
+++ trunk/src/com/flagstone/transform/test/FSSetBackgroundColorTest.java	2008-01-31 11:25:51 UTC (rev 297)
@@ -120,11 +120,15 @@
     public void testEncode()
     {
         FSCoder coder;
+        FSSetBackgroundColor obj;
 
         for (int i=0; i<encodedObjects.length; i++)
         {
             coder = new FSCoder(FSCoder.LITTLE_ENDIAN, 0);
-            new FSSetBackgroundColor(colours[i]).encode(coder);
+            obj = new FSSetBackgroundColor(colours[i]);
+            
+            obj.length(coder);
+            obj.encode(coder);
 
             assertEquals(coder, initCoder(encodedObjects[i], true));
         }

Modified: trunk/src/com/flagstone/transform/test/FSShowFrameTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSShowFrameTest.java	2008-01-31 11:23:45 UTC (rev 296)
+++ trunk/src/com/flagstone/transform/test/FSShowFrameTest.java	2008-01-31 11:25:51 UTC (rev 297)
@@ -79,11 +79,15 @@
     public void checkEncode()
     {
         FSCoder coder;
+        FSShowFrame obj;
 
         for (int i=0; i<encodedObjects.length; i++)
         {
             coder = new FSCoder(FSCoder.LITTLE_ENDIAN, 0);
-            new FSShowFrame().encode(coder);
+            obj = new FSShowFrame();
+            
+            obj.length(coder);
+            obj.encode(coder);
 
             assertEquals(coder, initCoder(encodedObjects[i], true));
         }



From smackay at mail.berlios.de  Thu Jan 31 12:26:21 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 12:26:21 +0100
Subject: [Transform-svn] r298 - trunk/src/com/flagstone/transform
Message-ID: <200801311126.m0VBQLQR029539@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 12:26:18 +0100 (Thu, 31 Jan 2008)
New Revision: 298

Modified:
   trunk/src/com/flagstone/transform/FSProtect.java
Log:
Password string no longer contains any trailing null byte.

Modified: trunk/src/com/flagstone/transform/FSProtect.java
===================================================================
--- trunk/src/com/flagstone/transform/FSProtect.java	2008-01-31 11:25:51 UTC (rev 297)
+++ trunk/src/com/flagstone/transform/FSProtect.java	2008-01-31 11:26:18 UTC (rev 298)
@@ -179,6 +179,10 @@
         {
             coder.readWord(2, false);
             password = coder.readString(length-2);
+            
+            while (password.charAt(password.length()-1) == 0) {
+            	password = password.substring(0, password.length()-1);
+            }
         }        
         coder.endObject(name());
     }



From smackay at mail.berlios.de  Thu Jan 31 12:29:35 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 12:29:35 +0100
Subject: [Transform-svn] r299 - trunk/doc/releases
Message-ID: <200801311129.m0VBTZZH029732@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 12:29:32 +0100 (Thu, 31 Jan 2008)
New Revision: 299

Added:
   trunk/doc/releases/transform-2.2.0.txt
Modified:
   trunk/doc/releases/transform-pre-2.2.0.txt
Log:
Updated release notes for version 2.2

Added: trunk/doc/releases/transform-2.2.0.txt
===================================================================
--- trunk/doc/releases/transform-2.2.0.txt	2008-01-31 11:26:18 UTC (rev 298)
+++ trunk/doc/releases/transform-2.2.0.txt	2008-01-31 11:29:32 UTC (rev 299)
@@ -0,0 +1,129 @@
+----------------------------------------------------------
+  Release Notes for Transform SWF for Java, Version 2.2.
+----------------------------------------------------------
+
+The release adds new classes to make it easier to construct movies and get 
+information about flash file. New methods are added to JPEG images to get 
+width and height.
+
+
+Bug Fixes
+    FSColorTransform method isUnityTransform is now correctly spelled.
+    Trailing null byte is now removed from password string in FSProtect.
+
+Class Changes
+    JPEG Images have width and height.
+    FSShapeConstructor - polygon() now handles absolute coordinates.
+    FSFrame - a new class for organising the time-line within movies.
+    FSLayer - a new class for organising the animation of objects within movies.
+    FSHeader - a new class for just getting information about a flash file.
+    
+Documentation Changes
+    FSPlaceObject2 - corrected documentation on setting the morph ratio.
+
+Testing Changes
+    None scheduled
+    
+Package Changes
+    None scheduled
+
+  
+-------------
+  Bug Fixes  
+-------------
+
+1. FSColorTransform method isUnityTransform is now correctly spelled.
+
+In previous releases the 't' was missing from 'Unity' i.e. isUniyTransform. This 
+is now corrected to isUnityTransform.
+
+2. Trailing null byte is now removed from password string in FSProtect.
+
+If the password string in FSProtect contained a trailing null byte marking the
+end of the string then it was included in the string when it was decoded using 
+the UTF-8 character set. The null byte is no longer included.
+
+-----------------
+  Class Changes  
+-----------------
+
+1. JPEG Images have width and height.
+
+Accessor methods to get the width and height of a JPEG encoded image are 
+added to the FSDefineJPEGImage, FSDefineJPEGImage2 and FSDefineJPEGImage3
+classes.
+
+    public int getWidth();
+    public int getHeight();
+
+No set methods are added, the width and height are decoded from the image data 
+whenver the object is decoded or the setImage() method is used.
+
+2. FSShapeConstructor - polygon() now handles absolute coordinates.
+
+The coordinates passed to the polygon(int[]) method on FSShapeConstructor are 
+now absolute. A new method rpolygon(int[]) was added to allow polygons to be 
+drawn using relative coordinates.
+
+3. FSFrame - a new class for organising the time-line within movies.
+
+FSFrame is an upgraded version of the Frame class currently available on the 
+Useful Code page with the addition of a frame number attribute. 
+
+Grouping together all the objects associated with a frame simplifies greatly the 
+task of creation and editing a movie. However supported numbered frames becomes
+really useful when combined with the new FSLayer class.
+
+4. FSLayer - a new class for organising the animation of objects within movies.
+
+Currently all the objects must be created and positioned for successive frames.
+This makes creating of complex animations with Transform next to impossible 
+without careful coding.
+
+With the FSLayer class, separate time-lines can be created for each object. With
+each frame numbered using the FSFrame class all the layers can easily be aligned 
+and flattened to create the final animation. 
+
+5. FSHeader - a new class for just getting information about a flash file.
+
+FSHeader decodes the header block of a flash file that contains the following 
+information about a movie:
+
+    signature, indicates whether a file was compressed "CWS" or not "FWS".
+	version, the version of Flash used.
+	length, the length of the movie in bytes when uncompressed.
+ 	minX, the x-coordinate of the top left corner of the screen.
+ 	maxX, the x-coordinate of the bottom right corner of the screen.
+ 	minY, the y-coordinate of the top left corner of the screen.
+ 	maxY, the y-coordinate of the bottom right corner of the screen.
+ 	frameRate, the rate at which the movie is played, in frames per second.
+ 	frameCount, the number of frames in the movie.
+ 	
+FSHeader only the header information is decoded, the rest of the data structures 
+are ignored so the class can be used to get the attributes of a movie without
+paying the penalty of using FSMovie where all the data structures are decoded.
+
+-------------------------
+  Documentation Changes  
+-------------------------
+
+1. FSPlaceObject2 - corrected documentation on setting the morph ratio.
+
+The javadoc comments on methods that set the morph ratio for an object specified
+the range as 0..65535, this is the actual number encoded in the Flash file 
+however Transform uses a floating point value in the range 0..1 which is more 
+intuitive to use - the value in converted when the object is encoded or decoded.
+The documentation was updated to refer to the floating point range. 
+
+-------------------
+  Testing Changes  
+-------------------
+
+None
+
+-------------------
+  Package Changes  
+-------------------
+
+None
+

Modified: trunk/doc/releases/transform-pre-2.2.0.txt
===================================================================
--- trunk/doc/releases/transform-pre-2.2.0.txt	2008-01-31 11:26:18 UTC (rev 298)
+++ trunk/doc/releases/transform-pre-2.2.0.txt	2008-01-31 11:29:32 UTC (rev 299)
@@ -9,6 +9,7 @@
 
 Bug Fixes
     FSColorTransform method isUnityTransform is now correctly spelled.
+    Trailing null byte is now removed from password string in FSProtect.
 
 Class Changes
     JPEG Images have width and height.
@@ -36,6 +37,12 @@
 In previous releases the 't' was missing from 'Unity' i.e. isUniyTransform. This 
 is now corrected to isUnityTransform.
 
+2. Trailing null byte is now removed from password string in FSProtect.
+
+If the password string in FSProtect contained a trailing null byte marking the
+end of the string then it was included in the string when it was decoded using 
+the UTF-8 character set. The null byte is no longer included.
+
 -----------------
   Class Changes  
 -----------------



From smackay at mail.berlios.de  Thu Jan 31 12:33:31 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 12:33:31 +0100
Subject: [Transform-svn] r300 - trunk/doc
Message-ID: <200801311133.m0VBXVM3003349@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 12:33:26 +0100 (Thu, 31 Jan 2008)
New Revision: 300

Modified:
   trunk/doc/CHANGES.txt
Log:
Updated change log for release 2.2.

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2008-01-31 11:29:32 UTC (rev 299)
+++ trunk/doc/CHANGES.txt	2008-01-31 11:33:26 UTC (rev 300)
@@ -1,3 +1,20 @@
+2007-01-31 - smackay at flagstonesoftware.com
+
+    * Added new convenience classes: FSFrame, FSHeader and FSLayer.
+    
+    * Updated unit tests for movie object classes are correctly encoded.
+    
+    * FSDefineJPEG[2,3] now contain width and height attributes.
+    
+    * The password string in FSProtect no longer contains a trailing null.
+    
+    * Renamed isUniyTransform method on FSColorTransform to isUnityTransform.
+    
+    * FSShapeConstructor polygon() now handles absolute coordinates and a new
+      method rpolygon() was added to handle relative coordinates.
+      
+    * Released version 2.2.  
+
 2007-12-31 - smackay at flagstonesoftware.com
 
     * released 2.1.6.



From smackay at mail.berlios.de  Thu Jan 31 12:34:26 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 12:34:26 +0100
Subject: [Transform-svn] r301 - trunk/src/com/flagstone/transform
Message-ID: <200801311134.m0VBYQIU005185@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 12:34:18 +0100 (Thu, 31 Jan 2008)
New Revision: 301

Modified:
   trunk/src/com/flagstone/transform/FSFrame.java
Log:
getLabel method now returns a null if no label was defined for a frame.

Modified: trunk/src/com/flagstone/transform/FSFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFrame.java	2008-01-31 11:33:26 UTC (rev 300)
+++ trunk/src/com/flagstone/transform/FSFrame.java	2008-01-31 11:34:18 UTC (rev 301)
@@ -142,10 +142,9 @@
     public FSFrame(int number)
     {
         setNumber(number);
-        setLabel("");
-        setDefinitions(new ArrayList());
-        setCommands(new ArrayList());
-        setActions(new ArrayList());
+        definitions = new ArrayList();
+        commands = new ArrayList();
+        actions = new ArrayList();
     }
 
     /** 



From smackay at mail.berlios.de  Thu Jan 31 12:35:12 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 12:35:12 +0100
Subject: [Transform-svn] r302 - trunk/src/com/flagstone/transform
Message-ID: <200801311135.m0VBZCTs007514@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 12:35:07 +0100 (Thu, 31 Jan 2008)
New Revision: 302

Modified:
   trunk/src/com/flagstone/transform/FSLayer.java
Log:
Now using correct constructor when creating colour transforms with only additive terms.

Modified: trunk/src/com/flagstone/transform/FSLayer.java
===================================================================
--- trunk/src/com/flagstone/transform/FSLayer.java	2008-01-31 11:34:18 UTC (rev 301)
+++ trunk/src/com/flagstone/transform/FSLayer.java	2008-01-31 11:35:07 UTC (rev 302)
@@ -327,11 +327,11 @@
     public void color(int r, int g, int b, int a)
     {
     	if (place == null) {
-    		place = new FSPlaceObject2(layer, new FSColorTransform(0.0f, 0.0f, 0.0f, 0.0f, r, g, b, a));
+    		place = new FSPlaceObject2(layer, new FSColorTransform(r, g, b, a));
     		displayList.add(place);
     	}
     	else {
-        	place.setColorTransform(new FSColorTransform(0.0f, 0.0f, 0.0f, 0.0f, r, g, b, a));
+        	place.setColorTransform(new FSColorTransform(r, g, b, a));
     	}
     }
     



From smackay at mail.berlios.de  Thu Jan 31 12:43:44 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 12:43:44 +0100
Subject: [Transform-svn] r303 - trunk
Message-ID: <200801311143.m0VBhiJb024147@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 12:43:36 +0100 (Thu, 31 Jan 2008)
New Revision: 303

Modified:
   trunk/build.xml
Log:
Updated release number.

Modified: trunk/build.xml
===================================================================
--- trunk/build.xml	2008-01-31 11:35:07 UTC (rev 302)
+++ trunk/build.xml	2008-01-31 11:43:36 UTC (rev 303)
@@ -32,7 +32,7 @@
 
     </description>
 
-    <property name="version" value="2.1.6"/>
+    <property name="version" value="2.2"/>
 
     <property name="src.dir" location="src"/>
     <property name="lib.dir" location="lib"/>



From smackay at mail.berlios.de  Thu Jan 31 12:49:12 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 12:49:12 +0100
Subject: [Transform-svn] r304 - trunk/src/com/flagstone/transform
Message-ID: <200801311149.m0VBnCMI032105@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 12:49:08 +0100 (Thu, 31 Jan 2008)
New Revision: 304

Modified:
   trunk/src/com/flagstone/transform/FSHeader.java
   trunk/src/com/flagstone/transform/FSLayer.java
Log:
Corrected errors in javadoc comments.

Modified: trunk/src/com/flagstone/transform/FSHeader.java
===================================================================
--- trunk/src/com/flagstone/transform/FSHeader.java	2008-01-31 11:43:36 UTC (rev 303)
+++ trunk/src/com/flagstone/transform/FSHeader.java	2008-01-31 11:49:08 UTC (rev 304)
@@ -206,7 +206,7 @@
     /**
      * Initialize the FSHeader object with the specified flash file.
      * 
-     * @param filename the path to a file.
+     * @param fileName the path to a file.
      * 
      * @throws FileNotFoundException if the file referenced by the path does 
      * not exist or refers to a directory.

Modified: trunk/src/com/flagstone/transform/FSLayer.java
===================================================================
--- trunk/src/com/flagstone/transform/FSLayer.java	2008-01-31 11:43:36 UTC (rev 303)
+++ trunk/src/com/flagstone/transform/FSLayer.java	2008-01-31 11:49:08 UTC (rev 304)
@@ -263,8 +263,8 @@
      * deleted. Since the display list has one layer per object then the layer
      * number can be used to identify which object to update.
      * 
-     * @param definition an object definition, FSDefineShape, FSDefineImage,
-     * etc. that will be added to the display list.
+     * @param id an object definition, FSDefineShape, FSDefineImage, etc. that 
+     * will be added to the display list.
      */
     public void select(int id)
     {



From smackay at mail.berlios.de  Thu Jan 31 12:50:15 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 12:50:15 +0100
Subject: [Transform-svn] r305 - in trunk/src/com/flagstone/transform: . test
Message-ID: <200801311150.m0VBoFKK000723@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 12:50:12 +0100 (Thu, 31 Jan 2008)
New Revision: 305

Modified:
   trunk/src/com/flagstone/transform/FSFrame.java
   trunk/src/com/flagstone/transform/test/FSFrameTest.java
Log:
removed number attribute from FSFrame.

Modified: trunk/src/com/flagstone/transform/FSFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFrame.java	2008-01-31 11:49:08 UTC (rev 304)
+++ trunk/src/com/flagstone/transform/FSFrame.java	2008-01-31 11:50:12 UTC (rev 305)
@@ -96,9 +96,8 @@
     public static ArrayList framesFromMovie(FSMovie aMovie)
     {
         ArrayList frames = new ArrayList();
-        int number = 1;
 
-        FSFrame currentFrame = new FSFrame(number++);
+        FSFrame currentFrame = new FSFrame();
  
         for (Iterator i = aMovie.getObjects().iterator(); i.hasNext();)
         {
@@ -119,7 +118,7 @@
 			else if (currentObject instanceof FSShowFrame)
 			{
                 frames.add(currentFrame);
-                currentFrame = new FSFrame(number++);
+                currentFrame = new FSFrame();
 			}
             else
             {
@@ -129,7 +128,6 @@
         return frames;
      }    
 
-    private int number = 0;
     private String label = null;
     private ArrayList definitions = null;
     private ArrayList commands = null;
@@ -139,9 +137,8 @@
      * Constructs an empty frame with no label defined and the definitions, 
      * commands and actions arrays empty.
      */
-    public FSFrame(int number)
+    public FSFrame()
     {
-        setNumber(number);
         definitions = new ArrayList();
         commands = new ArrayList();
         actions = new ArrayList();
@@ -158,13 +155,13 @@
      * @param definitions an array of definition objects. Maybe null if no 
      * definitions are defined.
      * 
-     * @param action an array of objects used to manipulate the display list. 
+     * @param commands an array of objects used to manipulate the display list. 
      * Maybe null if no display list commands are defined.
      * 
-     * @param action an array of action objects that will be executed when the 
+     * @param actions an array of action objects that will be executed when the 
      * frame is displayed. Maybe null if no actions are defined.
      */
-    public FSFrame(int number, String label, ArrayList definitions, ArrayList commands, ArrayList actions)
+    public FSFrame(String label, ArrayList definitions, ArrayList commands, ArrayList actions)
     {
         setLabel(label);
         setDefinitions(definitions);
@@ -210,16 +207,6 @@
     }
 
     /** 
-     * Gets the number assigned to the frame. The number indicates when the 
-     * frame will be displayed when a movie is played.
-     * 
-     * @return the frame number.
-     */
-    public int getNumber()
-    {
-        return number;
-    }
-    /** 
      * Gets the label assigned to the frame.
      * 
      * @return the label.
@@ -261,16 +248,6 @@
     }
     
     /** 
-     * Sets the number assigned to the frame. The number indicates when the 
-     * frame will be displayed when a movie is played.
-     * 
-     * @param n the frame number.
-     */
-    public void setNumber(int n)
-    {
-        number = n;
-    }
-    /** 
      * Sets the label for the frame.
      * 
      * @param aString the label.

Modified: trunk/src/com/flagstone/transform/test/FSFrameTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSFrameTest.java	2008-01-31 11:49:08 UTC (rev 304)
+++ trunk/src/com/flagstone/transform/test/FSFrameTest.java	2008-01-31 11:50:12 UTC (rev 305)
@@ -97,14 +97,12 @@
 		assertEquals(frames.size(), 2);
 		
 		FSFrame one = (FSFrame)frames.get(0);
-		assertEquals(one.getNumber(), 1);
 		assertEquals(one.getLabel(), label);
 		assertEquals(one.getDefinitions().size(), 1);
 		assertEquals(one.getCommands().size(), 1);
 		assertEquals(one.getActions().size(), 0);
 		
 		FSFrame two = (FSFrame)frames.get(1);
-		assertEquals(two.getNumber(), 2);
 		assertEquals(two.getLabel(), null);
 		assertEquals(two.getDefinitions().size(), 0);
 		assertEquals(two.getCommands().size(), 1);
@@ -115,13 +113,13 @@
 	{
 		FSFrame frame; 
 		
-		frame = new FSFrame(1);
+		frame = new FSFrame();
 		frame.setLabel(label);
 		frame.addDefinition(shape);
 		frame.addCommand(place);
 		frame.addToMovie(movie);
 		
-		frame = new FSFrame(2);
+		frame = new FSFrame();
 		frame.addCommand(remove);
 		frame.setActions(actions);
 		frame.addToMovie(movie);
@@ -131,14 +129,12 @@
 		assertEquals(frames.size(), 2);
 		
 		FSFrame one = (FSFrame)frames.get(0);
-		assertEquals(one.getNumber(), 1);
 		assertEquals(one.getLabel(), label);
 		assertEquals(one.getDefinitions().size(), 1);
 		assertEquals(one.getCommands().size(), 1);
 		assertEquals(one.getActions().size(), 0);
 		
 		FSFrame two = (FSFrame)frames.get(1);
-		assertEquals(two.getNumber(), 2);
 		assertEquals(two.getLabel(), null);
 		assertEquals(two.getDefinitions().size(), 0);
 		assertEquals(two.getCommands().size(), 1);



From smackay at mail.berlios.de  Thu Jan 31 13:04:51 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 13:04:51 +0100
Subject: [Transform-svn] r306 - in trunk: doc src/com/flagstone/transform
	src/com/flagstone/transform/examples
	src/com/flagstone/transform/test src/com/flagstone/transform/util
Message-ID: <200801311204.m0VC4pb1011146@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 13:03:37 +0100 (Thu, 31 Jan 2008)
New Revision: 306

Modified:
   trunk/doc/CHANGES.txt
   trunk/doc/LICENCE.txt
   trunk/src/com/flagstone/transform/FSAction.java
   trunk/src/com/flagstone/transform/FSActionObject.java
   trunk/src/com/flagstone/transform/FSBitmapFill.java
   trunk/src/com/flagstone/transform/FSBounds.java
   trunk/src/com/flagstone/transform/FSButton.java
   trunk/src/com/flagstone/transform/FSButtonColorTransform.java
   trunk/src/com/flagstone/transform/FSButtonEvent.java
   trunk/src/com/flagstone/transform/FSButtonSound.java
   trunk/src/com/flagstone/transform/FSCall.java
   trunk/src/com/flagstone/transform/FSCharacter.java
   trunk/src/com/flagstone/transform/FSClipEvent.java
   trunk/src/com/flagstone/transform/FSCoder.java
   trunk/src/com/flagstone/transform/FSColor.java
   trunk/src/com/flagstone/transform/FSColorTable.java
   trunk/src/com/flagstone/transform/FSColorTransform.java
   trunk/src/com/flagstone/transform/FSCoordTransform.java
   trunk/src/com/flagstone/transform/FSCurve.java
   trunk/src/com/flagstone/transform/FSDefineButton.java
   trunk/src/com/flagstone/transform/FSDefineButton2.java
   trunk/src/com/flagstone/transform/FSDefineFont.java
   trunk/src/com/flagstone/transform/FSDefineFont2.java
   trunk/src/com/flagstone/transform/FSDefineImage.java
   trunk/src/com/flagstone/transform/FSDefineImage2.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
   trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
   trunk/src/com/flagstone/transform/FSDefineMorphShape.java
   trunk/src/com/flagstone/transform/FSDefineMovieClip.java
   trunk/src/com/flagstone/transform/FSDefineObject.java
   trunk/src/com/flagstone/transform/FSDefineShape.java
   trunk/src/com/flagstone/transform/FSDefineShape2.java
   trunk/src/com/flagstone/transform/FSDefineShape3.java
   trunk/src/com/flagstone/transform/FSDefineSound.java
   trunk/src/com/flagstone/transform/FSDefineText.java
   trunk/src/com/flagstone/transform/FSDefineText2.java
   trunk/src/com/flagstone/transform/FSDefineTextField.java
   trunk/src/com/flagstone/transform/FSDefineVideo.java
   trunk/src/com/flagstone/transform/FSDoAction.java
   trunk/src/com/flagstone/transform/FSEnableDebugger.java
   trunk/src/com/flagstone/transform/FSEnableDebugger2.java
   trunk/src/com/flagstone/transform/FSEnvelope.java
   trunk/src/com/flagstone/transform/FSExceptionHandler.java
   trunk/src/com/flagstone/transform/FSExport.java
   trunk/src/com/flagstone/transform/FSFillStyle.java
   trunk/src/com/flagstone/transform/FSFontInfo.java
   trunk/src/com/flagstone/transform/FSFontInfo2.java
   trunk/src/com/flagstone/transform/FSFrameLabel.java
   trunk/src/com/flagstone/transform/FSFree.java
   trunk/src/com/flagstone/transform/FSGetUrl.java
   trunk/src/com/flagstone/transform/FSGetUrl2.java
   trunk/src/com/flagstone/transform/FSGotoFrame.java
   trunk/src/com/flagstone/transform/FSGotoFrame2.java
   trunk/src/com/flagstone/transform/FSGotoLabel.java
   trunk/src/com/flagstone/transform/FSGradient.java
   trunk/src/com/flagstone/transform/FSGradientFill.java
   trunk/src/com/flagstone/transform/FSHeader.java
   trunk/src/com/flagstone/transform/FSIf.java
   trunk/src/com/flagstone/transform/FSImport.java
   trunk/src/com/flagstone/transform/FSInitialize.java
   trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java
   trunk/src/com/flagstone/transform/FSJump.java
   trunk/src/com/flagstone/transform/FSKerning.java
   trunk/src/com/flagstone/transform/FSLimitScript.java
   trunk/src/com/flagstone/transform/FSLine.java
   trunk/src/com/flagstone/transform/FSLineStyle.java
   trunk/src/com/flagstone/transform/FSMorphBitmapFill.java
   trunk/src/com/flagstone/transform/FSMorphGradient.java
   trunk/src/com/flagstone/transform/FSMorphGradientFill.java
   trunk/src/com/flagstone/transform/FSMorphSolidFill.java
   trunk/src/com/flagstone/transform/FSMorphSolidLine.java
   trunk/src/com/flagstone/transform/FSMovie.java
   trunk/src/com/flagstone/transform/FSMovieEvent.java
   trunk/src/com/flagstone/transform/FSMovieListener.java
   trunk/src/com/flagstone/transform/FSMovieObject.java
   trunk/src/com/flagstone/transform/FSNewFunction.java
   trunk/src/com/flagstone/transform/FSNewFunction2.java
   trunk/src/com/flagstone/transform/FSNull.java
   trunk/src/com/flagstone/transform/FSPathsArePostscript.java
   trunk/src/com/flagstone/transform/FSPlaceObject.java
   trunk/src/com/flagstone/transform/FSPlaceObject2.java
   trunk/src/com/flagstone/transform/FSPointer.java
   trunk/src/com/flagstone/transform/FSProperty.java
   trunk/src/com/flagstone/transform/FSProtect.java
   trunk/src/com/flagstone/transform/FSPush.java
   trunk/src/com/flagstone/transform/FSQuicktimeMovie.java
   trunk/src/com/flagstone/transform/FSRegisterCopy.java
   trunk/src/com/flagstone/transform/FSRegisterIndex.java
   trunk/src/com/flagstone/transform/FSRegisterVariable.java
   trunk/src/com/flagstone/transform/FSRemoveObject.java
   trunk/src/com/flagstone/transform/FSRemoveObject2.java
   trunk/src/com/flagstone/transform/FSSerialNumber.java
   trunk/src/com/flagstone/transform/FSSetBackgroundColor.java
   trunk/src/com/flagstone/transform/FSSetTarget.java
   trunk/src/com/flagstone/transform/FSShape.java
   trunk/src/com/flagstone/transform/FSShapeStyle.java
   trunk/src/com/flagstone/transform/FSShowFrame.java
   trunk/src/com/flagstone/transform/FSSolidFill.java
   trunk/src/com/flagstone/transform/FSSolidLine.java
   trunk/src/com/flagstone/transform/FSSound.java
   trunk/src/com/flagstone/transform/FSSoundStreamBlock.java
   trunk/src/com/flagstone/transform/FSSoundStreamHead.java
   trunk/src/com/flagstone/transform/FSSoundStreamHead2.java
   trunk/src/com/flagstone/transform/FSStartSound.java
   trunk/src/com/flagstone/transform/FSTabOrder.java
   trunk/src/com/flagstone/transform/FSTable.java
   trunk/src/com/flagstone/transform/FSTableIndex.java
   trunk/src/com/flagstone/transform/FSText.java
   trunk/src/com/flagstone/transform/FSTransformObject.java
   trunk/src/com/flagstone/transform/FSUnknownAction.java
   trunk/src/com/flagstone/transform/FSUnknownObject.java
   trunk/src/com/flagstone/transform/FSVideoFrame.java
   trunk/src/com/flagstone/transform/FSVoid.java
   trunk/src/com/flagstone/transform/FSWaitForFrame.java
   trunk/src/com/flagstone/transform/FSWaitForFrame2.java
   trunk/src/com/flagstone/transform/FSWith.java
   trunk/src/com/flagstone/transform/Transform.java
   trunk/src/com/flagstone/transform/examples/DisplayList.java
   trunk/src/com/flagstone/transform/examples/DrawingShapes.java
   trunk/src/com/flagstone/transform/examples/Example.java
   trunk/src/com/flagstone/transform/examples/FillStyles.java
   trunk/src/com/flagstone/transform/examples/Import.java
   trunk/src/com/flagstone/transform/examples/LineStyles.java
   trunk/src/com/flagstone/transform/examples/MovieBasics.java
   trunk/src/com/flagstone/transform/examples/MovieClip.java
   trunk/src/com/flagstone/transform/examples/Transforms.java
   trunk/src/com/flagstone/transform/test/FSColorTest.java
   trunk/src/com/flagstone/transform/test/FSHeaderTest.java
   trunk/src/com/flagstone/transform/test/FSLayerTest.java
   trunk/src/com/flagstone/transform/test/FSMovieBenchmark.java
   trunk/src/com/flagstone/transform/test/FSMovieTest.java
   trunk/src/com/flagstone/transform/test/FSProtectTest.java
   trunk/src/com/flagstone/transform/test/FSSetBackgroundColorTest.java
   trunk/src/com/flagstone/transform/test/FSShowFrameTest.java
   trunk/src/com/flagstone/transform/util/FSCharacterTable.java
   trunk/src/com/flagstone/transform/util/FSCodec.java
   trunk/src/com/flagstone/transform/util/FSImageConstructor.java
   trunk/src/com/flagstone/transform/util/FSShapeConstructor.java
   trunk/src/com/flagstone/transform/util/FSSoundConstructor.java
   trunk/src/com/flagstone/transform/util/FSTextConstructor.java
   trunk/src/com/flagstone/transform/util/TransformUtil.java
Log:
Updated copyright date.

Modified: trunk/doc/CHANGES.txt
===================================================================
--- trunk/doc/CHANGES.txt	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/doc/CHANGES.txt	2008-01-31 12:03:37 UTC (rev 306)
@@ -1,4 +1,4 @@
-2007-01-31 - smackay at flagstonesoftware.com
+2008-01-31 - smackay at flagstonesoftware.com
 
     * Added new convenience classes: FSFrame, FSHeader and FSLayer.
     

Modified: trunk/doc/LICENCE.txt
===================================================================
--- trunk/doc/LICENCE.txt	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/doc/LICENCE.txt	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * All the files in this library are  covered under the terms of the Berkeley
  * Software Distribution (BSD) License:
  *
- * Copyright (c) 2001-2007 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSAction.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSAction.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSAction.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSActionObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSActionObject.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSActionObject.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSActionObject.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSBitmapFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSBitmapFill.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSBitmapFill.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSBitmapFill.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSBounds.java
===================================================================
--- trunk/src/com/flagstone/transform/FSBounds.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSBounds.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSBounds.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSButton.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButton.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSButton.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSButton.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSButtonColorTransform.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonColorTransform.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSButtonColorTransform.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSButtonColorTransform.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSButtonEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonEvent.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSButtonEvent.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSButtonEvent.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSButtonSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSButtonSound.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSButtonSound.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSButtonSOund.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSCall.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCall.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSCall.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSCall.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSCharacter.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCharacter.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSCharacter.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSCharacter.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSClipEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSClipEvent.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSClipEvent.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSClipEvent.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSCoder.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCoder.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSCoder.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSCoder.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSColor.java
===================================================================
--- trunk/src/com/flagstone/transform/FSColor.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSColor.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSColor.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSColorTable.java
===================================================================
--- trunk/src/com/flagstone/transform/FSColorTable.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSColorTable.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSColorTable.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSColorTransform.java
===================================================================
--- trunk/src/com/flagstone/transform/FSColorTransform.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSColorTransform.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSColorTransform.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSCoordTransform.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCoordTransform.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSCoordTransform.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSCoordTransform.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSCurve.java
===================================================================
--- trunk/src/com/flagstone/transform/FSCurve.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSCurve.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSCurve.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineButton.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineButton.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineButton.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineButton2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineButton2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineButton2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineButton2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineFont.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineFont.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineFont.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineFont.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineFont2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineFont2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineFont2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineFont2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineImage.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineImage.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineImage.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineImage.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineImage2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineImage2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineImage2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineImage2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineJPEGImage.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineJPEGImage2.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineJPEGImage3.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineJPEGImage3.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineMorphShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineMorphShape.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineMorphShape.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineMorphShape.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineMovieClip.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineMovieClip.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineMovieClip.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineMovieClip.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineObject.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineObject.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineObject.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineShape.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineShape.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineShape2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineShape2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineShape2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineShape3.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineShape3.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineShape3.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineShape3.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineSound.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineSound.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineSound.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineText.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineText.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineText.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineText.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineText2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineText2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineText2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineText2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineTextField.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineTextField.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineTextField.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineTextField.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDefineVideo.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDefineVideo.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDefineVideo.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDefineVideo.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSDoAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSDoAction.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSDoAction.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSDoAction.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSEnableDebugger.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnableDebugger.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSEnableDebugger.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSEnableDebugger.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSEnableDebugger2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnableDebugger2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSEnableDebugger2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSEnableDebugger2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSEnvelope.java
===================================================================
--- trunk/src/com/flagstone/transform/FSEnvelope.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSEnvelope.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSEnvelope.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSExceptionHandler.java
===================================================================
--- trunk/src/com/flagstone/transform/FSExceptionHandler.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSExceptionHandler.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSExceptionHandler.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSExport.java
===================================================================
--- trunk/src/com/flagstone/transform/FSExport.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSExport.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSExport.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSFillStyle.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFillStyle.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSFillStyle.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSFillStyle.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSFontInfo.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFontInfo.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSFontInfo.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSFontInfo.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSFontInfo2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFontInfo2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSFontInfo2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSFontInfo2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSFrameLabel.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFrameLabel.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSFrameLabel.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSFrameLabel.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSFree.java
===================================================================
--- trunk/src/com/flagstone/transform/FSFree.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSFree.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSFree.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSGetUrl.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGetUrl.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSGetUrl.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSGetUrl.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSGetUrl2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGetUrl2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSGetUrl2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSGetUrl2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSGotoFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGotoFrame.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSGotoFrame.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSGotoFrame.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSGotoFrame2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGotoFrame2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSGotoFrame2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSGotoFrame2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSGotoLabel.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGotoLabel.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSGotoLabel.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSGotoLabel.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSGradient.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGradient.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSGradient.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSGradient.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSGradientFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSGradientFill.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSGradientFill.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSGradientFill.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSHeader.java
===================================================================
--- trunk/src/com/flagstone/transform/FSHeader.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSHeader.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
 /*
  * FSHeader.java
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSIf.java
===================================================================
--- trunk/src/com/flagstone/transform/FSIf.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSIf.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSIf.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSImport.java
===================================================================
--- trunk/src/com/flagstone/transform/FSImport.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSImport.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSImport.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSInitialize.java
===================================================================
--- trunk/src/com/flagstone/transform/FSInitialize.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSInitialize.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSInitialize.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java
===================================================================
--- trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSJPEGEncodingTable.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSJPEGEncodingTable.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSJump.java
===================================================================
--- trunk/src/com/flagstone/transform/FSJump.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSJump.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSJump.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSKerning.java
===================================================================
--- trunk/src/com/flagstone/transform/FSKerning.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSKerning.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSKerning.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSLimitScript.java
===================================================================
--- trunk/src/com/flagstone/transform/FSLimitScript.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSLimitScript.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSLimitScript.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSLine.java
===================================================================
--- trunk/src/com/flagstone/transform/FSLine.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSLine.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSLine.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSLineStyle.java
===================================================================
--- trunk/src/com/flagstone/transform/FSLineStyle.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSLineStyle.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSLineStyle.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSMorphBitmapFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphBitmapFill.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSMorphBitmapFill.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSMorphBitmapFill.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSMorphGradient.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphGradient.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSMorphGradient.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSMorphGradient.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSMorphGradientFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphGradientFill.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSMorphGradientFill.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSMorphGradientFill.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSMorphSolidFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphSolidFill.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSMorphSolidFill.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSMorphSolidFill.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSMorphSolidLine.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMorphSolidLine.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSMorphSolidLine.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSMorphSolidLine.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSMovie.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovie.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSMovie.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSMovie.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSMovieEvent.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovieEvent.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSMovieEvent.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSMovieEvent.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSMovieListener.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovieListener.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSMovieListener.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSMovieListener.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSMovieObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSMovieObject.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSMovieObject.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSMovieObject.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSNewFunction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNewFunction.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSNewFunction.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSNewFunction.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSNewFunction2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNewFunction2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSNewFunction2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSNewFunction2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSNull.java
===================================================================
--- trunk/src/com/flagstone/transform/FSNull.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSNull.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSNull.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSPathsArePostscript.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPathsArePostscript.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSPathsArePostscript.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSPathsArePostscript.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSPlaceObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPlaceObject.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSPlaceObject.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSPlaceObject.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSPlaceObject2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPlaceObject2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSPlaceObject2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSPlaceObject2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSPointer.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPointer.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSPointer.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSPointer.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSProperty.java
===================================================================
--- trunk/src/com/flagstone/transform/FSProperty.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSProperty.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSProperty.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd.. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd.. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSProtect.java
===================================================================
--- trunk/src/com/flagstone/transform/FSProtect.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSProtect.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSProtect.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSPush.java
===================================================================
--- trunk/src/com/flagstone/transform/FSPush.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSPush.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSPush.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSQuicktimeMovie.java
===================================================================
--- trunk/src/com/flagstone/transform/FSQuicktimeMovie.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSQuicktimeMovie.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSQuicktimeMovie.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSRegisterCopy.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRegisterCopy.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSRegisterCopy.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSRegisterCopy.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSRegisterIndex.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRegisterIndex.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSRegisterIndex.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSRegisterIndex.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSRegisterVariable.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRegisterVariable.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSRegisterVariable.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSRegisterVariable.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSRemoveObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRemoveObject.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSRemoveObject.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSRemoveObject.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSRemoveObject2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSRemoveObject2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSRemoveObject2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSRemoveObject2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSSerialNumber.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSerialNumber.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSSerialNumber.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSSerialNumber.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSSetBackgroundColor.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSetBackgroundColor.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSSetBackgroundColor.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSSetBackgroundColor.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSSetTarget.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSetTarget.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSSetTarget.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSSetTarget.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSShape.java
===================================================================
--- trunk/src/com/flagstone/transform/FSShape.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSShape.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSShape.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSShapeStyle.java
===================================================================
--- trunk/src/com/flagstone/transform/FSShapeStyle.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSShapeStyle.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSShapeStyle.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSShowFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSShowFrame.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSShowFrame.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSShowFrame.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSSolidFill.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSolidFill.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSSolidFill.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSSolidFill.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSSolidLine.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSolidLine.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSSolidLine.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSSolidLine.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSound.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSSound.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSSound.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSSoundStreamBlock.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSoundStreamBlock.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSSoundStreamBlock.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSSoundStreamBlock.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSSoundStreamHead.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSoundStreamHead.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSSoundStreamHead.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSSoundStreamHead.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSSoundStreamHead2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSSoundStreamHead2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSSoundStreamHead2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSSoundStreamHead2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSStartSound.java
===================================================================
--- trunk/src/com/flagstone/transform/FSStartSound.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSStartSound.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSStartSound.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSTabOrder.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTabOrder.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSTabOrder.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSTabOrder.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSTable.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTable.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSTable.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSTable.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSTableIndex.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTableIndex.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSTableIndex.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSTableIndex.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSText.java
===================================================================
--- trunk/src/com/flagstone/transform/FSText.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSText.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSText.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSTransformObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSTransformObject.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSTransformObject.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSTransformObject.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSUnknownAction.java
===================================================================
--- trunk/src/com/flagstone/transform/FSUnknownAction.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSUnknownAction.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSUnknownAction.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSUnknownObject.java
===================================================================
--- trunk/src/com/flagstone/transform/FSUnknownObject.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSUnknownObject.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSUnknownObject.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSVideoFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSVideoFrame.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSVideoFrame.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSVideoFrame.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSVoid.java
===================================================================
--- trunk/src/com/flagstone/transform/FSVoid.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSVoid.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSVoid.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSWaitForFrame.java
===================================================================
--- trunk/src/com/flagstone/transform/FSWaitForFrame.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSWaitForFrame.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSWaitForFrame.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSWaitForFrame2.java
===================================================================
--- trunk/src/com/flagstone/transform/FSWaitForFrame2.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSWaitForFrame2.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSWaitForFrame2.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/FSWith.java
===================================================================
--- trunk/src/com/flagstone/transform/FSWith.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/FSWith.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSWith.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/Transform.java
===================================================================
--- trunk/src/com/flagstone/transform/Transform.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/Transform.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSTransform.java
  * Transform
  * 
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:
@@ -90,7 +90,7 @@
             " * Transform For Flash " + VERSION + ", Version " + version);
         
         System.out.println(" * ");
-        System.out.println(" * Copyright (c) Flagstone Software Limited, 2001-2006.");
+        System.out.println(" * Copyright (c) Flagstone Software Limited, 2001-2008.");
         System.out.println(" * All Rights Reserved.");
         System.out.println(" * ");
         System.out.println(" * Use of this software is subject to the terms in the license");

Modified: trunk/src/com/flagstone/transform/examples/DisplayList.java
===================================================================
--- trunk/src/com/flagstone/transform/examples/DisplayList.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/examples/DisplayList.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -3,7 +3,7 @@
  *  Examples
  *
  *  Created by Stuart MacKay on Tue May 13 2003.
- *  Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ *  Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  *  This code is distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  *  EXPRESS OR IMPLIED, AND Flagstone HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING

Modified: trunk/src/com/flagstone/transform/examples/DrawingShapes.java
===================================================================
--- trunk/src/com/flagstone/transform/examples/DrawingShapes.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/examples/DrawingShapes.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -3,7 +3,7 @@
  *  Examples
  *
  *  Created by Stuart MacKay on Thu Jul 25 2003.
- *  Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ *  Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  *  This code is distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  *  EXPRESS OR IMPLIED, AND Flagstone HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING

Modified: trunk/src/com/flagstone/transform/examples/Example.java
===================================================================
--- trunk/src/com/flagstone/transform/examples/Example.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/examples/Example.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -3,7 +3,7 @@
  *  Examples
  *
  *  Created by Stuart MacKay on Fri Jul 25 2003.
- *  Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ *  Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  *  This code is distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  *  EXPRESS OR IMPLIED, AND Flagstone HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING

Modified: trunk/src/com/flagstone/transform/examples/FillStyles.java
===================================================================
--- trunk/src/com/flagstone/transform/examples/FillStyles.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/examples/FillStyles.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -3,7 +3,7 @@
  *  Examples
  *
  *  Created by Stuart MacKay on Fri Jul 25 2003.
- *  Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ *  Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  *  This code is distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  *  EXPRESS OR IMPLIED, AND Flagstone HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING

Modified: trunk/src/com/flagstone/transform/examples/Import.java
===================================================================
--- trunk/src/com/flagstone/transform/examples/Import.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/examples/Import.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -3,7 +3,7 @@
  *  Examples
  *
  *  Created by Stuart MacKay on Tue May 13 2003.
- *  Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ *  Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  *  This code is distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  *  EXPRESS OR IMPLIED, AND Flagstone HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING

Modified: trunk/src/com/flagstone/transform/examples/LineStyles.java
===================================================================
--- trunk/src/com/flagstone/transform/examples/LineStyles.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/examples/LineStyles.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -3,7 +3,7 @@
  *  Examples
  *
  *  Created by Stuart MacKay on Fri Jul 24 2003.
- *  Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ *  Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  *  This code is distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  *  EXPRESS OR IMPLIED, AND Flagstone HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING

Modified: trunk/src/com/flagstone/transform/examples/MovieBasics.java
===================================================================
--- trunk/src/com/flagstone/transform/examples/MovieBasics.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/examples/MovieBasics.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -3,7 +3,7 @@
  *  Examples
  *
  *  Created by Stuart MacKay on Fri Jul 25 2003.
- *  Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ *  Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  *  This code is distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  *  EXPRESS OR IMPLIED, AND Flagstone HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING

Modified: trunk/src/com/flagstone/transform/examples/MovieClip.java
===================================================================
--- trunk/src/com/flagstone/transform/examples/MovieClip.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/examples/MovieClip.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -3,7 +3,7 @@
  *  Examples
  *
  *  Created by Stuart MacKay on Fri Jul 25 2003.
- *  Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ *  Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  *  This code is distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  *  EXPRESS OR IMPLIED, AND Flagstone HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING

Modified: trunk/src/com/flagstone/transform/examples/Transforms.java
===================================================================
--- trunk/src/com/flagstone/transform/examples/Transforms.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/examples/Transforms.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -3,7 +3,7 @@
  *  Examples
  *
  *  Created by Stuart MacKay on Fri Jul 25 2003.
- *  Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ *  Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  *  This code is distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
  *  EXPRESS OR IMPLIED, AND Flagstone HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING

Modified: trunk/src/com/flagstone/transform/test/FSColorTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSColorTest.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/test/FSColorTest.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSColorTest.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/test/FSHeaderTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSHeaderTest.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/test/FSHeaderTest.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSHeaderTest.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/test/FSLayerTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSLayerTest.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/test/FSLayerTest.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSLayerTest.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/test/FSMovieBenchmark.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSMovieBenchmark.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/test/FSMovieBenchmark.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSMovieTest.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/test/FSMovieTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSMovieTest.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/test/FSMovieTest.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSMovieTest.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/test/FSProtectTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSProtectTest.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/test/FSProtectTest.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSProtectTest.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/test/FSSetBackgroundColorTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSSetBackgroundColorTest.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/test/FSSetBackgroundColorTest.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSSetBackgroundColorTest.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/test/FSShowFrameTest.java
===================================================================
--- trunk/src/com/flagstone/transform/test/FSShowFrameTest.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/test/FSShowFrameTest.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSSetBackgroundColorTest.java
  * Transform
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/util/FSCharacterTable.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSCharacterTable.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/util/FSCharacterTable.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  *  FSCharacterTable.java
  *  Transform Utilities
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/util/FSCodec.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSCodec.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/util/FSCodec.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  * FSCodec.java
  * Transform Utilities
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/util/FSImageConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSImageConstructor.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/util/FSImageConstructor.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  *  FSImageConstructor.java
  *  Transform Utilities
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/util/FSShapeConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSShapeConstructor.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/util/FSShapeConstructor.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  *  FSShapeConstructor.java
  *  Transform Utilities
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/util/FSSoundConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSSoundConstructor.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/util/FSSoundConstructor.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  *  FSSoundConstructor.java
  *  Transform Utilities
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/util/FSTextConstructor.java
===================================================================
--- trunk/src/com/flagstone/transform/util/FSTextConstructor.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/util/FSTextConstructor.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  *  FSTextConstructor.java
  *  Transform Utilities
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:

Modified: trunk/src/com/flagstone/transform/util/TransformUtil.java
===================================================================
--- trunk/src/com/flagstone/transform/util/TransformUtil.java	2008-01-31 11:50:12 UTC (rev 305)
+++ trunk/src/com/flagstone/transform/util/TransformUtil.java	2008-01-31 12:03:37 UTC (rev 306)
@@ -2,7 +2,7 @@
  *  TransformUtil.java
  *  Transform Utilities
  *
- * Copyright (c) 2001-2006 Flagstone Software Ltd. All rights reserved.
+ * Copyright (c) 2001-2008 Flagstone Software Ltd. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without modification, 
  * are permitted provided that the following conditions are met:



From smackay at mail.berlios.de  Thu Jan 31 14:03:37 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 14:03:37 +0100
Subject: [Transform-svn] r307 - trunk/doc/releases
Message-ID: <200801311303.m0VD3bUs023559@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 14:03:34 +0100 (Thu, 31 Jan 2008)
New Revision: 307

Modified:
   trunk/doc/releases/transform-2.2.0.txt
Log:
removed reference to frame number - it was removed.

Modified: trunk/doc/releases/transform-2.2.0.txt
===================================================================
--- trunk/doc/releases/transform-2.2.0.txt	2008-01-31 12:03:37 UTC (rev 306)
+++ trunk/doc/releases/transform-2.2.0.txt	2008-01-31 13:03:34 UTC (rev 307)
@@ -68,7 +68,7 @@
 3. FSFrame - a new class for organising the time-line within movies.
 
 FSFrame is an upgraded version of the Frame class currently available on the 
-Useful Code page with the addition of a frame number attribute. 
+Useful Code page. 
 
 Grouping together all the objects associated with a frame simplifies greatly the 
 task of creation and editing a movie. However supported numbered frames becomes



From smackay at mail.berlios.de  Thu Jan 31 14:04:15 2008
From: smackay at mail.berlios.de (smackay at mail.berlios.de)
Date: Thu, 31 Jan 2008 14:04:15 +0100
Subject: [Transform-svn] r308 - tags
Message-ID: <200801311304.m0VD4FJw023596@sheep.berlios.de>

Author: smackay
Date: 2008-01-31 14:04:10 +0100 (Thu, 31 Jan 2008)
New Revision: 308

Added:
   tags/rel-2-2-0/
Log:


Copied: tags/rel-2-2-0 (from rev 307, trunk)



